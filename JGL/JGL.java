
    package JGL;
    import java.io.*;
    import java.util.*;
    import java.nio.*;
    import JGLSDLUtils.JGLSDLUtils;
    //Code based on glcorearb.h, which has the following copyright:
/*
** Copyright (c) 2013-2014 The Khronos Group Inc.
**
** Permission is hereby granted, free of charge, to any person obtaining a
** copy of this software and/or associated documentation files (the
** "Materials"), to deal in the Materials without restriction, including
** without limitation the rights to use, copy, modify, merge, publish,
** distribute, sublicense, and/or sell copies of the Materials, and to
** permit persons to whom the Materials are furnished to do so, subject to
** the following conditions:
**
** The above copyright notice and this permission notice shall be included
** in all copies or substantial portions of the Materials.
**
** THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
** EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
** MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
** IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
** CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
** MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
*/
/*
** This header is generated from the Khronos OpenGL / OpenGL ES XML
** API Registry. The current version of the Registry, generator scripts
** used to make the header, and the header can be found at
**   http://www.opengl.org/registry/
**
** Khronos $Revision: 27684 $ on $Date: 2014-08-11 01:21:35 -0700 (Mon, 11 Aug 2014) $
*/
    
    public class JGL {
        
        static{
            JGLSDLUtils.extractAndLoad(JGL.class,"JGL");
        }

        private static class SA{
            byte[] B;
            int[] offsets;
        }
        
        private static SA arrayOfStringsToArrayOfBytes(String[] s){
            java.util.ArrayList<Byte> A = new java.util.ArrayList<>();
            int[] offsets = new int[s.length];
            for(int j=0;j<s.length;++j){
                offsets[j] = A.size();
                byte[] b = s[j].getBytes();
                for(int i=0;i<b.length;++i){
                    A.add(b[i]);
                }
                A.add((byte)0); //null terminator
            }
            
            byte[] B = new byte[A.size()];
            for(int i=0;i<A.size();++i){
                B[i]=A.get(i);
            }
            SA rv = new SA();
            rv.B=B;
            rv.offsets=offsets;
            return rv;
        }
        
        public static void glShaderSource(int shader, int count, String[] string, int[] length){
            SA tmp = arrayOfStringsToArrayOfBytes(string);
            my_glShaderSource(shader,count,tmp.B,tmp.offsets,length);
        }
        public static native void my_glShaderSource(int shader, int count,
            byte[] src, int[] offsets, int[] length);
        
        public static String glGetString(int name){
            byte[] b = my_glGetString(name);
            return new String(b);
        }
        private static native byte[] my_glGetString(int name);

        public static String glGetStringi(int name,int which){
            byte[] b = my_glGetStringi(name,which);
            return new String(b);
        }
        private static native byte[] my_glGetStringi(int name, int which);

        public static native void jglEnableTrace(boolean enabled);
        
        public static void glGetUniformIndices(int program, int uniformCount,
            String[] uniformNames, int[] uniformIndices){
            SA tmp = arrayOfStringsToArrayOfBytes(uniformNames);
            my_glGetUniformIndices(program,uniformCount,tmp.B, tmp.offsets, uniformIndices);
        }
        private static native void my_glGetUniformIndices(
            int program, int uniformcount, byte[] unames, int[] offsets, int[] indices);
            
        public static void glTransformFeedbackVaryings(int prog, int count, 
            String[] varyings, int buffermode){
            SA tmp = arrayOfStringsToArrayOfBytes(varyings);
            my_glTransformFeedbackVaryings(prog,count,tmp.B,tmp.offsets,buffermode);
        }
        private static native void my_glTransformFeedbackVaryings(int prog, int count,
            byte[] b, int[] offsets, int buffermode);
            
        //for testing undefined function handling
        public static native void glTestForUndefinedFunction();
        
        public interface DebugMessageCallback{
            public void debugCallback(int source, int type, int id, int severity, String message, Object param);
        }
        
        private static native void my_glDebugMessageCallback();
        private static native void my_glDebugMessageCallbackARB();
        private static DebugMessageCallback dmc;
        private static Object debugobj;
        public static void glDebugMessageCallback(DebugMessageCallback callback, Object param){
            dmc=callback;
            debugobj=param;
            my_glDebugMessageCallback();
        }
        public static void glDebugMessageCallbackARB(DebugMessageCallback callback, Object param){
            dmc=callback;
            debugobj=param;
            my_glDebugMessageCallbackARB();
        }

        public static int debugmessagecallbackhelper(int a, int b, int c, int d, int e, byte[] f){
            String s = new String(f);
            if(dmc != null)
                dmc.debugCallback(a,b,c,d,s,debugobj);
            //System.out.println("DEBUG: "+a+" "+b+" "+c+" "+d+" "+e+" "+s);
            return 0;
        }
        
        public static native ByteBuffer glMapBufferRange(int target, int offset, int length, int access);
        
        
        public static final int GL_VERSION_1_0 = 1;
    public static final int GL_VERSION_1_1 = 1;
    public static final int GL_DEPTH_BUFFER_BIT = 0x00000100;
    public static final int GL_STENCIL_BUFFER_BIT = 0x00000400;
    public static final int GL_COLOR_BUFFER_BIT = 0x00004000;
    public static final int GL_FALSE = 0;
    public static final int GL_TRUE = 1;
    public static final int GL_POINTS = 0x0000;
    public static final int GL_LINES = 0x0001;
    public static final int GL_LINE_LOOP = 0x0002;
    public static final int GL_LINE_STRIP = 0x0003;
    public static final int GL_TRIANGLES = 0x0004;
    public static final int GL_TRIANGLE_STRIP = 0x0005;
    public static final int GL_TRIANGLE_FAN = 0x0006;
    public static final int GL_QUADS = 0x0007;
    public static final int GL_NEVER = 0x0200;
    public static final int GL_LESS = 0x0201;
    public static final int GL_EQUAL = 0x0202;
    public static final int GL_LEQUAL = 0x0203;
    public static final int GL_GREATER = 0x0204;
    public static final int GL_NOTEQUAL = 0x0205;
    public static final int GL_GEQUAL = 0x0206;
    public static final int GL_ALWAYS = 0x0207;
    public static final int GL_ZERO = 0;
    public static final int GL_ONE = 1;
    public static final int GL_SRC_COLOR = 0x0300;
    public static final int GL_ONE_MINUS_SRC_COLOR = 0x0301;
    public static final int GL_SRC_ALPHA = 0x0302;
    public static final int GL_ONE_MINUS_SRC_ALPHA = 0x0303;
    public static final int GL_DST_ALPHA = 0x0304;
    public static final int GL_ONE_MINUS_DST_ALPHA = 0x0305;
    public static final int GL_DST_COLOR = 0x0306;
    public static final int GL_ONE_MINUS_DST_COLOR = 0x0307;
    public static final int GL_SRC_ALPHA_SATURATE = 0x0308;
    public static final int GL_NONE = 0;
    public static final int GL_FRONT_LEFT = 0x0400;
    public static final int GL_FRONT_RIGHT = 0x0401;
    public static final int GL_BACK_LEFT = 0x0402;
    public static final int GL_BACK_RIGHT = 0x0403;
    public static final int GL_FRONT = 0x0404;
    public static final int GL_BACK = 0x0405;
    public static final int GL_LEFT = 0x0406;
    public static final int GL_RIGHT = 0x0407;
    public static final int GL_FRONT_AND_BACK = 0x0408;
    public static final int GL_NO_ERROR = 0;
    public static final int GL_INVALID_ENUM = 0x0500;
    public static final int GL_INVALID_VALUE = 0x0501;
    public static final int GL_INVALID_OPERATION = 0x0502;
    public static final int GL_OUT_OF_MEMORY = 0x0505;
    public static final int GL_CW = 0x0900;
    public static final int GL_CCW = 0x0901;
    public static final int GL_POINT_SIZE = 0x0B11;
    public static final int GL_POINT_SIZE_RANGE = 0x0B12;
    public static final int GL_POINT_SIZE_GRANULARITY = 0x0B13;
    public static final int GL_LINE_SMOOTH = 0x0B20;
    public static final int GL_LINE_WIDTH = 0x0B21;
    public static final int GL_LINE_WIDTH_RANGE = 0x0B22;
    public static final int GL_LINE_WIDTH_GRANULARITY = 0x0B23;
    public static final int GL_POLYGON_MODE = 0x0B40;
    public static final int GL_POLYGON_SMOOTH = 0x0B41;
    public static final int GL_CULL_FACE = 0x0B44;
    public static final int GL_CULL_FACE_MODE = 0x0B45;
    public static final int GL_FRONT_FACE = 0x0B46;
    public static final int GL_DEPTH_RANGE = 0x0B70;
    public static final int GL_DEPTH_TEST = 0x0B71;
    public static final int GL_DEPTH_WRITEMASK = 0x0B72;
    public static final int GL_DEPTH_CLEAR_VALUE = 0x0B73;
    public static final int GL_DEPTH_FUNC = 0x0B74;
    public static final int GL_STENCIL_TEST = 0x0B90;
    public static final int GL_STENCIL_CLEAR_VALUE = 0x0B91;
    public static final int GL_STENCIL_FUNC = 0x0B92;
    public static final int GL_STENCIL_VALUE_MASK = 0x0B93;
    public static final int GL_STENCIL_FAIL = 0x0B94;
    public static final int GL_STENCIL_PASS_DEPTH_FAIL = 0x0B95;
    public static final int GL_STENCIL_PASS_DEPTH_PASS = 0x0B96;
    public static final int GL_STENCIL_REF = 0x0B97;
    public static final int GL_STENCIL_WRITEMASK = 0x0B98;
    public static final int GL_VIEWPORT = 0x0BA2;
    public static final int GL_DITHER = 0x0BD0;
    public static final int GL_BLEND_DST = 0x0BE0;
    public static final int GL_BLEND_SRC = 0x0BE1;
    public static final int GL_BLEND = 0x0BE2;
    public static final int GL_LOGIC_OP_MODE = 0x0BF0;
    public static final int GL_COLOR_LOGIC_OP = 0x0BF2;
    public static final int GL_DRAW_BUFFER = 0x0C01;
    public static final int GL_READ_BUFFER = 0x0C02;
    public static final int GL_SCISSOR_BOX = 0x0C10;
    public static final int GL_SCISSOR_TEST = 0x0C11;
    public static final int GL_COLOR_CLEAR_VALUE = 0x0C22;
    public static final int GL_COLOR_WRITEMASK = 0x0C23;
    public static final int GL_DOUBLEBUFFER = 0x0C32;
    public static final int GL_STEREO = 0x0C33;
    public static final int GL_LINE_SMOOTH_HINT = 0x0C52;
    public static final int GL_POLYGON_SMOOTH_HINT = 0x0C53;
    public static final int GL_UNPACK_SWAP_BYTES = 0x0CF0;
    public static final int GL_UNPACK_LSB_FIRST = 0x0CF1;
    public static final int GL_UNPACK_ROW_LENGTH = 0x0CF2;
    public static final int GL_UNPACK_SKIP_ROWS = 0x0CF3;
    public static final int GL_UNPACK_SKIP_PIXELS = 0x0CF4;
    public static final int GL_UNPACK_ALIGNMENT = 0x0CF5;
    public static final int GL_PACK_SWAP_BYTES = 0x0D00;
    public static final int GL_PACK_LSB_FIRST = 0x0D01;
    public static final int GL_PACK_ROW_LENGTH = 0x0D02;
    public static final int GL_PACK_SKIP_ROWS = 0x0D03;
    public static final int GL_PACK_SKIP_PIXELS = 0x0D04;
    public static final int GL_PACK_ALIGNMENT = 0x0D05;
    public static final int GL_MAX_TEXTURE_SIZE = 0x0D33;
    public static final int GL_MAX_VIEWPORT_DIMS = 0x0D3A;
    public static final int GL_SUBPIXEL_BITS = 0x0D50;
    public static final int GL_TEXTURE_1D = 0x0DE0;
    public static final int GL_TEXTURE_2D = 0x0DE1;
    public static final int GL_POLYGON_OFFSET_UNITS = 0x2A00;
    public static final int GL_POLYGON_OFFSET_POINT = 0x2A01;
    public static final int GL_POLYGON_OFFSET_LINE = 0x2A02;
    public static final int GL_POLYGON_OFFSET_FILL = 0x8037;
    public static final int GL_POLYGON_OFFSET_FACTOR = 0x8038;
    public static final int GL_TEXTURE_BINDING_1D = 0x8068;
    public static final int GL_TEXTURE_BINDING_2D = 0x8069;
    public static final int GL_TEXTURE_WIDTH = 0x1000;
    public static final int GL_TEXTURE_HEIGHT = 0x1001;
    public static final int GL_TEXTURE_INTERNAL_FORMAT = 0x1003;
    public static final int GL_TEXTURE_BORDER_COLOR = 0x1004;
    public static final int GL_TEXTURE_RED_SIZE = 0x805C;
    public static final int GL_TEXTURE_GREEN_SIZE = 0x805D;
    public static final int GL_TEXTURE_BLUE_SIZE = 0x805E;
    public static final int GL_TEXTURE_ALPHA_SIZE = 0x805F;
    public static final int GL_DONT_CARE = 0x1100;
    public static final int GL_FASTEST = 0x1101;
    public static final int GL_NICEST = 0x1102;
    public static final int GL_BYTE = 0x1400;
    public static final int GL_UNSIGNED_BYTE = 0x1401;
    public static final int GL_SHORT = 0x1402;
    public static final int GL_UNSIGNED_SHORT = 0x1403;
    public static final int GL_INT = 0x1404;
    public static final int GL_UNSIGNED_INT = 0x1405;
    public static final int GL_FLOAT = 0x1406;
    public static final int GL_DOUBLE = 0x140A;
    public static final int GL_STACK_OVERFLOW = 0x0503;
    public static final int GL_STACK_UNDERFLOW = 0x0504;
    public static final int GL_CLEAR = 0x1500;
    public static final int GL_AND = 0x1501;
    public static final int GL_AND_REVERSE = 0x1502;
    public static final int GL_COPY = 0x1503;
    public static final int GL_AND_INVERTED = 0x1504;
    public static final int GL_NOOP = 0x1505;
    public static final int GL_XOR = 0x1506;
    public static final int GL_OR = 0x1507;
    public static final int GL_NOR = 0x1508;
    public static final int GL_EQUIV = 0x1509;
    public static final int GL_INVERT = 0x150A;
    public static final int GL_OR_REVERSE = 0x150B;
    public static final int GL_COPY_INVERTED = 0x150C;
    public static final int GL_OR_INVERTED = 0x150D;
    public static final int GL_NAND = 0x150E;
    public static final int GL_SET = 0x150F;
    public static final int GL_TEXTURE = 0x1702;
    public static final int GL_COLOR = 0x1800;
    public static final int GL_DEPTH = 0x1801;
    public static final int GL_STENCIL = 0x1802;
    public static final int GL_STENCIL_INDEX = 0x1901;
    public static final int GL_DEPTH_COMPONENT = 0x1902;
    public static final int GL_RED = 0x1903;
    public static final int GL_GREEN = 0x1904;
    public static final int GL_BLUE = 0x1905;
    public static final int GL_ALPHA = 0x1906;
    public static final int GL_RGB = 0x1907;
    public static final int GL_RGBA = 0x1908;
    public static final int GL_POINT = 0x1B00;
    public static final int GL_LINE = 0x1B01;
    public static final int GL_FILL = 0x1B02;
    public static final int GL_KEEP = 0x1E00;
    public static final int GL_REPLACE = 0x1E01;
    public static final int GL_INCR = 0x1E02;
    public static final int GL_DECR = 0x1E03;
    public static final int GL_VENDOR = 0x1F00;
    public static final int GL_RENDERER = 0x1F01;
    public static final int GL_VERSION = 0x1F02;
    public static final int GL_EXTENSIONS = 0x1F03;
    public static final int GL_NEAREST = 0x2600;
    public static final int GL_LINEAR = 0x2601;
    public static final int GL_NEAREST_MIPMAP_NEAREST = 0x2700;
    public static final int GL_LINEAR_MIPMAP_NEAREST = 0x2701;
    public static final int GL_NEAREST_MIPMAP_LINEAR = 0x2702;
    public static final int GL_LINEAR_MIPMAP_LINEAR = 0x2703;
    public static final int GL_TEXTURE_MAG_FILTER = 0x2800;
    public static final int GL_TEXTURE_MIN_FILTER = 0x2801;
    public static final int GL_TEXTURE_WRAP_S = 0x2802;
    public static final int GL_TEXTURE_WRAP_T = 0x2803;
    public static final int GL_PROXY_TEXTURE_1D = 0x8063;
    public static final int GL_PROXY_TEXTURE_2D = 0x8064;
    public static final int GL_REPEAT = 0x2901;
    public static final int GL_R3_G3_B2 = 0x2A10;
    public static final int GL_RGB4 = 0x804F;
    public static final int GL_RGB5 = 0x8050;
    public static final int GL_RGB8 = 0x8051;
    public static final int GL_RGB10 = 0x8052;
    public static final int GL_RGB12 = 0x8053;
    public static final int GL_RGB16 = 0x8054;
    public static final int GL_RGBA2 = 0x8055;
    public static final int GL_RGBA4 = 0x8056;
    public static final int GL_RGB5_A1 = 0x8057;
    public static final int GL_RGBA8 = 0x8058;
    public static final int GL_RGB10_A2 = 0x8059;
    public static final int GL_RGBA12 = 0x805A;
    public static final int GL_RGBA16 = 0x805B;
    public static final int GL_VERTEX_ARRAY = 0x8074;
    public static final int GL_VERSION_1_2 = 1;
    public static final int GL_UNSIGNED_BYTE_3_3_2 = 0x8032;
    public static final int GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;
    public static final int GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;
    public static final int GL_UNSIGNED_INT_8_8_8_8 = 0x8035;
    public static final int GL_UNSIGNED_INT_10_10_10_2 = 0x8036;
    public static final int GL_TEXTURE_BINDING_3D = 0x806A;
    public static final int GL_PACK_SKIP_IMAGES = 0x806B;
    public static final int GL_PACK_IMAGE_HEIGHT = 0x806C;
    public static final int GL_UNPACK_SKIP_IMAGES = 0x806D;
    public static final int GL_UNPACK_IMAGE_HEIGHT = 0x806E;
    public static final int GL_TEXTURE_3D = 0x806F;
    public static final int GL_PROXY_TEXTURE_3D = 0x8070;
    public static final int GL_TEXTURE_DEPTH = 0x8071;
    public static final int GL_TEXTURE_WRAP_R = 0x8072;
    public static final int GL_MAX_3D_TEXTURE_SIZE = 0x8073;
    public static final int GL_UNSIGNED_BYTE_2_3_3_REV = 0x8362;
    public static final int GL_UNSIGNED_SHORT_5_6_5 = 0x8363;
    public static final int GL_UNSIGNED_SHORT_5_6_5_REV = 0x8364;
    public static final int GL_UNSIGNED_SHORT_4_4_4_4_REV = 0x8365;
    public static final int GL_UNSIGNED_SHORT_1_5_5_5_REV = 0x8366;
    public static final int GL_UNSIGNED_INT_8_8_8_8_REV = 0x8367;
    public static final int GL_UNSIGNED_INT_2_10_10_10_REV = 0x8368;
    public static final int GL_BGR = 0x80E0;
    public static final int GL_BGRA = 0x80E1;
    public static final int GL_MAX_ELEMENTS_VERTICES = 0x80E8;
    public static final int GL_MAX_ELEMENTS_INDICES = 0x80E9;
    public static final int GL_CLAMP_TO_EDGE = 0x812F;
    public static final int GL_TEXTURE_MIN_LOD = 0x813A;
    public static final int GL_TEXTURE_MAX_LOD = 0x813B;
    public static final int GL_TEXTURE_BASE_LEVEL = 0x813C;
    public static final int GL_TEXTURE_MAX_LEVEL = 0x813D;
    public static final int GL_SMOOTH_POINT_SIZE_RANGE = 0x0B12;
    public static final int GL_SMOOTH_POINT_SIZE_GRANULARITY = 0x0B13;
    public static final int GL_SMOOTH_LINE_WIDTH_RANGE = 0x0B22;
    public static final int GL_SMOOTH_LINE_WIDTH_GRANULARITY = 0x0B23;
    public static final int GL_ALIASED_LINE_WIDTH_RANGE = 0x846E;
    public static final int GL_VERSION_1_3 = 1;
    public static final int GL_TEXTURE0 = 0x84C0;
    public static final int GL_TEXTURE1 = 0x84C1;
    public static final int GL_TEXTURE2 = 0x84C2;
    public static final int GL_TEXTURE3 = 0x84C3;
    public static final int GL_TEXTURE4 = 0x84C4;
    public static final int GL_TEXTURE5 = 0x84C5;
    public static final int GL_TEXTURE6 = 0x84C6;
    public static final int GL_TEXTURE7 = 0x84C7;
    public static final int GL_TEXTURE8 = 0x84C8;
    public static final int GL_TEXTURE9 = 0x84C9;
    public static final int GL_TEXTURE10 = 0x84CA;
    public static final int GL_TEXTURE11 = 0x84CB;
    public static final int GL_TEXTURE12 = 0x84CC;
    public static final int GL_TEXTURE13 = 0x84CD;
    public static final int GL_TEXTURE14 = 0x84CE;
    public static final int GL_TEXTURE15 = 0x84CF;
    public static final int GL_TEXTURE16 = 0x84D0;
    public static final int GL_TEXTURE17 = 0x84D1;
    public static final int GL_TEXTURE18 = 0x84D2;
    public static final int GL_TEXTURE19 = 0x84D3;
    public static final int GL_TEXTURE20 = 0x84D4;
    public static final int GL_TEXTURE21 = 0x84D5;
    public static final int GL_TEXTURE22 = 0x84D6;
    public static final int GL_TEXTURE23 = 0x84D7;
    public static final int GL_TEXTURE24 = 0x84D8;
    public static final int GL_TEXTURE25 = 0x84D9;
    public static final int GL_TEXTURE26 = 0x84DA;
    public static final int GL_TEXTURE27 = 0x84DB;
    public static final int GL_TEXTURE28 = 0x84DC;
    public static final int GL_TEXTURE29 = 0x84DD;
    public static final int GL_TEXTURE30 = 0x84DE;
    public static final int GL_TEXTURE31 = 0x84DF;
    public static final int GL_ACTIVE_TEXTURE = 0x84E0;
    public static final int GL_MULTISAMPLE = 0x809D;
    public static final int GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
    public static final int GL_SAMPLE_ALPHA_TO_ONE = 0x809F;
    public static final int GL_SAMPLE_COVERAGE = 0x80A0;
    public static final int GL_SAMPLE_BUFFERS = 0x80A8;
    public static final int GL_SAMPLES = 0x80A9;
    public static final int GL_SAMPLE_COVERAGE_VALUE = 0x80AA;
    public static final int GL_SAMPLE_COVERAGE_INVERT = 0x80AB;
    public static final int GL_TEXTURE_CUBE_MAP = 0x8513;
    public static final int GL_TEXTURE_BINDING_CUBE_MAP = 0x8514;
    public static final int GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
    public static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
    public static final int GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
    public static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
    public static final int GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
    public static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
    public static final int GL_PROXY_TEXTURE_CUBE_MAP = 0x851B;
    public static final int GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;
    public static final int GL_COMPRESSED_RGB = 0x84ED;
    public static final int GL_COMPRESSED_RGBA = 0x84EE;
    public static final int GL_TEXTURE_COMPRESSION_HINT = 0x84EF;
    public static final int GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86A0;
    public static final int GL_TEXTURE_COMPRESSED = 0x86A1;
    public static final int GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2;
    public static final int GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3;
    public static final int GL_CLAMP_TO_BORDER = 0x812D;
    public static final int GL_VERSION_1_4 = 1;
    public static final int GL_BLEND_DST_RGB = 0x80C8;
    public static final int GL_BLEND_SRC_RGB = 0x80C9;
    public static final int GL_BLEND_DST_ALPHA = 0x80CA;
    public static final int GL_BLEND_SRC_ALPHA = 0x80CB;
    public static final int GL_POINT_FADE_THRESHOLD_SIZE = 0x8128;
    public static final int GL_DEPTH_COMPONENT16 = 0x81A5;
    public static final int GL_DEPTH_COMPONENT24 = 0x81A6;
    public static final int GL_DEPTH_COMPONENT32 = 0x81A7;
    public static final int GL_MIRRORED_REPEAT = 0x8370;
    public static final int GL_MAX_TEXTURE_LOD_BIAS = 0x84FD;
    public static final int GL_TEXTURE_LOD_BIAS = 0x8501;
    public static final int GL_INCR_WRAP = 0x8507;
    public static final int GL_DECR_WRAP = 0x8508;
    public static final int GL_TEXTURE_DEPTH_SIZE = 0x884A;
    public static final int GL_TEXTURE_COMPARE_MODE = 0x884C;
    public static final int GL_TEXTURE_COMPARE_FUNC = 0x884D;
    public static final int GL_FUNC_ADD = 0x8006;
    public static final int GL_FUNC_SUBTRACT = 0x800A;
    public static final int GL_FUNC_REVERSE_SUBTRACT = 0x800B;
    public static final int GL_MIN = 0x8007;
    public static final int GL_MAX = 0x8008;
    public static final int GL_CONSTANT_COLOR = 0x8001;
    public static final int GL_ONE_MINUS_CONSTANT_COLOR = 0x8002;
    public static final int GL_CONSTANT_ALPHA = 0x8003;
    public static final int GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004;
    public static final int GL_VERSION_1_5 = 1;
    public static final int GL_BUFFER_SIZE = 0x8764;
    public static final int GL_BUFFER_USAGE = 0x8765;
    public static final int GL_QUERY_COUNTER_BITS = 0x8864;
    public static final int GL_CURRENT_QUERY = 0x8865;
    public static final int GL_QUERY_RESULT = 0x8866;
    public static final int GL_QUERY_RESULT_AVAILABLE = 0x8867;
    public static final int GL_ARRAY_BUFFER = 0x8892;
    public static final int GL_ELEMENT_ARRAY_BUFFER = 0x8893;
    public static final int GL_ARRAY_BUFFER_BINDING = 0x8894;
    public static final int GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;
    public static final int GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;
    public static final int GL_READ_ONLY = 0x88B8;
    public static final int GL_WRITE_ONLY = 0x88B9;
    public static final int GL_READ_WRITE = 0x88BA;
    public static final int GL_BUFFER_ACCESS = 0x88BB;
    public static final int GL_BUFFER_MAPPED = 0x88BC;
    public static final int GL_BUFFER_MAP_POINTER = 0x88BD;
    public static final int GL_STREAM_DRAW = 0x88E0;
    public static final int GL_STREAM_READ = 0x88E1;
    public static final int GL_STREAM_COPY = 0x88E2;
    public static final int GL_STATIC_DRAW = 0x88E4;
    public static final int GL_STATIC_READ = 0x88E5;
    public static final int GL_STATIC_COPY = 0x88E6;
    public static final int GL_DYNAMIC_DRAW = 0x88E8;
    public static final int GL_DYNAMIC_READ = 0x88E9;
    public static final int GL_DYNAMIC_COPY = 0x88EA;
    public static final int GL_SAMPLES_PASSED = 0x8914;
    public static final int GL_SRC1_ALPHA = 0x8589;
    public static final int GL_VERSION_2_0 = 1;
    public static final int GL_BLEND_EQUATION_RGB = 0x8009;
    public static final int GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;
    public static final int GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;
    public static final int GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;
    public static final int GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;
    public static final int GL_CURRENT_VERTEX_ATTRIB = 0x8626;
    public static final int GL_VERTEX_PROGRAM_POINT_SIZE = 0x8642;
    public static final int GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;
    public static final int GL_STENCIL_BACK_FUNC = 0x8800;
    public static final int GL_STENCIL_BACK_FAIL = 0x8801;
    public static final int GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802;
    public static final int GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x8803;
    public static final int GL_MAX_DRAW_BUFFERS = 0x8824;
    public static final int GL_DRAW_BUFFER0 = 0x8825;
    public static final int GL_DRAW_BUFFER1 = 0x8826;
    public static final int GL_DRAW_BUFFER2 = 0x8827;
    public static final int GL_DRAW_BUFFER3 = 0x8828;
    public static final int GL_DRAW_BUFFER4 = 0x8829;
    public static final int GL_DRAW_BUFFER5 = 0x882A;
    public static final int GL_DRAW_BUFFER6 = 0x882B;
    public static final int GL_DRAW_BUFFER7 = 0x882C;
    public static final int GL_DRAW_BUFFER8 = 0x882D;
    public static final int GL_DRAW_BUFFER9 = 0x882E;
    public static final int GL_DRAW_BUFFER10 = 0x882F;
    public static final int GL_DRAW_BUFFER11 = 0x8830;
    public static final int GL_DRAW_BUFFER12 = 0x8831;
    public static final int GL_DRAW_BUFFER13 = 0x8832;
    public static final int GL_DRAW_BUFFER14 = 0x8833;
    public static final int GL_DRAW_BUFFER15 = 0x8834;
    public static final int GL_BLEND_EQUATION_ALPHA = 0x883D;
    public static final int GL_MAX_VERTEX_ATTRIBS = 0x8869;
    public static final int GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;
    public static final int GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872;
    public static final int GL_FRAGMENT_SHADER = 0x8B30;
    public static final int GL_VERTEX_SHADER = 0x8B31;
    public static final int GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49;
    public static final int GL_MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A;
    public static final int GL_MAX_VARYING_FLOATS = 0x8B4B;
    public static final int GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
    public static final int GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
    public static final int GL_SHADER_TYPE = 0x8B4F;
    public static final int GL_FLOAT_VEC2 = 0x8B50;
    public static final int GL_FLOAT_VEC3 = 0x8B51;
    public static final int GL_FLOAT_VEC4 = 0x8B52;
    public static final int GL_INT_VEC2 = 0x8B53;
    public static final int GL_INT_VEC3 = 0x8B54;
    public static final int GL_INT_VEC4 = 0x8B55;
    public static final int GL_BOOL = 0x8B56;
    public static final int GL_BOOL_VEC2 = 0x8B57;
    public static final int GL_BOOL_VEC3 = 0x8B58;
    public static final int GL_BOOL_VEC4 = 0x8B59;
    public static final int GL_FLOAT_MAT2 = 0x8B5A;
    public static final int GL_FLOAT_MAT3 = 0x8B5B;
    public static final int GL_FLOAT_MAT4 = 0x8B5C;
    public static final int GL_SAMPLER_1D = 0x8B5D;
    public static final int GL_SAMPLER_2D = 0x8B5E;
    public static final int GL_SAMPLER_3D = 0x8B5F;
    public static final int GL_SAMPLER_CUBE = 0x8B60;
    public static final int GL_SAMPLER_1D_SHADOW = 0x8B61;
    public static final int GL_SAMPLER_2D_SHADOW = 0x8B62;
    public static final int GL_DELETE_STATUS = 0x8B80;
    public static final int GL_COMPILE_STATUS = 0x8B81;
    public static final int GL_LINK_STATUS = 0x8B82;
    public static final int GL_VALIDATE_STATUS = 0x8B83;
    public static final int GL_INFO_LOG_LENGTH = 0x8B84;
    public static final int GL_ATTACHED_SHADERS = 0x8B85;
    public static final int GL_ACTIVE_UNIFORMS = 0x8B86;
    public static final int GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87;
    public static final int GL_SHADER_SOURCE_LENGTH = 0x8B88;
    public static final int GL_ACTIVE_ATTRIBUTES = 0x8B89;
    public static final int GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A;
    public static final int GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B;
    public static final int GL_SHADING_LANGUAGE_VERSION = 0x8B8C;
    public static final int GL_CURRENT_PROGRAM = 0x8B8D;
    public static final int GL_POINT_SPRITE_COORD_ORIGIN = 0x8CA0;
    public static final int GL_LOWER_LEFT = 0x8CA1;
    public static final int GL_UPPER_LEFT = 0x8CA2;
    public static final int GL_STENCIL_BACK_REF = 0x8CA3;
    public static final int GL_STENCIL_BACK_VALUE_MASK = 0x8CA4;
    public static final int GL_STENCIL_BACK_WRITEMASK = 0x8CA5;
    public static final int GL_VERSION_2_1 = 1;
    public static final int GL_PIXEL_PACK_BUFFER = 0x88EB;
    public static final int GL_PIXEL_UNPACK_BUFFER = 0x88EC;
    public static final int GL_PIXEL_PACK_BUFFER_BINDING = 0x88ED;
    public static final int GL_PIXEL_UNPACK_BUFFER_BINDING = 0x88EF;
    public static final int GL_FLOAT_MAT2x3 = 0x8B65;
    public static final int GL_FLOAT_MAT2x4 = 0x8B66;
    public static final int GL_FLOAT_MAT3x2 = 0x8B67;
    public static final int GL_FLOAT_MAT3x4 = 0x8B68;
    public static final int GL_FLOAT_MAT4x2 = 0x8B69;
    public static final int GL_FLOAT_MAT4x3 = 0x8B6A;
    public static final int GL_SRGB = 0x8C40;
    public static final int GL_SRGB8 = 0x8C41;
    public static final int GL_SRGB_ALPHA = 0x8C42;
    public static final int GL_SRGB8_ALPHA8 = 0x8C43;
    public static final int GL_COMPRESSED_SRGB = 0x8C48;
    public static final int GL_COMPRESSED_SRGB_ALPHA = 0x8C49;
    public static final int GL_VERSION_3_0 = 1;
    public static final int GL_COMPARE_REF_TO_TEXTURE = 0x884E;
    public static final int GL_CLIP_DISTANCE0 = 0x3000;
    public static final int GL_CLIP_DISTANCE1 = 0x3001;
    public static final int GL_CLIP_DISTANCE2 = 0x3002;
    public static final int GL_CLIP_DISTANCE3 = 0x3003;
    public static final int GL_CLIP_DISTANCE4 = 0x3004;
    public static final int GL_CLIP_DISTANCE5 = 0x3005;
    public static final int GL_CLIP_DISTANCE6 = 0x3006;
    public static final int GL_CLIP_DISTANCE7 = 0x3007;
    public static final int GL_MAX_CLIP_DISTANCES = 0x0D32;
    public static final int GL_MAJOR_VERSION = 0x821B;
    public static final int GL_MINOR_VERSION = 0x821C;
    public static final int GL_NUM_EXTENSIONS = 0x821D;
    public static final int GL_CONTEXT_FLAGS = 0x821E;
    public static final int GL_COMPRESSED_RED = 0x8225;
    public static final int GL_COMPRESSED_RG = 0x8226;
    public static final int GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 0x00000001;
    public static final int GL_RGBA32F = 0x8814;
    public static final int GL_RGB32F = 0x8815;
    public static final int GL_RGBA16F = 0x881A;
    public static final int GL_RGB16F = 0x881B;
    public static final int GL_VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD;
    public static final int GL_MAX_ARRAY_TEXTURE_LAYERS = 0x88FF;
    public static final int GL_MIN_PROGRAM_TEXEL_OFFSET = 0x8904;
    public static final int GL_MAX_PROGRAM_TEXEL_OFFSET = 0x8905;
    public static final int GL_CLAMP_READ_COLOR = 0x891C;
    public static final int GL_FIXED_ONLY = 0x891D;
    public static final int GL_MAX_VARYING_COMPONENTS = 0x8B4B;
    public static final int GL_TEXTURE_1D_ARRAY = 0x8C18;
    public static final int GL_PROXY_TEXTURE_1D_ARRAY = 0x8C19;
    public static final int GL_TEXTURE_2D_ARRAY = 0x8C1A;
    public static final int GL_PROXY_TEXTURE_2D_ARRAY = 0x8C1B;
    public static final int GL_TEXTURE_BINDING_1D_ARRAY = 0x8C1C;
    public static final int GL_TEXTURE_BINDING_2D_ARRAY = 0x8C1D;
    public static final int GL_R11F_G11F_B10F = 0x8C3A;
    public static final int GL_UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;
    public static final int GL_RGB9_E5 = 0x8C3D;
    public static final int GL_UNSIGNED_INT_5_9_9_9_REV = 0x8C3E;
    public static final int GL_TEXTURE_SHARED_SIZE = 0x8C3F;
    public static final int GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8C76;
    public static final int GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F;
    public static final int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80;
    public static final int GL_TRANSFORM_FEEDBACK_VARYINGS = 0x8C83;
    public static final int GL_TRANSFORM_FEEDBACK_BUFFER_START = 0x8C84;
    public static final int GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85;
    public static final int GL_PRIMITIVES_GENERATED = 0x8C87;
    public static final int GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88;
    public static final int GL_RASTERIZER_DISCARD = 0x8C89;
    public static final int GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A;
    public static final int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B;
    public static final int GL_INTERLEAVED_ATTRIBS = 0x8C8C;
    public static final int GL_SEPARATE_ATTRIBS = 0x8C8D;
    public static final int GL_TRANSFORM_FEEDBACK_BUFFER = 0x8C8E;
    public static final int GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F;
    public static final int GL_RGBA32UI = 0x8D70;
    public static final int GL_RGB32UI = 0x8D71;
    public static final int GL_RGBA16UI = 0x8D76;
    public static final int GL_RGB16UI = 0x8D77;
    public static final int GL_RGBA8UI = 0x8D7C;
    public static final int GL_RGB8UI = 0x8D7D;
    public static final int GL_RGBA32I = 0x8D82;
    public static final int GL_RGB32I = 0x8D83;
    public static final int GL_RGBA16I = 0x8D88;
    public static final int GL_RGB16I = 0x8D89;
    public static final int GL_RGBA8I = 0x8D8E;
    public static final int GL_RGB8I = 0x8D8F;
    public static final int GL_RED_INTEGER = 0x8D94;
    public static final int GL_GREEN_INTEGER = 0x8D95;
    public static final int GL_BLUE_INTEGER = 0x8D96;
    public static final int GL_RGB_INTEGER = 0x8D98;
    public static final int GL_RGBA_INTEGER = 0x8D99;
    public static final int GL_BGR_INTEGER = 0x8D9A;
    public static final int GL_BGRA_INTEGER = 0x8D9B;
    public static final int GL_SAMPLER_1D_ARRAY = 0x8DC0;
    public static final int GL_SAMPLER_2D_ARRAY = 0x8DC1;
    public static final int GL_SAMPLER_1D_ARRAY_SHADOW = 0x8DC3;
    public static final int GL_SAMPLER_2D_ARRAY_SHADOW = 0x8DC4;
    public static final int GL_SAMPLER_CUBE_SHADOW = 0x8DC5;
    public static final int GL_UNSIGNED_INT_VEC2 = 0x8DC6;
    public static final int GL_UNSIGNED_INT_VEC3 = 0x8DC7;
    public static final int GL_UNSIGNED_INT_VEC4 = 0x8DC8;
    public static final int GL_INT_SAMPLER_1D = 0x8DC9;
    public static final int GL_INT_SAMPLER_2D = 0x8DCA;
    public static final int GL_INT_SAMPLER_3D = 0x8DCB;
    public static final int GL_INT_SAMPLER_CUBE = 0x8DCC;
    public static final int GL_INT_SAMPLER_1D_ARRAY = 0x8DCE;
    public static final int GL_INT_SAMPLER_2D_ARRAY = 0x8DCF;
    public static final int GL_UNSIGNED_INT_SAMPLER_1D = 0x8DD1;
    public static final int GL_UNSIGNED_INT_SAMPLER_2D = 0x8DD2;
    public static final int GL_UNSIGNED_INT_SAMPLER_3D = 0x8DD3;
    public static final int GL_UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4;
    public static final int GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = 0x8DD6;
    public static final int GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;
    public static final int GL_QUERY_WAIT = 0x8E13;
    public static final int GL_QUERY_NO_WAIT = 0x8E14;
    public static final int GL_QUERY_BY_REGION_WAIT = 0x8E15;
    public static final int GL_QUERY_BY_REGION_NO_WAIT = 0x8E16;
    public static final int GL_BUFFER_ACCESS_FLAGS = 0x911F;
    public static final int GL_BUFFER_MAP_LENGTH = 0x9120;
    public static final int GL_BUFFER_MAP_OFFSET = 0x9121;
    public static final int GL_DEPTH_COMPONENT32F = 0x8CAC;
    public static final int GL_DEPTH32F_STENCIL8 = 0x8CAD;
    public static final int GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;
    public static final int GL_INVALID_FRAMEBUFFER_OPERATION = 0x0506;
    public static final int GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210;
    public static final int GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211;
    public static final int GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212;
    public static final int GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213;
    public static final int GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214;
    public static final int GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215;
    public static final int GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216;
    public static final int GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217;
    public static final int GL_FRAMEBUFFER_DEFAULT = 0x8218;
    public static final int GL_FRAMEBUFFER_UNDEFINED = 0x8219;
    public static final int GL_DEPTH_STENCIL_ATTACHMENT = 0x821A;
    public static final int GL_MAX_RENDERBUFFER_SIZE = 0x84E8;
    public static final int GL_DEPTH_STENCIL = 0x84F9;
    public static final int GL_UNSIGNED_INT_24_8 = 0x84FA;
    public static final int GL_DEPTH24_STENCIL8 = 0x88F0;
    public static final int GL_TEXTURE_STENCIL_SIZE = 0x88F1;
    public static final int GL_TEXTURE_RED_TYPE = 0x8C10;
    public static final int GL_TEXTURE_GREEN_TYPE = 0x8C11;
    public static final int GL_TEXTURE_BLUE_TYPE = 0x8C12;
    public static final int GL_TEXTURE_ALPHA_TYPE = 0x8C13;
    public static final int GL_TEXTURE_DEPTH_TYPE = 0x8C16;
    public static final int GL_UNSIGNED_NORMALIZED = 0x8C17;
    public static final int GL_FRAMEBUFFER_BINDING = 0x8CA6;
    public static final int GL_DRAW_FRAMEBUFFER_BINDING = 0x8CA6;
    public static final int GL_RENDERBUFFER_BINDING = 0x8CA7;
    public static final int GL_READ_FRAMEBUFFER = 0x8CA8;
    public static final int GL_DRAW_FRAMEBUFFER = 0x8CA9;
    public static final int GL_READ_FRAMEBUFFER_BINDING = 0x8CAA;
    public static final int GL_RENDERBUFFER_SAMPLES = 0x8CAB;
    public static final int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0;
    public static final int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1;
    public static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2;
    public static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;
    public static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4;
    public static final int GL_FRAMEBUFFER_COMPLETE = 0x8CD5;
    public static final int GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;
    public static final int GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
    public static final int GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x8CDB;
    public static final int GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x8CDC;
    public static final int GL_FRAMEBUFFER_UNSUPPORTED = 0x8CDD;
    public static final int GL_MAX_COLOR_ATTACHMENTS = 0x8CDF;
    public static final int GL_COLOR_ATTACHMENT0 = 0x8CE0;
    public static final int GL_COLOR_ATTACHMENT1 = 0x8CE1;
    public static final int GL_COLOR_ATTACHMENT2 = 0x8CE2;
    public static final int GL_COLOR_ATTACHMENT3 = 0x8CE3;
    public static final int GL_COLOR_ATTACHMENT4 = 0x8CE4;
    public static final int GL_COLOR_ATTACHMENT5 = 0x8CE5;
    public static final int GL_COLOR_ATTACHMENT6 = 0x8CE6;
    public static final int GL_COLOR_ATTACHMENT7 = 0x8CE7;
    public static final int GL_COLOR_ATTACHMENT8 = 0x8CE8;
    public static final int GL_COLOR_ATTACHMENT9 = 0x8CE9;
    public static final int GL_COLOR_ATTACHMENT10 = 0x8CEA;
    public static final int GL_COLOR_ATTACHMENT11 = 0x8CEB;
    public static final int GL_COLOR_ATTACHMENT12 = 0x8CEC;
    public static final int GL_COLOR_ATTACHMENT13 = 0x8CED;
    public static final int GL_COLOR_ATTACHMENT14 = 0x8CEE;
    public static final int GL_COLOR_ATTACHMENT15 = 0x8CEF;
    public static final int GL_DEPTH_ATTACHMENT = 0x8D00;
    public static final int GL_STENCIL_ATTACHMENT = 0x8D20;
    public static final int GL_FRAMEBUFFER = 0x8D40;
    public static final int GL_RENDERBUFFER = 0x8D41;
    public static final int GL_RENDERBUFFER_WIDTH = 0x8D42;
    public static final int GL_RENDERBUFFER_HEIGHT = 0x8D43;
    public static final int GL_RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;
    public static final int GL_STENCIL_INDEX1 = 0x8D46;
    public static final int GL_STENCIL_INDEX4 = 0x8D47;
    public static final int GL_STENCIL_INDEX8 = 0x8D48;
    public static final int GL_STENCIL_INDEX16 = 0x8D49;
    public static final int GL_RENDERBUFFER_RED_SIZE = 0x8D50;
    public static final int GL_RENDERBUFFER_GREEN_SIZE = 0x8D51;
    public static final int GL_RENDERBUFFER_BLUE_SIZE = 0x8D52;
    public static final int GL_RENDERBUFFER_ALPHA_SIZE = 0x8D53;
    public static final int GL_RENDERBUFFER_DEPTH_SIZE = 0x8D54;
    public static final int GL_RENDERBUFFER_STENCIL_SIZE = 0x8D55;
    public static final int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56;
    public static final int GL_MAX_SAMPLES = 0x8D57;
    public static final int GL_FRAMEBUFFER_SRGB = 0x8DB9;
    public static final int GL_HALF_FLOAT = 0x140B;
    public static final int GL_MAP_READ_BIT = 0x0001;
    public static final int GL_MAP_WRITE_BIT = 0x0002;
    public static final int GL_MAP_INVALIDATE_RANGE_BIT = 0x0004;
    public static final int GL_MAP_INVALIDATE_BUFFER_BIT = 0x0008;
    public static final int GL_MAP_FLUSH_EXPLICIT_BIT = 0x0010;
    public static final int GL_MAP_UNSYNCHRONIZED_BIT = 0x0020;
    public static final int GL_COMPRESSED_RED_RGTC1 = 0x8DBB;
    public static final int GL_COMPRESSED_SIGNED_RED_RGTC1 = 0x8DBC;
    public static final int GL_COMPRESSED_RG_RGTC2 = 0x8DBD;
    public static final int GL_COMPRESSED_SIGNED_RG_RGTC2 = 0x8DBE;
    public static final int GL_RG = 0x8227;
    public static final int GL_RG_INTEGER = 0x8228;
    public static final int GL_R8 = 0x8229;
    public static final int GL_R16 = 0x822A;
    public static final int GL_RG8 = 0x822B;
    public static final int GL_RG16 = 0x822C;
    public static final int GL_R16F = 0x822D;
    public static final int GL_R32F = 0x822E;
    public static final int GL_RG16F = 0x822F;
    public static final int GL_RG32F = 0x8230;
    public static final int GL_R8I = 0x8231;
    public static final int GL_R8UI = 0x8232;
    public static final int GL_R16I = 0x8233;
    public static final int GL_R16UI = 0x8234;
    public static final int GL_R32I = 0x8235;
    public static final int GL_R32UI = 0x8236;
    public static final int GL_RG8I = 0x8237;
    public static final int GL_RG8UI = 0x8238;
    public static final int GL_RG16I = 0x8239;
    public static final int GL_RG16UI = 0x823A;
    public static final int GL_RG32I = 0x823B;
    public static final int GL_RG32UI = 0x823C;
    public static final int GL_VERTEX_ARRAY_BINDING = 0x85B5;
    public static final int GL_VERSION_3_1 = 1;
    public static final int GL_SAMPLER_2D_RECT = 0x8B63;
    public static final int GL_SAMPLER_2D_RECT_SHADOW = 0x8B64;
    public static final int GL_SAMPLER_BUFFER = 0x8DC2;
    public static final int GL_INT_SAMPLER_2D_RECT = 0x8DCD;
    public static final int GL_INT_SAMPLER_BUFFER = 0x8DD0;
    public static final int GL_UNSIGNED_INT_SAMPLER_2D_RECT = 0x8DD5;
    public static final int GL_UNSIGNED_INT_SAMPLER_BUFFER = 0x8DD8;
    public static final int GL_TEXTURE_BUFFER = 0x8C2A;
    public static final int GL_MAX_TEXTURE_BUFFER_SIZE = 0x8C2B;
    public static final int GL_TEXTURE_BINDING_BUFFER = 0x8C2C;
    public static final int GL_TEXTURE_BUFFER_DATA_STORE_BINDING = 0x8C2D;
    public static final int GL_TEXTURE_RECTANGLE = 0x84F5;
    public static final int GL_TEXTURE_BINDING_RECTANGLE = 0x84F6;
    public static final int GL_PROXY_TEXTURE_RECTANGLE = 0x84F7;
    public static final int GL_MAX_RECTANGLE_TEXTURE_SIZE = 0x84F8;
    public static final int GL_R8_SNORM = 0x8F94;
    public static final int GL_RG8_SNORM = 0x8F95;
    public static final int GL_RGB8_SNORM = 0x8F96;
    public static final int GL_RGBA8_SNORM = 0x8F97;
    public static final int GL_R16_SNORM = 0x8F98;
    public static final int GL_RG16_SNORM = 0x8F99;
    public static final int GL_RGB16_SNORM = 0x8F9A;
    public static final int GL_RGBA16_SNORM = 0x8F9B;
    public static final int GL_SIGNED_NORMALIZED = 0x8F9C;
    public static final int GL_PRIMITIVE_RESTART = 0x8F9D;
    public static final int GL_PRIMITIVE_RESTART_INDEX = 0x8F9E;
    public static final int GL_COPY_READ_BUFFER = 0x8F36;
    public static final int GL_COPY_WRITE_BUFFER = 0x8F37;
    public static final int GL_UNIFORM_BUFFER = 0x8A11;
    public static final int GL_UNIFORM_BUFFER_BINDING = 0x8A28;
    public static final int GL_UNIFORM_BUFFER_START = 0x8A29;
    public static final int GL_UNIFORM_BUFFER_SIZE = 0x8A2A;
    public static final int GL_MAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B;
    public static final int GL_MAX_GEOMETRY_UNIFORM_BLOCKS = 0x8A2C;
    public static final int GL_MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D;
    public static final int GL_MAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E;
    public static final int GL_MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F;
    public static final int GL_MAX_UNIFORM_BLOCK_SIZE = 0x8A30;
    public static final int GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31;
    public static final int GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 0x8A32;
    public static final int GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33;
    public static final int GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34;
    public static final int GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8A35;
    public static final int GL_ACTIVE_UNIFORM_BLOCKS = 0x8A36;
    public static final int GL_UNIFORM_TYPE = 0x8A37;
    public static final int GL_UNIFORM_SIZE = 0x8A38;
    public static final int GL_UNIFORM_NAME_LENGTH = 0x8A39;
    public static final int GL_UNIFORM_BLOCK_INDEX = 0x8A3A;
    public static final int GL_UNIFORM_OFFSET = 0x8A3B;
    public static final int GL_UNIFORM_ARRAY_STRIDE = 0x8A3C;
    public static final int GL_UNIFORM_MATRIX_STRIDE = 0x8A3D;
    public static final int GL_UNIFORM_IS_ROW_MAJOR = 0x8A3E;
    public static final int GL_UNIFORM_BLOCK_BINDING = 0x8A3F;
    public static final int GL_UNIFORM_BLOCK_DATA_SIZE = 0x8A40;
    public static final int GL_UNIFORM_BLOCK_NAME_LENGTH = 0x8A41;
    public static final int GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8A42;
    public static final int GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43;
    public static final int GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44;
    public static final int GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 0x8A45;
    public static final int GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46;
    public static final int GL_INVALID_INDEX = 0xFFFFFFFF;
    public static final int GL_VERSION_3_2 = 1;
    public static final int GL_CONTEXT_CORE_PROFILE_BIT = 0x00000001;
    public static final int GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = 0x00000002;
    public static final int GL_LINES_ADJACENCY = 0x000A;
    public static final int GL_LINE_STRIP_ADJACENCY = 0x000B;
    public static final int GL_TRIANGLES_ADJACENCY = 0x000C;
    public static final int GL_TRIANGLE_STRIP_ADJACENCY = 0x000D;
    public static final int GL_PROGRAM_POINT_SIZE = 0x8642;
    public static final int GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x8C29;
    public static final int GL_FRAMEBUFFER_ATTACHMENT_LAYERED = 0x8DA7;
    public static final int GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x8DA8;
    public static final int GL_GEOMETRY_SHADER = 0x8DD9;
    public static final int GL_GEOMETRY_VERTICES_OUT = 0x8916;
    public static final int GL_GEOMETRY_INPUT_TYPE = 0x8917;
    public static final int GL_GEOMETRY_OUTPUT_TYPE = 0x8918;
    public static final int GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x8DDF;
    public static final int GL_MAX_GEOMETRY_OUTPUT_VERTICES = 0x8DE0;
    public static final int GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x8DE1;
    public static final int GL_MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122;
    public static final int GL_MAX_GEOMETRY_INPUT_COMPONENTS = 0x9123;
    public static final int GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = 0x9124;
    public static final int GL_MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125;
    public static final int GL_CONTEXT_PROFILE_MASK = 0x9126;
    public static final int GL_DEPTH_CLAMP = 0x864F;
    public static final int GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 0x8E4C;
    public static final int GL_FIRST_VERTEX_CONVENTION = 0x8E4D;
    public static final int GL_LAST_VERTEX_CONVENTION = 0x8E4E;
    public static final int GL_PROVOKING_VERTEX = 0x8E4F;
    public static final int GL_TEXTURE_CUBE_MAP_SEAMLESS = 0x884F;
    public static final int GL_MAX_SERVER_WAIT_TIMEOUT = 0x9111;
    public static final int GL_OBJECT_TYPE = 0x9112;
    public static final int GL_SYNC_CONDITION = 0x9113;
    public static final int GL_SYNC_STATUS = 0x9114;
    public static final int GL_SYNC_FLAGS = 0x9115;
    public static final int GL_SYNC_FENCE = 0x9116;
    public static final int GL_SYNC_GPU_COMMANDS_COMPLETE = 0x9117;
    public static final int GL_UNSIGNALED = 0x9118;
    public static final int GL_SIGNALED = 0x9119;
    public static final int GL_ALREADY_SIGNALED = 0x911A;
    public static final int GL_TIMEOUT_EXPIRED = 0x911B;
    public static final int GL_CONDITION_SATISFIED = 0x911C;
    public static final int GL_WAIT_FAILED = 0x911D;
    public static final long GL_TIMEOUT_IGNORED = -1;
    public static final int GL_SYNC_FLUSH_COMMANDS_BIT = 0x00000001;
    public static final int GL_SAMPLE_POSITION = 0x8E50;
    public static final int GL_SAMPLE_MASK = 0x8E51;
    public static final int GL_SAMPLE_MASK_VALUE = 0x8E52;
    public static final int GL_MAX_SAMPLE_MASK_WORDS = 0x8E59;
    public static final int GL_TEXTURE_2D_MULTISAMPLE = 0x9100;
    public static final int GL_PROXY_TEXTURE_2D_MULTISAMPLE = 0x9101;
    public static final int GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9102;
    public static final int GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9103;
    public static final int GL_TEXTURE_BINDING_2D_MULTISAMPLE = 0x9104;
    public static final int GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x9105;
    public static final int GL_TEXTURE_SAMPLES = 0x9106;
    public static final int GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = 0x9107;
    public static final int GL_SAMPLER_2D_MULTISAMPLE = 0x9108;
    public static final int GL_INT_SAMPLER_2D_MULTISAMPLE = 0x9109;
    public static final int GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x910A;
    public static final int GL_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910B;
    public static final int GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910C;
    public static final int GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910D;
    public static final int GL_MAX_COLOR_TEXTURE_SAMPLES = 0x910E;
    public static final int GL_MAX_DEPTH_TEXTURE_SAMPLES = 0x910F;
    public static final int GL_MAX_INTEGER_SAMPLES = 0x9110;
    public static final int GL_VERSION_3_3 = 1;
    public static final int GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE;
    public static final int GL_SRC1_COLOR = 0x88F9;
    public static final int GL_ONE_MINUS_SRC1_COLOR = 0x88FA;
    public static final int GL_ONE_MINUS_SRC1_ALPHA = 0x88FB;
    public static final int GL_MAX_DUAL_SOURCE_DRAW_BUFFERS = 0x88FC;
    public static final int GL_ANY_SAMPLES_PASSED = 0x8C2F;
    public static final int GL_SAMPLER_BINDING = 0x8919;
    public static final int GL_RGB10_A2UI = 0x906F;
    public static final int GL_TEXTURE_SWIZZLE_R = 0x8E42;
    public static final int GL_TEXTURE_SWIZZLE_G = 0x8E43;
    public static final int GL_TEXTURE_SWIZZLE_B = 0x8E44;
    public static final int GL_TEXTURE_SWIZZLE_A = 0x8E45;
    public static final int GL_TEXTURE_SWIZZLE_RGBA = 0x8E46;
    public static final int GL_TIME_ELAPSED = 0x88BF;
    public static final int GL_TIMESTAMP = 0x8E28;
    public static final int GL_INT_2_10_10_10_REV = 0x8D9F;
    public static final int GL_VERSION_4_0 = 1;
    public static final int GL_SAMPLE_SHADING = 0x8C36;
    public static final int GL_MIN_SAMPLE_SHADING_VALUE = 0x8C37;
    public static final int GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5E;
    public static final int GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5F;
    public static final int GL_TEXTURE_CUBE_MAP_ARRAY = 0x9009;
    public static final int GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = 0x900A;
    public static final int GL_PROXY_TEXTURE_CUBE_MAP_ARRAY = 0x900B;
    public static final int GL_SAMPLER_CUBE_MAP_ARRAY = 0x900C;
    public static final int GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW = 0x900D;
    public static final int GL_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900E;
    public static final int GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900F;
    public static final int GL_DRAW_INDIRECT_BUFFER = 0x8F3F;
    public static final int GL_DRAW_INDIRECT_BUFFER_BINDING = 0x8F43;
    public static final int GL_GEOMETRY_SHADER_INVOCATIONS = 0x887F;
    public static final int GL_MAX_GEOMETRY_SHADER_INVOCATIONS = 0x8E5A;
    public static final int GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5B;
    public static final int GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5C;
    public static final int GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = 0x8E5D;
    public static final int GL_MAX_VERTEX_STREAMS = 0x8E71;
    public static final int GL_DOUBLE_VEC2 = 0x8FFC;
    public static final int GL_DOUBLE_VEC3 = 0x8FFD;
    public static final int GL_DOUBLE_VEC4 = 0x8FFE;
    public static final int GL_DOUBLE_MAT2 = 0x8F46;
    public static final int GL_DOUBLE_MAT3 = 0x8F47;
    public static final int GL_DOUBLE_MAT4 = 0x8F48;
    public static final int GL_DOUBLE_MAT2x3 = 0x8F49;
    public static final int GL_DOUBLE_MAT2x4 = 0x8F4A;
    public static final int GL_DOUBLE_MAT3x2 = 0x8F4B;
    public static final int GL_DOUBLE_MAT3x4 = 0x8F4C;
    public static final int GL_DOUBLE_MAT4x2 = 0x8F4D;
    public static final int GL_DOUBLE_MAT4x3 = 0x8F4E;
    public static final int GL_ACTIVE_SUBROUTINES = 0x8DE5;
    public static final int GL_ACTIVE_SUBROUTINE_UNIFORMS = 0x8DE6;
    public static final int GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = 0x8E47;
    public static final int GL_ACTIVE_SUBROUTINE_MAX_LENGTH = 0x8E48;
    public static final int GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = 0x8E49;
    public static final int GL_MAX_SUBROUTINES = 0x8DE7;
    public static final int GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS = 0x8DE8;
    public static final int GL_NUM_COMPATIBLE_SUBROUTINES = 0x8E4A;
    public static final int GL_COMPATIBLE_SUBROUTINES = 0x8E4B;
    public static final int GL_PATCHES = 0x000E;
    public static final int GL_PATCH_VERTICES = 0x8E72;
    public static final int GL_PATCH_DEFAULT_INNER_LEVEL = 0x8E73;
    public static final int GL_PATCH_DEFAULT_OUTER_LEVEL = 0x8E74;
    public static final int GL_TESS_CONTROL_OUTPUT_VERTICES = 0x8E75;
    public static final int GL_TESS_GEN_MODE = 0x8E76;
    public static final int GL_TESS_GEN_SPACING = 0x8E77;
    public static final int GL_TESS_GEN_VERTEX_ORDER = 0x8E78;
    public static final int GL_TESS_GEN_POINT_MODE = 0x8E79;
    public static final int GL_ISOLINES = 0x8E7A;
    public static final int GL_FRACTIONAL_ODD = 0x8E7B;
    public static final int GL_FRACTIONAL_EVEN = 0x8E7C;
    public static final int GL_MAX_PATCH_VERTICES = 0x8E7D;
    public static final int GL_MAX_TESS_GEN_LEVEL = 0x8E7E;
    public static final int GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E7F;
    public static final int GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E80;
    public static final int GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 0x8E81;
    public static final int GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 0x8E82;
    public static final int GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 0x8E83;
    public static final int GL_MAX_TESS_PATCH_COMPONENTS = 0x8E84;
    public static final int GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 0x8E85;
    public static final int GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 0x8E86;
    public static final int GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = 0x8E89;
    public static final int GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 0x8E8A;
    public static final int GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = 0x886C;
    public static final int GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = 0x886D;
    public static final int GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E1E;
    public static final int GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E1F;
    public static final int GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = 0x84F0;
    public static final int GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x84F1;
    public static final int GL_TESS_EVALUATION_SHADER = 0x8E87;
    public static final int GL_TESS_CONTROL_SHADER = 0x8E88;
    public static final int GL_TRANSFORM_FEEDBACK = 0x8E22;
    public static final int GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED = 0x8E23;
    public static final int GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE = 0x8E24;
    public static final int GL_TRANSFORM_FEEDBACK_BINDING = 0x8E25;
    public static final int GL_MAX_TRANSFORM_FEEDBACK_BUFFERS = 0x8E70;
    public static final int GL_VERSION_4_1 = 1;
    public static final int GL_FIXED = 0x140C;
    public static final int GL_IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A;
    public static final int GL_IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B;
    public static final int GL_LOW_FLOAT = 0x8DF0;
    public static final int GL_MEDIUM_FLOAT = 0x8DF1;
    public static final int GL_HIGH_FLOAT = 0x8DF2;
    public static final int GL_LOW_INT = 0x8DF3;
    public static final int GL_MEDIUM_INT = 0x8DF4;
    public static final int GL_HIGH_INT = 0x8DF5;
    public static final int GL_SHADER_COMPILER = 0x8DFA;
    public static final int GL_SHADER_BINARY_FORMATS = 0x8DF8;
    public static final int GL_NUM_SHADER_BINARY_FORMATS = 0x8DF9;
    public static final int GL_MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB;
    public static final int GL_MAX_VARYING_VECTORS = 0x8DFC;
    public static final int GL_MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD;
    public static final int GL_RGB565 = 0x8D62;
    public static final int GL_PROGRAM_BINARY_RETRIEVABLE_HINT = 0x8257;
    public static final int GL_PROGRAM_BINARY_LENGTH = 0x8741;
    public static final int GL_NUM_PROGRAM_BINARY_FORMATS = 0x87FE;
    public static final int GL_PROGRAM_BINARY_FORMATS = 0x87FF;
    public static final int GL_VERTEX_SHADER_BIT = 0x00000001;
    public static final int GL_FRAGMENT_SHADER_BIT = 0x00000002;
    public static final int GL_GEOMETRY_SHADER_BIT = 0x00000004;
    public static final int GL_TESS_CONTROL_SHADER_BIT = 0x00000008;
    public static final int GL_TESS_EVALUATION_SHADER_BIT = 0x00000010;
    public static final int GL_ALL_SHADER_BITS = 0xFFFFFFFF;
    public static final int GL_PROGRAM_SEPARABLE = 0x8258;
    public static final int GL_ACTIVE_PROGRAM = 0x8259;
    public static final int GL_PROGRAM_PIPELINE_BINDING = 0x825A;
    public static final int GL_MAX_VIEWPORTS = 0x825B;
    public static final int GL_VIEWPORT_SUBPIXEL_BITS = 0x825C;
    public static final int GL_VIEWPORT_BOUNDS_RANGE = 0x825D;
    public static final int GL_LAYER_PROVOKING_VERTEX = 0x825E;
    public static final int GL_VIEWPORT_INDEX_PROVOKING_VERTEX = 0x825F;
    public static final int GL_UNDEFINED_VERTEX = 0x8260;
    public static final int GL_VERSION_4_2 = 1;
    public static final int GL_UNPACK_COMPRESSED_BLOCK_WIDTH = 0x9127;
    public static final int GL_UNPACK_COMPRESSED_BLOCK_HEIGHT = 0x9128;
    public static final int GL_UNPACK_COMPRESSED_BLOCK_DEPTH = 0x9129;
    public static final int GL_UNPACK_COMPRESSED_BLOCK_SIZE = 0x912A;
    public static final int GL_PACK_COMPRESSED_BLOCK_WIDTH = 0x912B;
    public static final int GL_PACK_COMPRESSED_BLOCK_HEIGHT = 0x912C;
    public static final int GL_PACK_COMPRESSED_BLOCK_DEPTH = 0x912D;
    public static final int GL_PACK_COMPRESSED_BLOCK_SIZE = 0x912E;
    public static final int GL_NUM_SAMPLE_COUNTS = 0x9380;
    public static final int GL_MIN_MAP_BUFFER_ALIGNMENT = 0x90BC;
    public static final int GL_ATOMIC_COUNTER_BUFFER = 0x92C0;
    public static final int GL_ATOMIC_COUNTER_BUFFER_BINDING = 0x92C1;
    public static final int GL_ATOMIC_COUNTER_BUFFER_START = 0x92C2;
    public static final int GL_ATOMIC_COUNTER_BUFFER_SIZE = 0x92C3;
    public static final int GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE = 0x92C4;
    public static final int GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = 0x92C5;
    public static final int GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = 0x92C6;
    public static final int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = 0x92C7;
    public static final int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = 0x92C8;
    public static final int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x92C9;
    public static final int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = 0x92CA;
    public static final int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = 0x92CB;
    public static final int GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 0x92CC;
    public static final int GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 0x92CD;
    public static final int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = 0x92CE;
    public static final int GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 0x92CF;
    public static final int GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 0x92D0;
    public static final int GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 0x92D1;
    public static final int GL_MAX_VERTEX_ATOMIC_COUNTERS = 0x92D2;
    public static final int GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = 0x92D3;
    public static final int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = 0x92D4;
    public static final int GL_MAX_GEOMETRY_ATOMIC_COUNTERS = 0x92D5;
    public static final int GL_MAX_FRAGMENT_ATOMIC_COUNTERS = 0x92D6;
    public static final int GL_MAX_COMBINED_ATOMIC_COUNTERS = 0x92D7;
    public static final int GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = 0x92D8;
    public static final int GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 0x92DC;
    public static final int GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = 0x92D9;
    public static final int GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = 0x92DA;
    public static final int GL_UNSIGNED_INT_ATOMIC_COUNTER = 0x92DB;
    public static final int GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT = 0x00000001;
    public static final int GL_ELEMENT_ARRAY_BARRIER_BIT = 0x00000002;
    public static final int GL_UNIFORM_BARRIER_BIT = 0x00000004;
    public static final int GL_TEXTURE_FETCH_BARRIER_BIT = 0x00000008;
    public static final int GL_SHADER_IMAGE_ACCESS_BARRIER_BIT = 0x00000020;
    public static final int GL_COMMAND_BARRIER_BIT = 0x00000040;
    public static final int GL_PIXEL_BUFFER_BARRIER_BIT = 0x00000080;
    public static final int GL_TEXTURE_UPDATE_BARRIER_BIT = 0x00000100;
    public static final int GL_BUFFER_UPDATE_BARRIER_BIT = 0x00000200;
    public static final int GL_FRAMEBUFFER_BARRIER_BIT = 0x00000400;
    public static final int GL_TRANSFORM_FEEDBACK_BARRIER_BIT = 0x00000800;
    public static final int GL_ATOMIC_COUNTER_BARRIER_BIT = 0x00001000;
    public static final int GL_ALL_BARRIER_BITS = 0xFFFFFFFF;
    public static final int GL_MAX_IMAGE_UNITS = 0x8F38;
    public static final int GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = 0x8F39;
    public static final int GL_IMAGE_BINDING_NAME = 0x8F3A;
    public static final int GL_IMAGE_BINDING_LEVEL = 0x8F3B;
    public static final int GL_IMAGE_BINDING_LAYERED = 0x8F3C;
    public static final int GL_IMAGE_BINDING_LAYER = 0x8F3D;
    public static final int GL_IMAGE_BINDING_ACCESS = 0x8F3E;
    public static final int GL_IMAGE_1D = 0x904C;
    public static final int GL_IMAGE_2D = 0x904D;
    public static final int GL_IMAGE_3D = 0x904E;
    public static final int GL_IMAGE_2D_RECT = 0x904F;
    public static final int GL_IMAGE_CUBE = 0x9050;
    public static final int GL_IMAGE_BUFFER = 0x9051;
    public static final int GL_IMAGE_1D_ARRAY = 0x9052;
    public static final int GL_IMAGE_2D_ARRAY = 0x9053;
    public static final int GL_IMAGE_CUBE_MAP_ARRAY = 0x9054;
    public static final int GL_IMAGE_2D_MULTISAMPLE = 0x9055;
    public static final int GL_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9056;
    public static final int GL_INT_IMAGE_1D = 0x9057;
    public static final int GL_INT_IMAGE_2D = 0x9058;
    public static final int GL_INT_IMAGE_3D = 0x9059;
    public static final int GL_INT_IMAGE_2D_RECT = 0x905A;
    public static final int GL_INT_IMAGE_CUBE = 0x905B;
    public static final int GL_INT_IMAGE_BUFFER = 0x905C;
    public static final int GL_INT_IMAGE_1D_ARRAY = 0x905D;
    public static final int GL_INT_IMAGE_2D_ARRAY = 0x905E;
    public static final int GL_INT_IMAGE_CUBE_MAP_ARRAY = 0x905F;
    public static final int GL_INT_IMAGE_2D_MULTISAMPLE = 0x9060;
    public static final int GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9061;
    public static final int GL_UNSIGNED_INT_IMAGE_1D = 0x9062;
    public static final int GL_UNSIGNED_INT_IMAGE_2D = 0x9063;
    public static final int GL_UNSIGNED_INT_IMAGE_3D = 0x9064;
    public static final int GL_UNSIGNED_INT_IMAGE_2D_RECT = 0x9065;
    public static final int GL_UNSIGNED_INT_IMAGE_CUBE = 0x9066;
    public static final int GL_UNSIGNED_INT_IMAGE_BUFFER = 0x9067;
    public static final int GL_UNSIGNED_INT_IMAGE_1D_ARRAY = 0x9068;
    public static final int GL_UNSIGNED_INT_IMAGE_2D_ARRAY = 0x9069;
    public static final int GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = 0x906A;
    public static final int GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = 0x906B;
    public static final int GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x906C;
    public static final int GL_MAX_IMAGE_SAMPLES = 0x906D;
    public static final int GL_IMAGE_BINDING_FORMAT = 0x906E;
    public static final int GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = 0x90C7;
    public static final int GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = 0x90C8;
    public static final int GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = 0x90C9;
    public static final int GL_MAX_VERTEX_IMAGE_UNIFORMS = 0x90CA;
    public static final int GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = 0x90CB;
    public static final int GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = 0x90CC;
    public static final int GL_MAX_GEOMETRY_IMAGE_UNIFORMS = 0x90CD;
    public static final int GL_MAX_FRAGMENT_IMAGE_UNIFORMS = 0x90CE;
    public static final int GL_MAX_COMBINED_IMAGE_UNIFORMS = 0x90CF;
    public static final int GL_COMPRESSED_RGBA_BPTC_UNORM = 0x8E8C;
    public static final int GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM = 0x8E8D;
    public static final int GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT = 0x8E8E;
    public static final int GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = 0x8E8F;
    public static final int GL_TEXTURE_IMMUTABLE_FORMAT = 0x912F;
    public static final int GL_VERSION_4_3 = 1;
    public static final int GL_NUM_SHADING_LANGUAGE_VERSIONS = 0x82E9;
    public static final int GL_VERTEX_ATTRIB_ARRAY_LONG = 0x874E;
    public static final int GL_COMPRESSED_RGB8_ETC2 = 0x9274;
    public static final int GL_COMPRESSED_SRGB8_ETC2 = 0x9275;
    public static final int GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276;
    public static final int GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277;
    public static final int GL_COMPRESSED_RGBA8_ETC2_EAC = 0x9278;
    public static final int GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279;
    public static final int GL_COMPRESSED_R11_EAC = 0x9270;
    public static final int GL_COMPRESSED_SIGNED_R11_EAC = 0x9271;
    public static final int GL_COMPRESSED_RG11_EAC = 0x9272;
    public static final int GL_COMPRESSED_SIGNED_RG11_EAC = 0x9273;
    public static final int GL_PRIMITIVE_RESTART_FIXED_INDEX = 0x8D69;
    public static final int GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A;
    public static final int GL_MAX_ELEMENT_INDEX = 0x8D6B;
    public static final int GL_COMPUTE_SHADER = 0x91B9;
    public static final int GL_MAX_COMPUTE_UNIFORM_BLOCKS = 0x91BB;
    public static final int GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 0x91BC;
    public static final int GL_MAX_COMPUTE_IMAGE_UNIFORMS = 0x91BD;
    public static final int GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = 0x8262;
    public static final int GL_MAX_COMPUTE_UNIFORM_COMPONENTS = 0x8263;
    public static final int GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 0x8264;
    public static final int GL_MAX_COMPUTE_ATOMIC_COUNTERS = 0x8265;
    public static final int GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 0x8266;
    public static final int GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS = 0x90EB;
    public static final int GL_MAX_COMPUTE_WORK_GROUP_COUNT = 0x91BE;
    public static final int GL_MAX_COMPUTE_WORK_GROUP_SIZE = 0x91BF;
    public static final int GL_COMPUTE_WORK_GROUP_SIZE = 0x8267;
    public static final int GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = 0x90EC;
    public static final int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = 0x90ED;
    public static final int GL_DISPATCH_INDIRECT_BUFFER = 0x90EE;
    public static final int GL_DISPATCH_INDIRECT_BUFFER_BINDING = 0x90EF;
    public static final int GL_COMPUTE_SHADER_BIT = 0x00000020;
    public static final int GL_DEBUG_OUTPUT_SYNCHRONOUS = 0x8242;
    public static final int GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 0x8243;
    public static final int GL_DEBUG_CALLBACK_FUNCTION = 0x8244;
    public static final int GL_DEBUG_CALLBACK_USER_PARAM = 0x8245;
    public static final int GL_DEBUG_SOURCE_API = 0x8246;
    public static final int GL_DEBUG_SOURCE_WINDOW_SYSTEM = 0x8247;
    public static final int GL_DEBUG_SOURCE_SHADER_COMPILER = 0x8248;
    public static final int GL_DEBUG_SOURCE_THIRD_PARTY = 0x8249;
    public static final int GL_DEBUG_SOURCE_APPLICATION = 0x824A;
    public static final int GL_DEBUG_SOURCE_OTHER = 0x824B;
    public static final int GL_DEBUG_TYPE_ERROR = 0x824C;
    public static final int GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = 0x824D;
    public static final int GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = 0x824E;
    public static final int GL_DEBUG_TYPE_PORTABILITY = 0x824F;
    public static final int GL_DEBUG_TYPE_PERFORMANCE = 0x8250;
    public static final int GL_DEBUG_TYPE_OTHER = 0x8251;
    public static final int GL_MAX_DEBUG_MESSAGE_LENGTH = 0x9143;
    public static final int GL_MAX_DEBUG_LOGGED_MESSAGES = 0x9144;
    public static final int GL_DEBUG_LOGGED_MESSAGES = 0x9145;
    public static final int GL_DEBUG_SEVERITY_HIGH = 0x9146;
    public static final int GL_DEBUG_SEVERITY_MEDIUM = 0x9147;
    public static final int GL_DEBUG_SEVERITY_LOW = 0x9148;
    public static final int GL_DEBUG_TYPE_MARKER = 0x8268;
    public static final int GL_DEBUG_TYPE_PUSH_GROUP = 0x8269;
    public static final int GL_DEBUG_TYPE_POP_GROUP = 0x826A;
    public static final int GL_DEBUG_SEVERITY_NOTIFICATION = 0x826B;
    public static final int GL_MAX_DEBUG_GROUP_STACK_DEPTH = 0x826C;
    public static final int GL_DEBUG_GROUP_STACK_DEPTH = 0x826D;
    public static final int GL_BUFFER = 0x82E0;
    public static final int GL_SHADER = 0x82E1;
    public static final int GL_PROGRAM = 0x82E2;
    public static final int GL_QUERY = 0x82E3;
    public static final int GL_PROGRAM_PIPELINE = 0x82E4;
    public static final int GL_SAMPLER = 0x82E6;
    public static final int GL_MAX_LABEL_LENGTH = 0x82E8;
    public static final int GL_DEBUG_OUTPUT = 0x92E0;
    public static final int GL_CONTEXT_FLAG_DEBUG_BIT = 0x00000002;
    public static final int GL_MAX_UNIFORM_LOCATIONS = 0x826E;
    public static final int GL_FRAMEBUFFER_DEFAULT_WIDTH = 0x9310;
    public static final int GL_FRAMEBUFFER_DEFAULT_HEIGHT = 0x9311;
    public static final int GL_FRAMEBUFFER_DEFAULT_LAYERS = 0x9312;
    public static final int GL_FRAMEBUFFER_DEFAULT_SAMPLES = 0x9313;
    public static final int GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 0x9314;
    public static final int GL_MAX_FRAMEBUFFER_WIDTH = 0x9315;
    public static final int GL_MAX_FRAMEBUFFER_HEIGHT = 0x9316;
    public static final int GL_MAX_FRAMEBUFFER_LAYERS = 0x9317;
    public static final int GL_MAX_FRAMEBUFFER_SAMPLES = 0x9318;
    public static final int GL_INTERNALFORMAT_SUPPORTED = 0x826F;
    public static final int GL_INTERNALFORMAT_PREFERRED = 0x8270;
    public static final int GL_INTERNALFORMAT_RED_SIZE = 0x8271;
    public static final int GL_INTERNALFORMAT_GREEN_SIZE = 0x8272;
    public static final int GL_INTERNALFORMAT_BLUE_SIZE = 0x8273;
    public static final int GL_INTERNALFORMAT_ALPHA_SIZE = 0x8274;
    public static final int GL_INTERNALFORMAT_DEPTH_SIZE = 0x8275;
    public static final int GL_INTERNALFORMAT_STENCIL_SIZE = 0x8276;
    public static final int GL_INTERNALFORMAT_SHARED_SIZE = 0x8277;
    public static final int GL_INTERNALFORMAT_RED_TYPE = 0x8278;
    public static final int GL_INTERNALFORMAT_GREEN_TYPE = 0x8279;
    public static final int GL_INTERNALFORMAT_BLUE_TYPE = 0x827A;
    public static final int GL_INTERNALFORMAT_ALPHA_TYPE = 0x827B;
    public static final int GL_INTERNALFORMAT_DEPTH_TYPE = 0x827C;
    public static final int GL_INTERNALFORMAT_STENCIL_TYPE = 0x827D;
    public static final int GL_MAX_WIDTH = 0x827E;
    public static final int GL_MAX_HEIGHT = 0x827F;
    public static final int GL_MAX_DEPTH = 0x8280;
    public static final int GL_MAX_LAYERS = 0x8281;
    public static final int GL_MAX_COMBINED_DIMENSIONS = 0x8282;
    public static final int GL_COLOR_COMPONENTS = 0x8283;
    public static final int GL_DEPTH_COMPONENTS = 0x8284;
    public static final int GL_STENCIL_COMPONENTS = 0x8285;
    public static final int GL_COLOR_RENDERABLE = 0x8286;
    public static final int GL_DEPTH_RENDERABLE = 0x8287;
    public static final int GL_STENCIL_RENDERABLE = 0x8288;
    public static final int GL_FRAMEBUFFER_RENDERABLE = 0x8289;
    public static final int GL_FRAMEBUFFER_RENDERABLE_LAYERED = 0x828A;
    public static final int GL_FRAMEBUFFER_BLEND = 0x828B;
    public static final int GL_READ_PIXELS = 0x828C;
    public static final int GL_READ_PIXELS_FORMAT = 0x828D;
    public static final int GL_READ_PIXELS_TYPE = 0x828E;
    public static final int GL_TEXTURE_IMAGE_FORMAT = 0x828F;
    public static final int GL_TEXTURE_IMAGE_TYPE = 0x8290;
    public static final int GL_GET_TEXTURE_IMAGE_FORMAT = 0x8291;
    public static final int GL_GET_TEXTURE_IMAGE_TYPE = 0x8292;
    public static final int GL_MIPMAP = 0x8293;
    public static final int GL_MANUAL_GENERATE_MIPMAP = 0x8294;
    public static final int GL_AUTO_GENERATE_MIPMAP = 0x8295;
    public static final int GL_COLOR_ENCODING = 0x8296;
    public static final int GL_SRGB_READ = 0x8297;
    public static final int GL_SRGB_WRITE = 0x8298;
    public static final int GL_FILTER = 0x829A;
    public static final int GL_VERTEX_TEXTURE = 0x829B;
    public static final int GL_TESS_CONTROL_TEXTURE = 0x829C;
    public static final int GL_TESS_EVALUATION_TEXTURE = 0x829D;
    public static final int GL_GEOMETRY_TEXTURE = 0x829E;
    public static final int GL_FRAGMENT_TEXTURE = 0x829F;
    public static final int GL_COMPUTE_TEXTURE = 0x82A0;
    public static final int GL_TEXTURE_SHADOW = 0x82A1;
    public static final int GL_TEXTURE_GATHER = 0x82A2;
    public static final int GL_TEXTURE_GATHER_SHADOW = 0x82A3;
    public static final int GL_SHADER_IMAGE_LOAD = 0x82A4;
    public static final int GL_SHADER_IMAGE_STORE = 0x82A5;
    public static final int GL_SHADER_IMAGE_ATOMIC = 0x82A6;
    public static final int GL_IMAGE_TEXEL_SIZE = 0x82A7;
    public static final int GL_IMAGE_COMPATIBILITY_CLASS = 0x82A8;
    public static final int GL_IMAGE_PIXEL_FORMAT = 0x82A9;
    public static final int GL_IMAGE_PIXEL_TYPE = 0x82AA;
    public static final int GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = 0x82AC;
    public static final int GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = 0x82AD;
    public static final int GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = 0x82AE;
    public static final int GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = 0x82AF;
    public static final int GL_TEXTURE_COMPRESSED_BLOCK_WIDTH = 0x82B1;
    public static final int GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT = 0x82B2;
    public static final int GL_TEXTURE_COMPRESSED_BLOCK_SIZE = 0x82B3;
    public static final int GL_CLEAR_BUFFER = 0x82B4;
    public static final int GL_TEXTURE_VIEW = 0x82B5;
    public static final int GL_VIEW_COMPATIBILITY_CLASS = 0x82B6;
    public static final int GL_FULL_SUPPORT = 0x82B7;
    public static final int GL_CAVEAT_SUPPORT = 0x82B8;
    public static final int GL_IMAGE_CLASS_4_X_32 = 0x82B9;
    public static final int GL_IMAGE_CLASS_2_X_32 = 0x82BA;
    public static final int GL_IMAGE_CLASS_1_X_32 = 0x82BB;
    public static final int GL_IMAGE_CLASS_4_X_16 = 0x82BC;
    public static final int GL_IMAGE_CLASS_2_X_16 = 0x82BD;
    public static final int GL_IMAGE_CLASS_1_X_16 = 0x82BE;
    public static final int GL_IMAGE_CLASS_4_X_8 = 0x82BF;
    public static final int GL_IMAGE_CLASS_2_X_8 = 0x82C0;
    public static final int GL_IMAGE_CLASS_1_X_8 = 0x82C1;
    public static final int GL_IMAGE_CLASS_11_11_10 = 0x82C2;
    public static final int GL_IMAGE_CLASS_10_10_10_2 = 0x82C3;
    public static final int GL_VIEW_CLASS_128_BITS = 0x82C4;
    public static final int GL_VIEW_CLASS_96_BITS = 0x82C5;
    public static final int GL_VIEW_CLASS_64_BITS = 0x82C6;
    public static final int GL_VIEW_CLASS_48_BITS = 0x82C7;
    public static final int GL_VIEW_CLASS_32_BITS = 0x82C8;
    public static final int GL_VIEW_CLASS_24_BITS = 0x82C9;
    public static final int GL_VIEW_CLASS_16_BITS = 0x82CA;
    public static final int GL_VIEW_CLASS_8_BITS = 0x82CB;
    public static final int GL_VIEW_CLASS_S3TC_DXT1_RGB = 0x82CC;
    public static final int GL_VIEW_CLASS_S3TC_DXT1_RGBA = 0x82CD;
    public static final int GL_VIEW_CLASS_S3TC_DXT3_RGBA = 0x82CE;
    public static final int GL_VIEW_CLASS_S3TC_DXT5_RGBA = 0x82CF;
    public static final int GL_VIEW_CLASS_RGTC1_RED = 0x82D0;
    public static final int GL_VIEW_CLASS_RGTC2_RG = 0x82D1;
    public static final int GL_VIEW_CLASS_BPTC_UNORM = 0x82D2;
    public static final int GL_VIEW_CLASS_BPTC_FLOAT = 0x82D3;
    public static final int GL_UNIFORM = 0x92E1;
    public static final int GL_UNIFORM_BLOCK = 0x92E2;
    public static final int GL_PROGRAM_INPUT = 0x92E3;
    public static final int GL_PROGRAM_OUTPUT = 0x92E4;
    public static final int GL_BUFFER_VARIABLE = 0x92E5;
    public static final int GL_SHADER_STORAGE_BLOCK = 0x92E6;
    public static final int GL_VERTEX_SUBROUTINE = 0x92E8;
    public static final int GL_TESS_CONTROL_SUBROUTINE = 0x92E9;
    public static final int GL_TESS_EVALUATION_SUBROUTINE = 0x92EA;
    public static final int GL_GEOMETRY_SUBROUTINE = 0x92EB;
    public static final int GL_FRAGMENT_SUBROUTINE = 0x92EC;
    public static final int GL_COMPUTE_SUBROUTINE = 0x92ED;
    public static final int GL_VERTEX_SUBROUTINE_UNIFORM = 0x92EE;
    public static final int GL_TESS_CONTROL_SUBROUTINE_UNIFORM = 0x92EF;
    public static final int GL_TESS_EVALUATION_SUBROUTINE_UNIFORM = 0x92F0;
    public static final int GL_GEOMETRY_SUBROUTINE_UNIFORM = 0x92F1;
    public static final int GL_FRAGMENT_SUBROUTINE_UNIFORM = 0x92F2;
    public static final int GL_COMPUTE_SUBROUTINE_UNIFORM = 0x92F3;
    public static final int GL_TRANSFORM_FEEDBACK_VARYING = 0x92F4;
    public static final int GL_ACTIVE_RESOURCES = 0x92F5;
    public static final int GL_MAX_NAME_LENGTH = 0x92F6;
    public static final int GL_MAX_NUM_ACTIVE_VARIABLES = 0x92F7;
    public static final int GL_MAX_NUM_COMPATIBLE_SUBROUTINES = 0x92F8;
    public static final int GL_NAME_LENGTH = 0x92F9;
    public static final int GL_TYPE = 0x92FA;
    public static final int GL_ARRAY_SIZE = 0x92FB;
    public static final int GL_OFFSET = 0x92FC;
    public static final int GL_BLOCK_INDEX = 0x92FD;
    public static final int GL_ARRAY_STRIDE = 0x92FE;
    public static final int GL_MATRIX_STRIDE = 0x92FF;
    public static final int GL_IS_ROW_MAJOR = 0x9300;
    public static final int GL_ATOMIC_COUNTER_BUFFER_INDEX = 0x9301;
    public static final int GL_BUFFER_BINDING = 0x9302;
    public static final int GL_BUFFER_DATA_SIZE = 0x9303;
    public static final int GL_NUM_ACTIVE_VARIABLES = 0x9304;
    public static final int GL_ACTIVE_VARIABLES = 0x9305;
    public static final int GL_REFERENCED_BY_VERTEX_SHADER = 0x9306;
    public static final int GL_REFERENCED_BY_TESS_CONTROL_SHADER = 0x9307;
    public static final int GL_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x9308;
    public static final int GL_REFERENCED_BY_GEOMETRY_SHADER = 0x9309;
    public static final int GL_REFERENCED_BY_FRAGMENT_SHADER = 0x930A;
    public static final int GL_REFERENCED_BY_COMPUTE_SHADER = 0x930B;
    public static final int GL_TOP_LEVEL_ARRAY_SIZE = 0x930C;
    public static final int GL_TOP_LEVEL_ARRAY_STRIDE = 0x930D;
    public static final int GL_LOCATION = 0x930E;
    public static final int GL_LOCATION_INDEX = 0x930F;
    public static final int GL_IS_PER_PATCH = 0x92E7;
    public static final int GL_SHADER_STORAGE_BUFFER = 0x90D2;
    public static final int GL_SHADER_STORAGE_BUFFER_BINDING = 0x90D3;
    public static final int GL_SHADER_STORAGE_BUFFER_START = 0x90D4;
    public static final int GL_SHADER_STORAGE_BUFFER_SIZE = 0x90D5;
    public static final int GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = 0x90D6;
    public static final int GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 0x90D7;
    public static final int GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 0x90D8;
    public static final int GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 0x90D9;
    public static final int GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 0x90DA;
    public static final int GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 0x90DB;
    public static final int GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = 0x90DC;
    public static final int GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = 0x90DD;
    public static final int GL_MAX_SHADER_STORAGE_BLOCK_SIZE = 0x90DE;
    public static final int GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 0x90DF;
    public static final int GL_SHADER_STORAGE_BARRIER_BIT = 0x00002000;
    public static final int GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = 0x8F39;
    public static final int GL_DEPTH_STENCIL_TEXTURE_MODE = 0x90EA;
    public static final int GL_TEXTURE_BUFFER_OFFSET = 0x919D;
    public static final int GL_TEXTURE_BUFFER_SIZE = 0x919E;
    public static final int GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT = 0x919F;
    public static final int GL_TEXTURE_VIEW_MIN_LEVEL = 0x82DB;
    public static final int GL_TEXTURE_VIEW_NUM_LEVELS = 0x82DC;
    public static final int GL_TEXTURE_VIEW_MIN_LAYER = 0x82DD;
    public static final int GL_TEXTURE_VIEW_NUM_LAYERS = 0x82DE;
    public static final int GL_TEXTURE_IMMUTABLE_LEVELS = 0x82DF;
    public static final int GL_VERTEX_ATTRIB_BINDING = 0x82D4;
    public static final int GL_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D5;
    public static final int GL_VERTEX_BINDING_DIVISOR = 0x82D6;
    public static final int GL_VERTEX_BINDING_OFFSET = 0x82D7;
    public static final int GL_VERTEX_BINDING_STRIDE = 0x82D8;
    public static final int GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D9;
    public static final int GL_MAX_VERTEX_ATTRIB_BINDINGS = 0x82DA;
    public static final int GL_VERTEX_BINDING_BUFFER = 0x8F4F;
    public static final int GL_VERSION_4_4 = 1;
    public static final int GL_MAX_VERTEX_ATTRIB_STRIDE = 0x82E5;
    public static final int GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = 0x8221;
    public static final int GL_TEXTURE_BUFFER_BINDING = 0x8C2A;
    public static final int GL_MAP_PERSISTENT_BIT = 0x0040;
    public static final int GL_MAP_COHERENT_BIT = 0x0080;
    public static final int GL_DYNAMIC_STORAGE_BIT = 0x0100;
    public static final int GL_CLIENT_STORAGE_BIT = 0x0200;
    public static final int GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT = 0x00004000;
    public static final int GL_BUFFER_IMMUTABLE_STORAGE = 0x821F;
    public static final int GL_BUFFER_STORAGE_FLAGS = 0x8220;
    public static final int GL_CLEAR_TEXTURE = 0x9365;
    public static final int GL_LOCATION_COMPONENT = 0x934A;
    public static final int GL_TRANSFORM_FEEDBACK_BUFFER_INDEX = 0x934B;
    public static final int GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE = 0x934C;
    public static final int GL_QUERY_BUFFER = 0x9192;
    public static final int GL_QUERY_BUFFER_BARRIER_BIT = 0x00008000;
    public static final int GL_QUERY_BUFFER_BINDING = 0x9193;
    public static final int GL_QUERY_RESULT_NO_WAIT = 0x9194;
    public static final int GL_MIRROR_CLAMP_TO_EDGE = 0x8743;
    public static final int GL_VERSION_4_5 = 1;
    public static final int GL_CONTEXT_LOST = 0x0507;
    public static final int GL_NEGATIVE_ONE_TO_ONE = 0x935E;
    public static final int GL_ZERO_TO_ONE = 0x935F;
    public static final int GL_CLIP_ORIGIN = 0x935C;
    public static final int GL_CLIP_DEPTH_MODE = 0x935D;
    public static final int GL_QUERY_WAIT_INVERTED = 0x8E17;
    public static final int GL_QUERY_NO_WAIT_INVERTED = 0x8E18;
    public static final int GL_QUERY_BY_REGION_WAIT_INVERTED = 0x8E19;
    public static final int GL_QUERY_BY_REGION_NO_WAIT_INVERTED = 0x8E1A;
    public static final int GL_MAX_CULL_DISTANCES = 0x82F9;
    public static final int GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES = 0x82FA;
    public static final int GL_TEXTURE_TARGET = 0x1006;
    public static final int GL_QUERY_TARGET = 0x82EA;
    public static final int GL_TEXTURE_BINDING = 0x82EB;
    public static final int GL_GUILTY_CONTEXT_RESET = 0x8253;
    public static final int GL_INNOCENT_CONTEXT_RESET = 0x8254;
    public static final int GL_UNKNOWN_CONTEXT_RESET = 0x8255;
    public static final int GL_RESET_NOTIFICATION_STRATEGY = 0x8256;
    public static final int GL_LOSE_CONTEXT_ON_RESET = 0x8252;
    public static final int GL_NO_RESET_NOTIFICATION = 0x8261;
    public static final int GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT = 0x00000004;
    public static final int GL_CONTEXT_RELEASE_BEHAVIOR = 0x82FB;
    public static final int GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 0x82FC;
    public static final int GL_ARB_ES2_compatibility = 1;
    public static final int GL_ARB_ES3_1_compatibility = 1;
    public static final int GL_ARB_ES3_compatibility = 1;
    public static final int GL_ARB_arrays_of_arrays = 1;
    public static final int GL_ARB_base_instance = 1;
    public static final int GL_ARB_bindless_texture = 1;
    public static final int GL_UNSIGNED_INT64_ARB = 0x140F;
    public static final int GL_ARB_blend_func_extended = 1;
    public static final int GL_ARB_buffer_storage = 1;
    public static final int GL_ARB_cl_event = 1;
    public static final int GL_SYNC_CL_EVENT_ARB = 0x8240;
    public static final int GL_SYNC_CL_EVENT_COMPLETE_ARB = 0x8241;
    public static final int GL_ARB_clear_buffer_object = 1;
    public static final int GL_ARB_clear_texture = 1;
    public static final int GL_ARB_clip_control = 1;
    public static final int GL_ARB_compressed_texture_pixel_storage = 1;
    public static final int GL_ARB_compute_shader = 1;
    public static final int GL_ARB_compute_variable_group_size = 1;
    public static final int GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB = 0x9344;
    public static final int GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB = 0x90EB;
    public static final int GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB = 0x9345;
    public static final int GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB = 0x91BF;
    public static final int GL_ARB_conditional_render_inverted = 1;
    public static final int GL_ARB_conservative_depth = 1;
    public static final int GL_ARB_copy_buffer = 1;
    public static final int GL_COPY_READ_BUFFER_BINDING = 0x8F36;
    public static final int GL_COPY_WRITE_BUFFER_BINDING = 0x8F37;
    public static final int GL_ARB_copy_image = 1;
    public static final int GL_ARB_cull_distance = 1;
    public static final int GL_ARB_debug_output = 1;
    public static final int GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB = 0x8242;
    public static final int GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB = 0x8243;
    public static final int GL_DEBUG_CALLBACK_FUNCTION_ARB = 0x8244;
    public static final int GL_DEBUG_CALLBACK_USER_PARAM_ARB = 0x8245;
    public static final int GL_DEBUG_SOURCE_API_ARB = 0x8246;
    public static final int GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB = 0x8247;
    public static final int GL_DEBUG_SOURCE_SHADER_COMPILER_ARB = 0x8248;
    public static final int GL_DEBUG_SOURCE_THIRD_PARTY_ARB = 0x8249;
    public static final int GL_DEBUG_SOURCE_APPLICATION_ARB = 0x824A;
    public static final int GL_DEBUG_SOURCE_OTHER_ARB = 0x824B;
    public static final int GL_DEBUG_TYPE_ERROR_ARB = 0x824C;
    public static final int GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB = 0x824D;
    public static final int GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB = 0x824E;
    public static final int GL_DEBUG_TYPE_PORTABILITY_ARB = 0x824F;
    public static final int GL_DEBUG_TYPE_PERFORMANCE_ARB = 0x8250;
    public static final int GL_DEBUG_TYPE_OTHER_ARB = 0x8251;
    public static final int GL_MAX_DEBUG_MESSAGE_LENGTH_ARB = 0x9143;
    public static final int GL_MAX_DEBUG_LOGGED_MESSAGES_ARB = 0x9144;
    public static final int GL_DEBUG_LOGGED_MESSAGES_ARB = 0x9145;
    public static final int GL_DEBUG_SEVERITY_HIGH_ARB = 0x9146;
    public static final int GL_DEBUG_SEVERITY_MEDIUM_ARB = 0x9147;
    public static final int GL_DEBUG_SEVERITY_LOW_ARB = 0x9148;
    public static final int GL_ARB_depth_buffer_float = 1;
    public static final int GL_ARB_depth_clamp = 1;
    public static final int GL_ARB_derivative_control = 1;
    public static final int GL_ARB_direct_state_access = 1;
    public static final int GL_ARB_draw_buffers_blend = 1;
    public static final int GL_ARB_draw_elements_base_vertex = 1;
    public static final int GL_ARB_draw_indirect = 1;
    public static final int GL_ARB_enhanced_layouts = 1;
    public static final int GL_ARB_explicit_attrib_location = 1;
    public static final int GL_ARB_explicit_uniform_location = 1;
    public static final int GL_ARB_fragment_coord_conventions = 1;
    public static final int GL_ARB_fragment_layer_viewport = 1;
    public static final int GL_ARB_framebuffer_no_attachments = 1;
    public static final int GL_ARB_framebuffer_object = 1;
    public static final int GL_ARB_framebuffer_sRGB = 1;
    public static final int GL_ARB_get_program_binary = 1;
    public static final int GL_ARB_get_texture_sub_image = 1;
    public static final int GL_ARB_gpu_shader5 = 1;
    public static final int GL_ARB_gpu_shader_fp64 = 1;
    public static final int GL_ARB_half_float_vertex = 1;
    public static final int GL_ARB_imaging = 1;
    public static final int GL_BLEND_COLOR = 0x8005;
    public static final int GL_BLEND_EQUATION = 0x8009;
    public static final int GL_ARB_indirect_parameters = 1;
    public static final int GL_PARAMETER_BUFFER_ARB = 0x80EE;
    public static final int GL_PARAMETER_BUFFER_BINDING_ARB = 0x80EF;
    public static final int GL_ARB_internalformat_query = 1;
    public static final int GL_ARB_internalformat_query2 = 1;
    public static final int GL_SRGB_DECODE_ARB = 0x8299;
    public static final int GL_ARB_invalidate_subdata = 1;
    public static final int GL_ARB_map_buffer_alignment = 1;
    public static final int GL_ARB_map_buffer_range = 1;
    public static final int GL_ARB_multi_bind = 1;
    public static final int GL_ARB_multi_draw_indirect = 1;
    public static final int GL_ARB_occlusion_query2 = 1;
    public static final int GL_ARB_pipeline_statistics_query = 1;
    public static final int GL_VERTICES_SUBMITTED_ARB = 0x82EE;
    public static final int GL_PRIMITIVES_SUBMITTED_ARB = 0x82EF;
    public static final int GL_VERTEX_SHADER_INVOCATIONS_ARB = 0x82F0;
    public static final int GL_TESS_CONTROL_SHADER_PATCHES_ARB = 0x82F1;
    public static final int GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB = 0x82F2;
    public static final int GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB = 0x82F3;
    public static final int GL_FRAGMENT_SHADER_INVOCATIONS_ARB = 0x82F4;
    public static final int GL_COMPUTE_SHADER_INVOCATIONS_ARB = 0x82F5;
    public static final int GL_CLIPPING_INPUT_PRIMITIVES_ARB = 0x82F6;
    public static final int GL_CLIPPING_OUTPUT_PRIMITIVES_ARB = 0x82F7;
    public static final int GL_ARB_program_interface_query = 1;
    public static final int GL_ARB_provoking_vertex = 1;
    public static final int GL_ARB_query_buffer_object = 1;
    public static final int GL_ARB_robust_buffer_access_behavior = 1;
    public static final int GL_ARB_robustness = 1;
    public static final int GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB = 0x00000004;
    public static final int GL_LOSE_CONTEXT_ON_RESET_ARB = 0x8252;
    public static final int GL_GUILTY_CONTEXT_RESET_ARB = 0x8253;
    public static final int GL_INNOCENT_CONTEXT_RESET_ARB = 0x8254;
    public static final int GL_UNKNOWN_CONTEXT_RESET_ARB = 0x8255;
    public static final int GL_RESET_NOTIFICATION_STRATEGY_ARB = 0x8256;
    public static final int GL_NO_RESET_NOTIFICATION_ARB = 0x8261;
    public static final int GL_ARB_robustness_isolation = 1;
    public static final int GL_ARB_sample_shading = 1;
    public static final int GL_SAMPLE_SHADING_ARB = 0x8C36;
    public static final int GL_MIN_SAMPLE_SHADING_VALUE_ARB = 0x8C37;
    public static final int GL_ARB_sampler_objects = 1;
    public static final int GL_ARB_seamless_cube_map = 1;
    public static final int GL_ARB_seamless_cubemap_per_texture = 1;
    public static final int GL_ARB_separate_shader_objects = 1;
    public static final int GL_ARB_shader_atomic_counters = 1;
    public static final int GL_ARB_shader_bit_encoding = 1;
    public static final int GL_ARB_shader_draw_parameters = 1;
    public static final int GL_ARB_shader_group_vote = 1;
    public static final int GL_ARB_shader_image_load_store = 1;
    public static final int GL_ARB_shader_image_size = 1;
    public static final int GL_ARB_shader_precision = 1;
    public static final int GL_ARB_shader_stencil_export = 1;
    public static final int GL_ARB_shader_storage_buffer_object = 1;
    public static final int GL_ARB_shader_subroutine = 1;
    public static final int GL_ARB_shader_texture_image_samples = 1;
    public static final int GL_ARB_shading_language_420pack = 1;
    public static final int GL_ARB_shading_language_include = 1;
    public static final int GL_SHADER_INCLUDE_ARB = 0x8DAE;
    public static final int GL_NAMED_STRING_LENGTH_ARB = 0x8DE9;
    public static final int GL_NAMED_STRING_TYPE_ARB = 0x8DEA;
    public static final int GL_ARB_shading_language_packing = 1;
    public static final int GL_ARB_sparse_buffer = 1;
    public static final int GL_SPARSE_STORAGE_BIT_ARB = 0x0400;
    public static final int GL_SPARSE_BUFFER_PAGE_SIZE_ARB = 0x82F8;
    public static final int GL_ARB_sparse_texture = 1;
    public static final int GL_TEXTURE_SPARSE_ARB = 0x91A6;
    public static final int GL_VIRTUAL_PAGE_SIZE_INDEX_ARB = 0x91A7;
    public static final int GL_MIN_SPARSE_LEVEL_ARB = 0x919B;
    public static final int GL_NUM_VIRTUAL_PAGE_SIZES_ARB = 0x91A8;
    public static final int GL_VIRTUAL_PAGE_SIZE_X_ARB = 0x9195;
    public static final int GL_VIRTUAL_PAGE_SIZE_Y_ARB = 0x9196;
    public static final int GL_VIRTUAL_PAGE_SIZE_Z_ARB = 0x9197;
    public static final int GL_MAX_SPARSE_TEXTURE_SIZE_ARB = 0x9198;
    public static final int GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB = 0x9199;
    public static final int GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB = 0x919A;
    public static final int GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB = 0x91A9;
    public static final int GL_ARB_stencil_texturing = 1;
    public static final int GL_ARB_sync = 1;
    public static final int GL_ARB_tessellation_shader = 1;
    public static final int GL_ARB_texture_barrier = 1;
    public static final int GL_ARB_texture_buffer_object_rgb32 = 1;
    public static final int GL_ARB_texture_buffer_range = 1;
    public static final int GL_ARB_texture_compression_bptc = 1;
    public static final int GL_COMPRESSED_RGBA_BPTC_UNORM_ARB = 0x8E8C;
    public static final int GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB = 0x8E8D;
    public static final int GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB = 0x8E8E;
    public static final int GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB = 0x8E8F;
    public static final int GL_ARB_texture_compression_rgtc = 1;
    public static final int GL_ARB_texture_cube_map_array = 1;
    public static final int GL_TEXTURE_CUBE_MAP_ARRAY_ARB = 0x9009;
    public static final int GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB = 0x900A;
    public static final int GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB = 0x900B;
    public static final int GL_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900C;
    public static final int GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB = 0x900D;
    public static final int GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900E;
    public static final int GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900F;
    public static final int GL_ARB_texture_gather = 1;
    public static final int GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 0x8E5E;
    public static final int GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 0x8E5F;
    public static final int GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB = 0x8F9F;
    public static final int GL_ARB_texture_mirror_clamp_to_edge = 1;
    public static final int GL_ARB_texture_multisample = 1;
    public static final int GL_ARB_texture_query_levels = 1;
    public static final int GL_ARB_texture_query_lod = 1;
    public static final int GL_ARB_texture_rg = 1;
    public static final int GL_ARB_texture_rgb10_a2ui = 1;
    public static final int GL_ARB_texture_stencil8 = 1;
    public static final int GL_ARB_texture_storage = 1;
    public static final int GL_ARB_texture_storage_multisample = 1;
    public static final int GL_ARB_texture_swizzle = 1;
    public static final int GL_ARB_texture_view = 1;
    public static final int GL_ARB_timer_query = 1;
    public static final int GL_ARB_transform_feedback2 = 1;
    public static final int GL_TRANSFORM_FEEDBACK_PAUSED = 0x8E23;
    public static final int GL_TRANSFORM_FEEDBACK_ACTIVE = 0x8E24;
    public static final int GL_ARB_transform_feedback3 = 1;
    public static final int GL_ARB_transform_feedback_instanced = 1;
    public static final int GL_ARB_transform_feedback_overflow_query = 1;
    public static final int GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB = 0x82EC;
    public static final int GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB = 0x82ED;
    public static final int GL_ARB_uniform_buffer_object = 1;
    public static final int GL_ARB_vertex_array_bgra = 1;
    public static final int GL_ARB_vertex_array_object = 1;
    public static final int GL_ARB_vertex_attrib_64bit = 1;
    public static final int GL_ARB_vertex_attrib_binding = 1;
    public static final int GL_ARB_vertex_type_10f_11f_11f_rev = 1;
    public static final int GL_ARB_vertex_type_2_10_10_10_rev = 1;
    public static final int GL_ARB_viewport_array = 1;
    public static final int GL_KHR_context_flush_control = 1;
    public static final int GL_KHR_debug = 1;
    public static final int GL_KHR_robust_buffer_access_behavior = 1;
    public static final int GL_KHR_robustness = 1;
    public static final int GL_CONTEXT_ROBUST_ACCESS = 0x90F3;
    public static final int GL_KHR_texture_compression_astc_hdr = 1;
    public static final int GL_COMPRESSED_RGBA_ASTC_4x4_KHR = 0x93B0;
    public static final int GL_COMPRESSED_RGBA_ASTC_5x4_KHR = 0x93B1;
    public static final int GL_COMPRESSED_RGBA_ASTC_5x5_KHR = 0x93B2;
    public static final int GL_COMPRESSED_RGBA_ASTC_6x5_KHR = 0x93B3;
    public static final int GL_COMPRESSED_RGBA_ASTC_6x6_KHR = 0x93B4;
    public static final int GL_COMPRESSED_RGBA_ASTC_8x5_KHR = 0x93B5;
    public static final int GL_COMPRESSED_RGBA_ASTC_8x6_KHR = 0x93B6;
    public static final int GL_COMPRESSED_RGBA_ASTC_8x8_KHR = 0x93B7;
    public static final int GL_COMPRESSED_RGBA_ASTC_10x5_KHR = 0x93B8;
    public static final int GL_COMPRESSED_RGBA_ASTC_10x6_KHR = 0x93B9;
    public static final int GL_COMPRESSED_RGBA_ASTC_10x8_KHR = 0x93BA;
    public static final int GL_COMPRESSED_RGBA_ASTC_10x10_KHR = 0x93BB;
    public static final int GL_COMPRESSED_RGBA_ASTC_12x10_KHR = 0x93BC;
    public static final int GL_COMPRESSED_RGBA_ASTC_12x12_KHR = 0x93BD;
    public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = 0x93D0;
    public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = 0x93D1;
    public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = 0x93D2;
    public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = 0x93D3;
    public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = 0x93D4;
    public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = 0x93D5;
    public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = 0x93D6;
    public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = 0x93D7;
    public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = 0x93D8;
    public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = 0x93D9;
    public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = 0x93DA;
    public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = 0x93DB;
    public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = 0x93DC;
    public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = 0x93DD;
    public static final int GL_KHR_texture_compression_astc_ldr = 1;
    //GLAPI void APIENTRY glCullFace (GLenum mode);
    public static native void glCullFace(int mode_);
    //GLAPI void APIENTRY glFrontFace (GLenum mode);
    public static native void glFrontFace(int mode_);
    //GLAPI void APIENTRY glHint (GLenum target, GLenum mode);
    public static native void glHint(int target_, int mode_);
    //GLAPI void APIENTRY glLineWidth (GLfloat width);
    public static native void glLineWidth(float width_);
    //GLAPI void APIENTRY glPointSize (GLfloat size);
    public static native void glPointSize(float size_);
    //GLAPI void APIENTRY glPolygonMode (GLenum face, GLenum mode);
    public static native void glPolygonMode(int face_, int mode_);
    //GLAPI void APIENTRY glScissor (GLint x, GLint y, GLsizei width, GLsizei height);
    public static native void glScissor(int x_, int y_, int width_, int height_);
    //GLAPI void APIENTRY glTexParameterf (GLenum target, GLenum pname, GLfloat param);
    public static native void glTexParameterf(int target_, int pname_, float param_);
    //GLAPI void APIENTRY glTexParameterfv (GLenum target, GLenum pname, const GLfloat *params);
    public static native void glTexParameterfv(int target_, int pname_, float[] params_);
    //GLAPI void APIENTRY glTexParameteri (GLenum target, GLenum pname, GLint param);
    public static native void glTexParameteri(int target_, int pname_, int param_);
    //GLAPI void APIENTRY glTexParameteriv (GLenum target, GLenum pname, const GLint *params);
    public static native void glTexParameteriv(int target_, int pname_, int[] params_);
    //GLAPI void APIENTRY glTexImage1D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);
    public static native void glTexImage1D(int target_, int level_, int internalformat_, int width_, int border_, int format_, int type_, byte[] pixels_);
    //GLAPI void APIENTRY glTexImage2D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
    public static native void glTexImage2D(int target_, int level_, int internalformat_, int width_, int height_, int border_, int format_, int type_, byte[] pixels_);
    //GLAPI void APIENTRY glDrawBuffer (GLenum buf);
    public static native void glDrawBuffer(int buf_);
    //GLAPI void APIENTRY glClear (GLbitfield mask);
    public static native void glClear(int mask_);
    //GLAPI void APIENTRY glClearColor (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
    public static native void glClearColor(float red_, float green_, float blue_, float alpha_);
    //GLAPI void APIENTRY glClearStencil (GLint s);
    public static native void glClearStencil(int s_);
    //GLAPI void APIENTRY glClearDepth (GLdouble depth);
    public static native void glClearDepth(double depth_);
    //GLAPI void APIENTRY glStencilMask (GLuint mask);
    public static native void glStencilMask(int mask_);
    //GLAPI void APIENTRY glColorMask (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
    public static native void glColorMask(boolean red_, boolean green_, boolean blue_, boolean alpha_);
    //GLAPI void APIENTRY glDepthMask (GLboolean flag);
    public static native void glDepthMask(boolean flag_);
    //GLAPI void APIENTRY glDisable (GLenum cap);
    public static native void glDisable(int cap_);
    //GLAPI void APIENTRY glEnable (GLenum cap);
    public static native void glEnable(int cap_);
    //GLAPI void APIENTRY glFinish (void);
    public static native void glFinish();
    //GLAPI void APIENTRY glFlush (void);
    public static native void glFlush();
    //GLAPI void APIENTRY glBlendFunc (GLenum sfactor, GLenum dfactor);
    public static native void glBlendFunc(int sfactor_, int dfactor_);
    //GLAPI void APIENTRY glLogicOp (GLenum opcode);
    public static native void glLogicOp(int opcode_);
    //GLAPI void APIENTRY glStencilFunc (GLenum func, GLint ref, GLuint mask);
    public static native void glStencilFunc(int func_, int ref_, int mask_);
    //GLAPI void APIENTRY glStencilOp (GLenum fail, GLenum zfail, GLenum zpass);
    public static native void glStencilOp(int fail_, int zfail_, int zpass_);
    //GLAPI void APIENTRY glDepthFunc (GLenum func);
    public static native void glDepthFunc(int func_);
    //GLAPI void APIENTRY glPixelStoref (GLenum pname, GLfloat param);
    public static native void glPixelStoref(int pname_, float param_);
    //GLAPI void APIENTRY glPixelStorei (GLenum pname, GLint param);
    public static native void glPixelStorei(int pname_, int param_);
    //GLAPI void APIENTRY glReadBuffer (GLenum src);
    public static native void glReadBuffer(int src_);
    //GLAPI void APIENTRY glReadPixels (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels);
    public static native void glReadPixels(int x_, int y_, int width_, int height_, int format_, int type_, byte[] pixels_);
    //GLAPI void APIENTRY glGetBooleanv (GLenum pname, GLboolean *data);
    public static native void glGetBooleanv(int pname_, byte[] data_);
    //GLAPI void APIENTRY glGetDoublev (GLenum pname, GLdouble *data);
    public static native void glGetDoublev(int pname_, double[] data_);
    //GLAPI GLenum APIENTRY glGetError (void);
    public static native int glGetError();
    //GLAPI void APIENTRY glGetFloatv (GLenum pname, GLfloat *data);
    public static native void glGetFloatv(int pname_, float[] data_);
    //GLAPI void APIENTRY glGetIntegerv (GLenum pname, GLint *data);
    public static native void glGetIntegerv(int pname_, int[] data_);
    //GLAPI void APIENTRY glGetTexImage (GLenum target, GLint level, GLenum format, GLenum type, void *pixels);
    public static native void glGetTexImage(int target_, int level_, int format_, int type_, byte[] pixels_);
    //GLAPI void APIENTRY glGetTexParameterfv (GLenum target, GLenum pname, GLfloat *params);
    public static native void glGetTexParameterfv(int target_, int pname_, float[] params_);
    //GLAPI void APIENTRY glGetTexParameteriv (GLenum target, GLenum pname, GLint *params);
    public static native void glGetTexParameteriv(int target_, int pname_, int[] params_);
    //GLAPI void APIENTRY glGetTexLevelParameterfv (GLenum target, GLint level, GLenum pname, GLfloat *params);
    public static native void glGetTexLevelParameterfv(int target_, int level_, int pname_, float[] params_);
    //GLAPI void APIENTRY glGetTexLevelParameteriv (GLenum target, GLint level, GLenum pname, GLint *params);
    public static native void glGetTexLevelParameteriv(int target_, int level_, int pname_, int[] params_);
    //GLAPI GLboolean APIENTRY glIsEnabled (GLenum cap);
    public static native boolean glIsEnabled(int cap_);
    //GLAPI void APIENTRY glDepthRange (GLdouble near, GLdouble far);
    public static native void glDepthRange(double near_, double far_);
    //GLAPI void APIENTRY glViewport (GLint x, GLint y, GLsizei width, GLsizei height);
    public static native void glViewport(int x_, int y_, int width_, int height_);
    //GLAPI void APIENTRY glDrawArrays (GLenum mode, GLint first, GLsizei count);
    public static native void glDrawArrays(int mode_, int first_, int count_);
    //GLAPI void APIENTRY glDrawElements (GLenum mode, GLsizei count, GLenum type, const void *indices);
    public static native void glDrawElements(int mode_, int count_, int type_, int indices_);
    //GLAPI void APIENTRY glPolygonOffset (GLfloat factor, GLfloat units);
    public static native void glPolygonOffset(float factor_, float units_);
    //GLAPI void APIENTRY glCopyTexImage1D (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
    public static native void glCopyTexImage1D(int target_, int level_, int internalformat_, int x_, int y_, int width_, int border_);
    //GLAPI void APIENTRY glCopyTexImage2D (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
    public static native void glCopyTexImage2D(int target_, int level_, int internalformat_, int x_, int y_, int width_, int height_, int border_);
    //GLAPI void APIENTRY glCopyTexSubImage1D (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
    public static native void glCopyTexSubImage1D(int target_, int level_, int xoffset_, int x_, int y_, int width_);
    //GLAPI void APIENTRY glCopyTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
    public static native void glCopyTexSubImage2D(int target_, int level_, int xoffset_, int yoffset_, int x_, int y_, int width_, int height_);
    //GLAPI void APIENTRY glTexSubImage1D (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
    public static native void glTexSubImage1D(int target_, int level_, int xoffset_, int width_, int format_, int type_, byte[] pixels_);
    //GLAPI void APIENTRY glTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
    public static native void glTexSubImage2D(int target_, int level_, int xoffset_, int yoffset_, int width_, int height_, int format_, int type_, byte[] pixels_);
    //GLAPI void APIENTRY glBindTexture (GLenum target, GLuint texture);
    public static native void glBindTexture(int target_, int texture_);
    //GLAPI void APIENTRY glDeleteTextures (GLsizei n, const GLuint *textures);
    public static native void glDeleteTextures(int n_, int[] textures_);
    //GLAPI void APIENTRY glGenTextures (GLsizei n, GLuint *textures);
    public static native void glGenTextures(int n_, int[] textures_);
    //GLAPI GLboolean APIENTRY glIsTexture (GLuint texture);
    public static native boolean glIsTexture(int texture_);
    //GLAPI void APIENTRY glDrawRangeElements (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices);
    public static native void glDrawRangeElements(int mode_, int start_, int end_, int count_, int type_, int indices_);
    //GLAPI void APIENTRY glTexImage3D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
    public static native void glTexImage3D(int target_, int level_, int internalformat_, int width_, int height_, int depth_, int border_, int format_, int type_, byte[] pixels_);
    //GLAPI void APIENTRY glTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
    public static native void glTexSubImage3D(int target_, int level_, int xoffset_, int yoffset_, int zoffset_, int width_, int height_, int depth_, int format_, int type_, byte[] pixels_);
    //GLAPI void APIENTRY glCopyTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
    public static native void glCopyTexSubImage3D(int target_, int level_, int xoffset_, int yoffset_, int zoffset_, int x_, int y_, int width_, int height_);
    //GLAPI void APIENTRY glActiveTexture (GLenum texture);
    public static native void glActiveTexture(int texture_);
    //GLAPI void APIENTRY glSampleCoverage (GLfloat value, GLboolean invert);
    public static native void glSampleCoverage(float value_, boolean invert_);
    //GLAPI void APIENTRY glCompressedTexImage3D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);
    public static native void glCompressedTexImage3D(int target_, int level_, int internalformat_, int width_, int height_, int depth_, int border_, int imageSize_, byte[] data_);
    //GLAPI void APIENTRY glCompressedTexImage2D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data);
    public static native void glCompressedTexImage2D(int target_, int level_, int internalformat_, int width_, int height_, int border_, int imageSize_, byte[] data_);
    //GLAPI void APIENTRY glCompressedTexImage1D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data);
    public static native void glCompressedTexImage1D(int target_, int level_, int internalformat_, int width_, int border_, int imageSize_, byte[] data_);
    //GLAPI void APIENTRY glCompressedTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
    public static native void glCompressedTexSubImage3D(int target_, int level_, int xoffset_, int yoffset_, int zoffset_, int width_, int height_, int depth_, int format_, int imageSize_, byte[] data_);
    //GLAPI void APIENTRY glCompressedTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
    public static native void glCompressedTexSubImage2D(int target_, int level_, int xoffset_, int yoffset_, int width_, int height_, int format_, int imageSize_, byte[] data_);
    //GLAPI void APIENTRY glCompressedTexSubImage1D (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
    public static native void glCompressedTexSubImage1D(int target_, int level_, int xoffset_, int width_, int format_, int imageSize_, byte[] data_);
    //GLAPI void APIENTRY glGetCompressedTexImage (GLenum target, GLint level, void *img);
    public static native void glGetCompressedTexImage(int target_, int level_, byte[] img_);
    //GLAPI void APIENTRY glBlendFuncSeparate (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
    public static native void glBlendFuncSeparate(int sfactorRGB_, int dfactorRGB_, int sfactorAlpha_, int dfactorAlpha_);
    //GLAPI void APIENTRY glMultiDrawArrays (GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount);
    public static native void glMultiDrawArrays(int mode_, int[] first_, int[] count_, int drawcount_);
    //GLAPI void APIENTRY glPointParameterf (GLenum pname, GLfloat param);
    public static native void glPointParameterf(int pname_, float param_);
    //GLAPI void APIENTRY glPointParameterfv (GLenum pname, const GLfloat *params);
    public static native void glPointParameterfv(int pname_, float[] params_);
    //GLAPI void APIENTRY glPointParameteri (GLenum pname, GLint param);
    public static native void glPointParameteri(int pname_, int param_);
    //GLAPI void APIENTRY glPointParameteriv (GLenum pname, const GLint *params);
    public static native void glPointParameteriv(int pname_, int[] params_);
    //GLAPI void APIENTRY glBlendColor (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
    public static native void glBlendColor(float red_, float green_, float blue_, float alpha_);
    //GLAPI void APIENTRY glBlendEquation (GLenum mode);
    public static native void glBlendEquation(int mode_);
    //GLAPI void APIENTRY glGenQueries (GLsizei n, GLuint *ids);
    public static native void glGenQueries(int n_, int[] ids_);
    //GLAPI void APIENTRY glDeleteQueries (GLsizei n, const GLuint *ids);
    public static native void glDeleteQueries(int n_, int[] ids_);
    //GLAPI GLboolean APIENTRY glIsQuery (GLuint id);
    public static native boolean glIsQuery(int id_);
    //GLAPI void APIENTRY glBeginQuery (GLenum target, GLuint id);
    public static native void glBeginQuery(int target_, int id_);
    //GLAPI void APIENTRY glEndQuery (GLenum target);
    public static native void glEndQuery(int target_);
    //GLAPI void APIENTRY glGetQueryiv (GLenum target, GLenum pname, GLint *params);
    public static native void glGetQueryiv(int target_, int pname_, int[] params_);
    //GLAPI void APIENTRY glGetQueryObjectiv (GLuint id, GLenum pname, GLint *params);
    public static native void glGetQueryObjectiv(int id_, int pname_, int[] params_);
    //GLAPI void APIENTRY glGetQueryObjectuiv (GLuint id, GLenum pname, GLuint *params);
    public static native void glGetQueryObjectuiv(int id_, int pname_, int[] params_);
    //GLAPI void APIENTRY glBindBuffer (GLenum target, GLuint buffer);
    public static native void glBindBuffer(int target_, int buffer_);
    //GLAPI void APIENTRY glDeleteBuffers (GLsizei n, const GLuint *buffers);
    public static native void glDeleteBuffers(int n_, int[] buffers_);
    //GLAPI void APIENTRY glGenBuffers (GLsizei n, GLuint *buffers);
    public static native void glGenBuffers(int n_, int[] buffers_);
    //GLAPI GLboolean APIENTRY glIsBuffer (GLuint buffer);
    public static native boolean glIsBuffer(int buffer_);
    //GLAPI void APIENTRY glBufferData (GLenum target, GLsizeiptr size, const void *data, GLenum usage);
    public static native void glBufferData(int target_, int size_, byte[] data_, int usage_);
    //GLAPI void APIENTRY glBufferSubData (GLenum target, GLintptr offset, GLsizeiptr size, const void *data);
    public static native void glBufferSubData(int target_, int offset_, int size_, byte[] data_);
    //GLAPI void APIENTRY glGetBufferSubData (GLenum target, GLintptr offset, GLsizeiptr size, void *data);
    public static native void glGetBufferSubData(int target_, int offset_, int size_, byte[] data_);
    //GLAPI GLboolean APIENTRY glUnmapBuffer (GLenum target);
    public static native boolean glUnmapBuffer(int target_);
    //GLAPI void APIENTRY glGetBufferParameteriv (GLenum target, GLenum pname, GLint *params);
    public static native void glGetBufferParameteriv(int target_, int pname_, int[] params_);
    //GLAPI void APIENTRY glBlendEquationSeparate (GLenum modeRGB, GLenum modeAlpha);
    public static native void glBlendEquationSeparate(int modeRGB_, int modeAlpha_);
    //GLAPI void APIENTRY glDrawBuffers (GLsizei n, const GLenum *bufs);
    public static native void glDrawBuffers(int n_, int[] bufs_);
    //GLAPI void APIENTRY glStencilOpSeparate (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
    public static native void glStencilOpSeparate(int face_, int sfail_, int dpfail_, int dppass_);
    //GLAPI void APIENTRY glStencilFuncSeparate (GLenum face, GLenum func, GLint ref, GLuint mask);
    public static native void glStencilFuncSeparate(int face_, int func_, int ref_, int mask_);
    //GLAPI void APIENTRY glStencilMaskSeparate (GLenum face, GLuint mask);
    public static native void glStencilMaskSeparate(int face_, int mask_);
    //GLAPI void APIENTRY glAttachShader (GLuint program, GLuint shader);
    public static native void glAttachShader(int program_, int shader_);
    //GLAPI void APIENTRY glBindAttribLocation (GLuint program, GLuint index, const GLchar *name);
    public static native void glBindAttribLocation(int program_, int index_, byte[] name_);
    public static void glBindAttribLocation(int program_,int index_,String name_){
        glBindAttribLocation(program_,index_,(name_+"\0").getBytes());
    }
    //GLAPI void APIENTRY glCompileShader (GLuint shader);
    public static native void glCompileShader(int shader_);
    //GLAPI GLuint APIENTRY glCreateProgram (void);
    public static native int glCreateProgram();
    //GLAPI GLuint APIENTRY glCreateShader (GLenum type);
    public static native int glCreateShader(int type_);
    //GLAPI void APIENTRY glDeleteProgram (GLuint program);
    public static native void glDeleteProgram(int program_);
    //GLAPI void APIENTRY glDeleteShader (GLuint shader);
    public static native void glDeleteShader(int shader_);
    //GLAPI void APIENTRY glDetachShader (GLuint program, GLuint shader);
    public static native void glDetachShader(int program_, int shader_);
    //GLAPI void APIENTRY glDisableVertexAttribArray (GLuint index);
    public static native void glDisableVertexAttribArray(int index_);
    //GLAPI void APIENTRY glEnableVertexAttribArray (GLuint index);
    public static native void glEnableVertexAttribArray(int index_);
    //GLAPI void APIENTRY glGetActiveAttrib (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
    public static native void glGetActiveAttrib(int program_, int index_, int bufSize_, int[] length_, int[] size_, int[] type_, byte[] name_);
    //GLAPI void APIENTRY glGetActiveUniform (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
    public static native void glGetActiveUniform(int program_, int index_, int bufSize_, int[] length_, int[] size_, int[] type_, byte[] name_);
    //GLAPI void APIENTRY glGetAttachedShaders (GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders);
    public static native void glGetAttachedShaders(int program_, int maxCount_, int[] count_, int[] shaders_);
    //GLAPI GLint APIENTRY glGetAttribLocation (GLuint program, const GLchar *name);
    public static native int glGetAttribLocation(int program_, byte[] name_);
    public static int glGetAttribLocation(int program_,String name_){
        int rv;
        rv = glGetAttribLocation(program_,(name_+"\0").getBytes());
        return rv;
    }
    //GLAPI void APIENTRY glGetProgramiv (GLuint program, GLenum pname, GLint *params);
    public static native void glGetProgramiv(int program_, int pname_, int[] params_);
    //GLAPI void APIENTRY glGetProgramInfoLog (GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
    public static native void glGetProgramInfoLog(int program_, int bufSize_, int[] length_, byte[] infoLog_);
    //GLAPI void APIENTRY glGetShaderiv (GLuint shader, GLenum pname, GLint *params);
    public static native void glGetShaderiv(int shader_, int pname_, int[] params_);
    //GLAPI void APIENTRY glGetShaderInfoLog (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
    public static native void glGetShaderInfoLog(int shader_, int bufSize_, int[] length_, byte[] infoLog_);
    //GLAPI void APIENTRY glGetShaderSource (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
    public static native void glGetShaderSource(int shader_, int bufSize_, int[] length_, byte[] source_);
    //GLAPI GLint APIENTRY glGetUniformLocation (GLuint program, const GLchar *name);
    public static native int glGetUniformLocation(int program_, byte[] name_);
    public static int glGetUniformLocation(int program_,String name_){
        int rv;
        rv = glGetUniformLocation(program_,(name_+"\0").getBytes());
        return rv;
    }
    //GLAPI void APIENTRY glGetUniformfv (GLuint program, GLint location, GLfloat *params);
    public static native void glGetUniformfv(int program_, int location_, float[] params_);
    //GLAPI void APIENTRY glGetUniformiv (GLuint program, GLint location, GLint *params);
    public static native void glGetUniformiv(int program_, int location_, int[] params_);
    //GLAPI void APIENTRY glGetVertexAttribdv (GLuint index, GLenum pname, GLdouble *params);
    public static native void glGetVertexAttribdv(int index_, int pname_, double[] params_);
    //GLAPI void APIENTRY glGetVertexAttribfv (GLuint index, GLenum pname, GLfloat *params);
    public static native void glGetVertexAttribfv(int index_, int pname_, float[] params_);
    //GLAPI void APIENTRY glGetVertexAttribiv (GLuint index, GLenum pname, GLint *params);
    public static native void glGetVertexAttribiv(int index_, int pname_, int[] params_);
    //GLAPI GLboolean APIENTRY glIsProgram (GLuint program);
    public static native boolean glIsProgram(int program_);
    //GLAPI GLboolean APIENTRY glIsShader (GLuint shader);
    public static native boolean glIsShader(int shader_);
    //GLAPI void APIENTRY glLinkProgram (GLuint program);
    public static native void glLinkProgram(int program_);
    //GLAPI void APIENTRY glUseProgram (GLuint program);
    public static native void glUseProgram(int program_);
    //GLAPI void APIENTRY glUniform1f (GLint location, GLfloat v0);
    public static native void glUniform1f(int location_, float v0_);
    //GLAPI void APIENTRY glUniform2f (GLint location, GLfloat v0, GLfloat v1);
    public static native void glUniform2f(int location_, float v0_, float v1_);
    //GLAPI void APIENTRY glUniform3f (GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
    public static native void glUniform3f(int location_, float v0_, float v1_, float v2_);
    //GLAPI void APIENTRY glUniform4f (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
    public static native void glUniform4f(int location_, float v0_, float v1_, float v2_, float v3_);
    //GLAPI void APIENTRY glUniform1i (GLint location, GLint v0);
    public static native void glUniform1i(int location_, int v0_);
    //GLAPI void APIENTRY glUniform2i (GLint location, GLint v0, GLint v1);
    public static native void glUniform2i(int location_, int v0_, int v1_);
    //GLAPI void APIENTRY glUniform3i (GLint location, GLint v0, GLint v1, GLint v2);
    public static native void glUniform3i(int location_, int v0_, int v1_, int v2_);
    //GLAPI void APIENTRY glUniform4i (GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
    public static native void glUniform4i(int location_, int v0_, int v1_, int v2_, int v3_);
    //GLAPI void APIENTRY glUniform1fv (GLint location, GLsizei count, const GLfloat *value);
    public static native void glUniform1fv(int location_, int count_, float[] value_);
    //GLAPI void APIENTRY glUniform2fv (GLint location, GLsizei count, const GLfloat *value);
    public static native void glUniform2fv(int location_, int count_, float[] value_);
    //GLAPI void APIENTRY glUniform3fv (GLint location, GLsizei count, const GLfloat *value);
    public static native void glUniform3fv(int location_, int count_, float[] value_);
    //GLAPI void APIENTRY glUniform4fv (GLint location, GLsizei count, const GLfloat *value);
    public static native void glUniform4fv(int location_, int count_, float[] value_);
    //GLAPI void APIENTRY glUniform1iv (GLint location, GLsizei count, const GLint *value);
    public static native void glUniform1iv(int location_, int count_, int[] value_);
    //GLAPI void APIENTRY glUniform2iv (GLint location, GLsizei count, const GLint *value);
    public static native void glUniform2iv(int location_, int count_, int[] value_);
    //GLAPI void APIENTRY glUniform3iv (GLint location, GLsizei count, const GLint *value);
    public static native void glUniform3iv(int location_, int count_, int[] value_);
    //GLAPI void APIENTRY glUniform4iv (GLint location, GLsizei count, const GLint *value);
    public static native void glUniform4iv(int location_, int count_, int[] value_);
    //GLAPI void APIENTRY glUniformMatrix2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    public static native void glUniformMatrix2fv(int location_, int count_, boolean transpose_, float[] value_);
    //GLAPI void APIENTRY glUniformMatrix3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    public static native void glUniformMatrix3fv(int location_, int count_, boolean transpose_, float[] value_);
    //GLAPI void APIENTRY glUniformMatrix4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    public static native void glUniformMatrix4fv(int location_, int count_, boolean transpose_, float[] value_);
    //GLAPI void APIENTRY glValidateProgram (GLuint program);
    public static native void glValidateProgram(int program_);
    //GLAPI void APIENTRY glVertexAttrib1d (GLuint index, GLdouble x);
    public static native void glVertexAttrib1d(int index_, double x_);
    //GLAPI void APIENTRY glVertexAttrib1dv (GLuint index, const GLdouble *v);
    public static native void glVertexAttrib1dv(int index_, double[] v_);
    //GLAPI void APIENTRY glVertexAttrib1f (GLuint index, GLfloat x);
    public static native void glVertexAttrib1f(int index_, float x_);
    //GLAPI void APIENTRY glVertexAttrib1fv (GLuint index, const GLfloat *v);
    public static native void glVertexAttrib1fv(int index_, float[] v_);
    //GLAPI void APIENTRY glVertexAttrib1s (GLuint index, GLshort x);
    public static native void glVertexAttrib1s(int index_, short x_);
    //GLAPI void APIENTRY glVertexAttrib1sv (GLuint index, const GLshort *v);
    public static native void glVertexAttrib1sv(int index_, short[] v_);
    //GLAPI void APIENTRY glVertexAttrib2d (GLuint index, GLdouble x, GLdouble y);
    public static native void glVertexAttrib2d(int index_, double x_, double y_);
    //GLAPI void APIENTRY glVertexAttrib2dv (GLuint index, const GLdouble *v);
    public static native void glVertexAttrib2dv(int index_, double[] v_);
    //GLAPI void APIENTRY glVertexAttrib2f (GLuint index, GLfloat x, GLfloat y);
    public static native void glVertexAttrib2f(int index_, float x_, float y_);
    //GLAPI void APIENTRY glVertexAttrib2fv (GLuint index, const GLfloat *v);
    public static native void glVertexAttrib2fv(int index_, float[] v_);
    //GLAPI void APIENTRY glVertexAttrib2s (GLuint index, GLshort x, GLshort y);
    public static native void glVertexAttrib2s(int index_, short x_, short y_);
    //GLAPI void APIENTRY glVertexAttrib2sv (GLuint index, const GLshort *v);
    public static native void glVertexAttrib2sv(int index_, short[] v_);
    //GLAPI void APIENTRY glVertexAttrib3d (GLuint index, GLdouble x, GLdouble y, GLdouble z);
    public static native void glVertexAttrib3d(int index_, double x_, double y_, double z_);
    //GLAPI void APIENTRY glVertexAttrib3dv (GLuint index, const GLdouble *v);
    public static native void glVertexAttrib3dv(int index_, double[] v_);
    //GLAPI void APIENTRY glVertexAttrib3f (GLuint index, GLfloat x, GLfloat y, GLfloat z);
    public static native void glVertexAttrib3f(int index_, float x_, float y_, float z_);
    //GLAPI void APIENTRY glVertexAttrib3fv (GLuint index, const GLfloat *v);
    public static native void glVertexAttrib3fv(int index_, float[] v_);
    //GLAPI void APIENTRY glVertexAttrib3s (GLuint index, GLshort x, GLshort y, GLshort z);
    public static native void glVertexAttrib3s(int index_, short x_, short y_, short z_);
    //GLAPI void APIENTRY glVertexAttrib3sv (GLuint index, const GLshort *v);
    public static native void glVertexAttrib3sv(int index_, short[] v_);
    //GLAPI void APIENTRY glVertexAttrib4Nbv (GLuint index, const GLbyte *v);
    public static native void glVertexAttrib4Nbv(int index_, byte[] v_);
    //GLAPI void APIENTRY glVertexAttrib4Niv (GLuint index, const GLint *v);
    public static native void glVertexAttrib4Niv(int index_, int[] v_);
    //GLAPI void APIENTRY glVertexAttrib4Nsv (GLuint index, const GLshort *v);
    public static native void glVertexAttrib4Nsv(int index_, short[] v_);
    //GLAPI void APIENTRY glVertexAttrib4Nub (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
    public static native void glVertexAttrib4Nub(int index_, byte x_, byte y_, byte z_, byte w_);
    //GLAPI void APIENTRY glVertexAttrib4Nubv (GLuint index, const GLubyte *v);
    public static native void glVertexAttrib4Nubv(int index_, byte[] v_);
    //GLAPI void APIENTRY glVertexAttrib4Nuiv (GLuint index, const GLuint *v);
    public static native void glVertexAttrib4Nuiv(int index_, int[] v_);
    //GLAPI void APIENTRY glVertexAttrib4Nusv (GLuint index, const GLushort *v);
    public static native void glVertexAttrib4Nusv(int index_, short[] v_);
    //GLAPI void APIENTRY glVertexAttrib4bv (GLuint index, const GLbyte *v);
    public static native void glVertexAttrib4bv(int index_, byte[] v_);
    //GLAPI void APIENTRY glVertexAttrib4d (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
    public static native void glVertexAttrib4d(int index_, double x_, double y_, double z_, double w_);
    //GLAPI void APIENTRY glVertexAttrib4dv (GLuint index, const GLdouble *v);
    public static native void glVertexAttrib4dv(int index_, double[] v_);
    //GLAPI void APIENTRY glVertexAttrib4f (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
    public static native void glVertexAttrib4f(int index_, float x_, float y_, float z_, float w_);
    //GLAPI void APIENTRY glVertexAttrib4fv (GLuint index, const GLfloat *v);
    public static native void glVertexAttrib4fv(int index_, float[] v_);
    //GLAPI void APIENTRY glVertexAttrib4iv (GLuint index, const GLint *v);
    public static native void glVertexAttrib4iv(int index_, int[] v_);
    //GLAPI void APIENTRY glVertexAttrib4s (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
    public static native void glVertexAttrib4s(int index_, short x_, short y_, short z_, short w_);
    //GLAPI void APIENTRY glVertexAttrib4sv (GLuint index, const GLshort *v);
    public static native void glVertexAttrib4sv(int index_, short[] v_);
    //GLAPI void APIENTRY glVertexAttrib4ubv (GLuint index, const GLubyte *v);
    public static native void glVertexAttrib4ubv(int index_, byte[] v_);
    //GLAPI void APIENTRY glVertexAttrib4uiv (GLuint index, const GLuint *v);
    public static native void glVertexAttrib4uiv(int index_, int[] v_);
    //GLAPI void APIENTRY glVertexAttrib4usv (GLuint index, const GLushort *v);
    public static native void glVertexAttrib4usv(int index_, short[] v_);
    //GLAPI void APIENTRY glVertexAttribPointer (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer);
    public static native void glVertexAttribPointer(int index_, int size_, int type_, boolean normalized_, int stride_, int pointer_);
    //GLAPI void APIENTRY glUniformMatrix2x3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    public static native void glUniformMatrix2x3fv(int location_, int count_, boolean transpose_, float[] value_);
    //GLAPI void APIENTRY glUniformMatrix3x2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    public static native void glUniformMatrix3x2fv(int location_, int count_, boolean transpose_, float[] value_);
    //GLAPI void APIENTRY glUniformMatrix2x4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    public static native void glUniformMatrix2x4fv(int location_, int count_, boolean transpose_, float[] value_);
    //GLAPI void APIENTRY glUniformMatrix4x2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    public static native void glUniformMatrix4x2fv(int location_, int count_, boolean transpose_, float[] value_);
    //GLAPI void APIENTRY glUniformMatrix3x4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    public static native void glUniformMatrix3x4fv(int location_, int count_, boolean transpose_, float[] value_);
    //GLAPI void APIENTRY glUniformMatrix4x3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    public static native void glUniformMatrix4x3fv(int location_, int count_, boolean transpose_, float[] value_);
    //GLAPI void APIENTRY glColorMaski (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
    public static native void glColorMaski(int index_, boolean r_, boolean g_, boolean b_, boolean a_);
    //GLAPI void APIENTRY glGetBooleani_v (GLenum target, GLuint index, GLboolean *data);
    public static native void glGetBooleani_v(int target_, int index_, byte[] data_);
    //GLAPI void APIENTRY glGetIntegeri_v (GLenum target, GLuint index, GLint *data);
    public static native void glGetIntegeri_v(int target_, int index_, int[] data_);
    //GLAPI void APIENTRY glEnablei (GLenum target, GLuint index);
    public static native void glEnablei(int target_, int index_);
    //GLAPI void APIENTRY glDisablei (GLenum target, GLuint index);
    public static native void glDisablei(int target_, int index_);
    //GLAPI GLboolean APIENTRY glIsEnabledi (GLenum target, GLuint index);
    public static native boolean glIsEnabledi(int target_, int index_);
    //GLAPI void APIENTRY glBeginTransformFeedback (GLenum primitiveMode);
    public static native void glBeginTransformFeedback(int primitiveMode_);
    //GLAPI void APIENTRY glEndTransformFeedback (void);
    public static native void glEndTransformFeedback();
    //GLAPI void APIENTRY glBindBufferRange (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
    public static native void glBindBufferRange(int target_, int index_, int buffer_, int offset_, int size_);
    //GLAPI void APIENTRY glBindBufferBase (GLenum target, GLuint index, GLuint buffer);
    public static native void glBindBufferBase(int target_, int index_, int buffer_);
    //GLAPI void APIENTRY glGetTransformFeedbackVarying (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
    public static native void glGetTransformFeedbackVarying(int program_, int index_, int bufSize_, int[] length_, int[] size_, int[] type_, byte[] name_);
    //GLAPI void APIENTRY glClampColor (GLenum target, GLenum clamp);
    public static native void glClampColor(int target_, int clamp_);
    //GLAPI void APIENTRY glBeginConditionalRender (GLuint id, GLenum mode);
    public static native void glBeginConditionalRender(int id_, int mode_);
    //GLAPI void APIENTRY glEndConditionalRender (void);
    public static native void glEndConditionalRender();
    //GLAPI void APIENTRY glVertexAttribIPointer (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
    public static native void glVertexAttribIPointer(int index_, int size_, int type_, int stride_, byte[] pointer_);
    //GLAPI void APIENTRY glGetVertexAttribIiv (GLuint index, GLenum pname, GLint *params);
    public static native void glGetVertexAttribIiv(int index_, int pname_, int[] params_);
    //GLAPI void APIENTRY glGetVertexAttribIuiv (GLuint index, GLenum pname, GLuint *params);
    public static native void glGetVertexAttribIuiv(int index_, int pname_, int[] params_);
    //GLAPI void APIENTRY glVertexAttribI1i (GLuint index, GLint x);
    public static native void glVertexAttribI1i(int index_, int x_);
    //GLAPI void APIENTRY glVertexAttribI2i (GLuint index, GLint x, GLint y);
    public static native void glVertexAttribI2i(int index_, int x_, int y_);
    //GLAPI void APIENTRY glVertexAttribI3i (GLuint index, GLint x, GLint y, GLint z);
    public static native void glVertexAttribI3i(int index_, int x_, int y_, int z_);
    //GLAPI void APIENTRY glVertexAttribI4i (GLuint index, GLint x, GLint y, GLint z, GLint w);
    public static native void glVertexAttribI4i(int index_, int x_, int y_, int z_, int w_);
    //GLAPI void APIENTRY glVertexAttribI1ui (GLuint index, GLuint x);
    public static native void glVertexAttribI1ui(int index_, int x_);
    //GLAPI void APIENTRY glVertexAttribI2ui (GLuint index, GLuint x, GLuint y);
    public static native void glVertexAttribI2ui(int index_, int x_, int y_);
    //GLAPI void APIENTRY glVertexAttribI3ui (GLuint index, GLuint x, GLuint y, GLuint z);
    public static native void glVertexAttribI3ui(int index_, int x_, int y_, int z_);
    //GLAPI void APIENTRY glVertexAttribI4ui (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
    public static native void glVertexAttribI4ui(int index_, int x_, int y_, int z_, int w_);
    //GLAPI void APIENTRY glVertexAttribI1iv (GLuint index, const GLint *v);
    public static native void glVertexAttribI1iv(int index_, int[] v_);
    //GLAPI void APIENTRY glVertexAttribI2iv (GLuint index, const GLint *v);
    public static native void glVertexAttribI2iv(int index_, int[] v_);
    //GLAPI void APIENTRY glVertexAttribI3iv (GLuint index, const GLint *v);
    public static native void glVertexAttribI3iv(int index_, int[] v_);
    //GLAPI void APIENTRY glVertexAttribI4iv (GLuint index, const GLint *v);
    public static native void glVertexAttribI4iv(int index_, int[] v_);
    //GLAPI void APIENTRY glVertexAttribI1uiv (GLuint index, const GLuint *v);
    public static native void glVertexAttribI1uiv(int index_, int[] v_);
    //GLAPI void APIENTRY glVertexAttribI2uiv (GLuint index, const GLuint *v);
    public static native void glVertexAttribI2uiv(int index_, int[] v_);
    //GLAPI void APIENTRY glVertexAttribI3uiv (GLuint index, const GLuint *v);
    public static native void glVertexAttribI3uiv(int index_, int[] v_);
    //GLAPI void APIENTRY glVertexAttribI4uiv (GLuint index, const GLuint *v);
    public static native void glVertexAttribI4uiv(int index_, int[] v_);
    //GLAPI void APIENTRY glVertexAttribI4bv (GLuint index, const GLbyte *v);
    public static native void glVertexAttribI4bv(int index_, byte[] v_);
    //GLAPI void APIENTRY glVertexAttribI4sv (GLuint index, const GLshort *v);
    public static native void glVertexAttribI4sv(int index_, short[] v_);
    //GLAPI void APIENTRY glVertexAttribI4ubv (GLuint index, const GLubyte *v);
    public static native void glVertexAttribI4ubv(int index_, byte[] v_);
    //GLAPI void APIENTRY glVertexAttribI4usv (GLuint index, const GLushort *v);
    public static native void glVertexAttribI4usv(int index_, short[] v_);
    //GLAPI void APIENTRY glGetUniformuiv (GLuint program, GLint location, GLuint *params);
    public static native void glGetUniformuiv(int program_, int location_, int[] params_);
    //GLAPI void APIENTRY glBindFragDataLocation (GLuint program, GLuint color, const GLchar *name);
    public static native void glBindFragDataLocation(int program_, int color_, byte[] name_);
    public static void glBindFragDataLocation(int program_,int color_,String name_){
        glBindFragDataLocation(program_,color_,(name_+"\0").getBytes());
    }
    //GLAPI GLint APIENTRY glGetFragDataLocation (GLuint program, const GLchar *name);
    public static native int glGetFragDataLocation(int program_, byte[] name_);
    public static int glGetFragDataLocation(int program_,String name_){
        int rv;
        rv = glGetFragDataLocation(program_,(name_+"\0").getBytes());
        return rv;
    }
    //GLAPI void APIENTRY glUniform1ui (GLint location, GLuint v0);
    public static native void glUniform1ui(int location_, int v0_);
    //GLAPI void APIENTRY glUniform2ui (GLint location, GLuint v0, GLuint v1);
    public static native void glUniform2ui(int location_, int v0_, int v1_);
    //GLAPI void APIENTRY glUniform3ui (GLint location, GLuint v0, GLuint v1, GLuint v2);
    public static native void glUniform3ui(int location_, int v0_, int v1_, int v2_);
    //GLAPI void APIENTRY glUniform4ui (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
    public static native void glUniform4ui(int location_, int v0_, int v1_, int v2_, int v3_);
    //GLAPI void APIENTRY glUniform1uiv (GLint location, GLsizei count, const GLuint *value);
    public static native void glUniform1uiv(int location_, int count_, int[] value_);
    //GLAPI void APIENTRY glUniform2uiv (GLint location, GLsizei count, const GLuint *value);
    public static native void glUniform2uiv(int location_, int count_, int[] value_);
    //GLAPI void APIENTRY glUniform3uiv (GLint location, GLsizei count, const GLuint *value);
    public static native void glUniform3uiv(int location_, int count_, int[] value_);
    //GLAPI void APIENTRY glUniform4uiv (GLint location, GLsizei count, const GLuint *value);
    public static native void glUniform4uiv(int location_, int count_, int[] value_);
    //GLAPI void APIENTRY glTexParameterIiv (GLenum target, GLenum pname, const GLint *params);
    public static native void glTexParameterIiv(int target_, int pname_, int[] params_);
    //GLAPI void APIENTRY glTexParameterIuiv (GLenum target, GLenum pname, const GLuint *params);
    public static native void glTexParameterIuiv(int target_, int pname_, int[] params_);
    //GLAPI void APIENTRY glGetTexParameterIiv (GLenum target, GLenum pname, GLint *params);
    public static native void glGetTexParameterIiv(int target_, int pname_, int[] params_);
    //GLAPI void APIENTRY glGetTexParameterIuiv (GLenum target, GLenum pname, GLuint *params);
    public static native void glGetTexParameterIuiv(int target_, int pname_, int[] params_);
    //GLAPI void APIENTRY glClearBufferiv (GLenum buffer, GLint drawbuffer, const GLint *value);
    public static native void glClearBufferiv(int buffer_, int drawbuffer_, int[] value_);
    //GLAPI void APIENTRY glClearBufferuiv (GLenum buffer, GLint drawbuffer, const GLuint *value);
    public static native void glClearBufferuiv(int buffer_, int drawbuffer_, int[] value_);
    //GLAPI void APIENTRY glClearBufferfv (GLenum buffer, GLint drawbuffer, const GLfloat *value);
    public static native void glClearBufferfv(int buffer_, int drawbuffer_, float[] value_);
    //GLAPI void APIENTRY glClearBufferfi (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
    public static native void glClearBufferfi(int buffer_, int drawbuffer_, float depth_, int stencil_);
    //GLAPI GLboolean APIENTRY glIsRenderbuffer (GLuint renderbuffer);
    public static native boolean glIsRenderbuffer(int renderbuffer_);
    //GLAPI void APIENTRY glBindRenderbuffer (GLenum target, GLuint renderbuffer);
    public static native void glBindRenderbuffer(int target_, int renderbuffer_);
    //GLAPI void APIENTRY glDeleteRenderbuffers (GLsizei n, const GLuint *renderbuffers);
    public static native void glDeleteRenderbuffers(int n_, int[] renderbuffers_);
    //GLAPI void APIENTRY glGenRenderbuffers (GLsizei n, GLuint *renderbuffers);
    public static native void glGenRenderbuffers(int n_, int[] renderbuffers_);
    //GLAPI void APIENTRY glRenderbufferStorage (GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
    public static native void glRenderbufferStorage(int target_, int internalformat_, int width_, int height_);
    //GLAPI void APIENTRY glGetRenderbufferParameteriv (GLenum target, GLenum pname, GLint *params);
    public static native void glGetRenderbufferParameteriv(int target_, int pname_, int[] params_);
    //GLAPI GLboolean APIENTRY glIsFramebuffer (GLuint framebuffer);
    public static native boolean glIsFramebuffer(int framebuffer_);
    //GLAPI void APIENTRY glBindFramebuffer (GLenum target, GLuint framebuffer);
    public static native void glBindFramebuffer(int target_, int framebuffer_);
    //GLAPI void APIENTRY glDeleteFramebuffers (GLsizei n, const GLuint *framebuffers);
    public static native void glDeleteFramebuffers(int n_, int[] framebuffers_);
    //GLAPI void APIENTRY glGenFramebuffers (GLsizei n, GLuint *framebuffers);
    public static native void glGenFramebuffers(int n_, int[] framebuffers_);
    //GLAPI GLenum APIENTRY glCheckFramebufferStatus (GLenum target);
    public static native int glCheckFramebufferStatus(int target_);
    //GLAPI void APIENTRY glFramebufferTexture1D (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
    public static native void glFramebufferTexture1D(int target_, int attachment_, int textarget_, int texture_, int level_);
    //GLAPI void APIENTRY glFramebufferTexture2D (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
    public static native void glFramebufferTexture2D(int target_, int attachment_, int textarget_, int texture_, int level_);
    //GLAPI void APIENTRY glFramebufferTexture3D (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
    public static native void glFramebufferTexture3D(int target_, int attachment_, int textarget_, int texture_, int level_, int zoffset_);
    //GLAPI void APIENTRY glFramebufferRenderbuffer (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
    public static native void glFramebufferRenderbuffer(int target_, int attachment_, int renderbuffertarget_, int renderbuffer_);
    //GLAPI void APIENTRY glGetFramebufferAttachmentParameteriv (GLenum target, GLenum attachment, GLenum pname, GLint *params);
    public static native void glGetFramebufferAttachmentParameteriv(int target_, int attachment_, int pname_, int[] params_);
    //GLAPI void APIENTRY glGenerateMipmap (GLenum target);
    public static native void glGenerateMipmap(int target_);
    //GLAPI void APIENTRY glBlitFramebuffer (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
    public static native void glBlitFramebuffer(int srcX0_, int srcY0_, int srcX1_, int srcY1_, int dstX0_, int dstY0_, int dstX1_, int dstY1_, int mask_, int filter_);
    //GLAPI void APIENTRY glRenderbufferStorageMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
    public static native void glRenderbufferStorageMultisample(int target_, int samples_, int internalformat_, int width_, int height_);
    //GLAPI void APIENTRY glFramebufferTextureLayer (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
    public static native void glFramebufferTextureLayer(int target_, int attachment_, int texture_, int level_, int layer_);
    //GLAPI void APIENTRY glFlushMappedBufferRange (GLenum target, GLintptr offset, GLsizeiptr length);
    public static native void glFlushMappedBufferRange(int target_, int offset_, int length_);
    //GLAPI void APIENTRY glBindVertexArray (GLuint array);
    public static native void glBindVertexArray(int array_);
    //GLAPI void APIENTRY glDeleteVertexArrays (GLsizei n, const GLuint *arrays);
    public static native void glDeleteVertexArrays(int n_, int[] arrays_);
    //GLAPI void APIENTRY glGenVertexArrays (GLsizei n, GLuint *arrays);
    public static native void glGenVertexArrays(int n_, int[] arrays_);
    //GLAPI GLboolean APIENTRY glIsVertexArray (GLuint array);
    public static native boolean glIsVertexArray(int array_);
    //GLAPI void APIENTRY glDrawArraysInstanced (GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
    public static native void glDrawArraysInstanced(int mode_, int first_, int count_, int instancecount_);
    //GLAPI void APIENTRY glDrawElementsInstanced (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount);
    public static native void glDrawElementsInstanced(int mode_, int count_, int type_, int indices_, int instancecount_);
    //GLAPI void APIENTRY glTexBuffer (GLenum target, GLenum internalformat, GLuint buffer);
    public static native void glTexBuffer(int target_, int internalformat_, int buffer_);
    //GLAPI void APIENTRY glPrimitiveRestartIndex (GLuint index);
    public static native void glPrimitiveRestartIndex(int index_);
    //GLAPI void APIENTRY glCopyBufferSubData (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
    public static native void glCopyBufferSubData(int readTarget_, int writeTarget_, int readOffset_, int writeOffset_, int size_);
    //GLAPI void APIENTRY glGetActiveUniformsiv (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
    public static native void glGetActiveUniformsiv(int program_, int uniformCount_, int[] uniformIndices_, int pname_, int[] params_);
    //GLAPI void APIENTRY glGetActiveUniformName (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
    public static native void glGetActiveUniformName(int program_, int uniformIndex_, int bufSize_, int[] length_, byte[] uniformName_);
    //GLAPI GLuint APIENTRY glGetUniformBlockIndex (GLuint program, const GLchar *uniformBlockName);
    public static native int glGetUniformBlockIndex(int program_, byte[] uniformBlockName_);
    public static int glGetUniformBlockIndex(int program_,String uniformBlockName_){
        int rv;
        rv = glGetUniformBlockIndex(program_,(uniformBlockName_+"\0").getBytes());
        return rv;
    }
    //GLAPI void APIENTRY glGetActiveUniformBlockiv (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
    public static native void glGetActiveUniformBlockiv(int program_, int uniformBlockIndex_, int pname_, int[] params_);
    //GLAPI void APIENTRY glGetActiveUniformBlockName (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
    public static native void glGetActiveUniformBlockName(int program_, int uniformBlockIndex_, int bufSize_, int[] length_, byte[] uniformBlockName_);
    //GLAPI void APIENTRY glUniformBlockBinding (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
    public static native void glUniformBlockBinding(int program_, int uniformBlockIndex_, int uniformBlockBinding_);
    //GLAPI void APIENTRY glDrawElementsBaseVertex (GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex);
    public static native void glDrawElementsBaseVertex(int mode_, int count_, int type_, int indices_, int basevertex_);
    //GLAPI void APIENTRY glDrawRangeElementsBaseVertex (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex);
    public static native void glDrawRangeElementsBaseVertex(int mode_, int start_, int end_, int count_, int type_, int indices_, int basevertex_);
    //GLAPI void APIENTRY glDrawElementsInstancedBaseVertex (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex);
    public static native void glDrawElementsInstancedBaseVertex(int mode_, int count_, int type_, int indices_, int instancecount_, int basevertex_);
    //GLAPI void APIENTRY glProvokingVertex (GLenum mode);
    public static native void glProvokingVertex(int mode_);
    //GLAPI GLsync APIENTRY glFenceSync (GLenum condition, GLbitfield flags);
    public static native long glFenceSync(int condition_, int flags_);
    //GLAPI GLboolean APIENTRY glIsSync (GLsync sync);
    public static native boolean glIsSync(long sync_);
    //GLAPI void APIENTRY glDeleteSync (GLsync sync);
    public static native void glDeleteSync(long sync_);
    //GLAPI GLenum APIENTRY glClientWaitSync (GLsync sync, GLbitfield flags, GLuint64 timeout);
    public static native int glClientWaitSync(long sync_, int flags_, long timeout_);
    //GLAPI void APIENTRY glWaitSync (GLsync sync, GLbitfield flags, GLuint64 timeout);
    public static native void glWaitSync(long sync_, int flags_, long timeout_);
    //GLAPI void APIENTRY glGetInteger64v (GLenum pname, GLint64 *data);
    public static native void glGetInteger64v(int pname_, long[] data_);
    //GLAPI void APIENTRY glGetSynciv (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
    public static native void glGetSynciv(long sync_, int pname_, int bufSize_, int[] length_, int[] values_);
    //GLAPI void APIENTRY glGetInteger64i_v (GLenum target, GLuint index, GLint64 *data);
    public static native void glGetInteger64i_v(int target_, int index_, long[] data_);
    //GLAPI void APIENTRY glGetBufferParameteri64v (GLenum target, GLenum pname, GLint64 *params);
    public static native void glGetBufferParameteri64v(int target_, int pname_, long[] params_);
    //GLAPI void APIENTRY glFramebufferTexture (GLenum target, GLenum attachment, GLuint texture, GLint level);
    public static native void glFramebufferTexture(int target_, int attachment_, int texture_, int level_);
    //GLAPI void APIENTRY glTexImage2DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
    public static native void glTexImage2DMultisample(int target_, int samples_, int internalformat_, int width_, int height_, boolean fixedsamplelocations_);
    //GLAPI void APIENTRY glTexImage3DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
    public static native void glTexImage3DMultisample(int target_, int samples_, int internalformat_, int width_, int height_, int depth_, boolean fixedsamplelocations_);
    //GLAPI void APIENTRY glGetMultisamplefv (GLenum pname, GLuint index, GLfloat *val);
    public static native void glGetMultisamplefv(int pname_, int index_, float[] val_);
    //GLAPI void APIENTRY glSampleMaski (GLuint maskNumber, GLbitfield mask);
    public static native void glSampleMaski(int maskNumber_, int mask_);
    //GLAPI void APIENTRY glBindFragDataLocationIndexed (GLuint program, GLuint colorNumber, GLuint index, const GLchar *name);
    public static native void glBindFragDataLocationIndexed(int program_, int colorNumber_, int index_, byte[] name_);
    public static void glBindFragDataLocationIndexed(int program_,int colorNumber_,int index_,String name_){
        glBindFragDataLocationIndexed(program_,colorNumber_,index_,(name_+"\0").getBytes());
    }
    //GLAPI GLint APIENTRY glGetFragDataIndex (GLuint program, const GLchar *name);
    public static native int glGetFragDataIndex(int program_, byte[] name_);
    public static int glGetFragDataIndex(int program_,String name_){
        int rv;
        rv = glGetFragDataIndex(program_,(name_+"\0").getBytes());
        return rv;
    }
    //GLAPI void APIENTRY glGenSamplers (GLsizei count, GLuint *samplers);
    public static native void glGenSamplers(int count_, int[] samplers_);
    //GLAPI void APIENTRY glDeleteSamplers (GLsizei count, const GLuint *samplers);
    public static native void glDeleteSamplers(int count_, int[] samplers_);
    //GLAPI GLboolean APIENTRY glIsSampler (GLuint sampler);
    public static native boolean glIsSampler(int sampler_);
    //GLAPI void APIENTRY glBindSampler (GLuint unit, GLuint sampler);
    public static native void glBindSampler(int unit_, int sampler_);
    //GLAPI void APIENTRY glSamplerParameteri (GLuint sampler, GLenum pname, GLint param);
    public static native void glSamplerParameteri(int sampler_, int pname_, int param_);
    //GLAPI void APIENTRY glSamplerParameteriv (GLuint sampler, GLenum pname, const GLint *param);
    public static native void glSamplerParameteriv(int sampler_, int pname_, int[] param_);
    //GLAPI void APIENTRY glSamplerParameterf (GLuint sampler, GLenum pname, GLfloat param);
    public static native void glSamplerParameterf(int sampler_, int pname_, float param_);
    //GLAPI void APIENTRY glSamplerParameterfv (GLuint sampler, GLenum pname, const GLfloat *param);
    public static native void glSamplerParameterfv(int sampler_, int pname_, float[] param_);
    //GLAPI void APIENTRY glSamplerParameterIiv (GLuint sampler, GLenum pname, const GLint *param);
    public static native void glSamplerParameterIiv(int sampler_, int pname_, int[] param_);
    //GLAPI void APIENTRY glSamplerParameterIuiv (GLuint sampler, GLenum pname, const GLuint *param);
    public static native void glSamplerParameterIuiv(int sampler_, int pname_, int[] param_);
    //GLAPI void APIENTRY glGetSamplerParameteriv (GLuint sampler, GLenum pname, GLint *params);
    public static native void glGetSamplerParameteriv(int sampler_, int pname_, int[] params_);
    //GLAPI void APIENTRY glGetSamplerParameterIiv (GLuint sampler, GLenum pname, GLint *params);
    public static native void glGetSamplerParameterIiv(int sampler_, int pname_, int[] params_);
    //GLAPI void APIENTRY glGetSamplerParameterfv (GLuint sampler, GLenum pname, GLfloat *params);
    public static native void glGetSamplerParameterfv(int sampler_, int pname_, float[] params_);
    //GLAPI void APIENTRY glGetSamplerParameterIuiv (GLuint sampler, GLenum pname, GLuint *params);
    public static native void glGetSamplerParameterIuiv(int sampler_, int pname_, int[] params_);
    //GLAPI void APIENTRY glQueryCounter (GLuint id, GLenum target);
    public static native void glQueryCounter(int id_, int target_);
    //GLAPI void APIENTRY glGetQueryObjecti64v (GLuint id, GLenum pname, GLint64 *params);
    public static native void glGetQueryObjecti64v(int id_, int pname_, long[] params_);
    //GLAPI void APIENTRY glGetQueryObjectui64v (GLuint id, GLenum pname, GLuint64 *params);
    public static native void glGetQueryObjectui64v(int id_, int pname_, long[] params_);
    //GLAPI void APIENTRY glVertexAttribDivisor (GLuint index, GLuint divisor);
    public static native void glVertexAttribDivisor(int index_, int divisor_);
    //GLAPI void APIENTRY glVertexAttribP1ui (GLuint index, GLenum type, GLboolean normalized, GLuint value);
    public static native void glVertexAttribP1ui(int index_, int type_, boolean normalized_, int value_);
    //GLAPI void APIENTRY glVertexAttribP1uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
    public static native void glVertexAttribP1uiv(int index_, int type_, boolean normalized_, int[] value_);
    //GLAPI void APIENTRY glVertexAttribP2ui (GLuint index, GLenum type, GLboolean normalized, GLuint value);
    public static native void glVertexAttribP2ui(int index_, int type_, boolean normalized_, int value_);
    //GLAPI void APIENTRY glVertexAttribP2uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
    public static native void glVertexAttribP2uiv(int index_, int type_, boolean normalized_, int[] value_);
    //GLAPI void APIENTRY glVertexAttribP3ui (GLuint index, GLenum type, GLboolean normalized, GLuint value);
    public static native void glVertexAttribP3ui(int index_, int type_, boolean normalized_, int value_);
    //GLAPI void APIENTRY glVertexAttribP3uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
    public static native void glVertexAttribP3uiv(int index_, int type_, boolean normalized_, int[] value_);
    //GLAPI void APIENTRY glVertexAttribP4ui (GLuint index, GLenum type, GLboolean normalized, GLuint value);
    public static native void glVertexAttribP4ui(int index_, int type_, boolean normalized_, int value_);
    //GLAPI void APIENTRY glVertexAttribP4uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
    public static native void glVertexAttribP4uiv(int index_, int type_, boolean normalized_, int[] value_);
    //GLAPI void APIENTRY glMinSampleShading (GLfloat value);
    public static native void glMinSampleShading(float value_);
    //GLAPI void APIENTRY glBlendEquationi (GLuint buf, GLenum mode);
    public static native void glBlendEquationi(int buf_, int mode_);
    //GLAPI void APIENTRY glBlendEquationSeparatei (GLuint buf, GLenum modeRGB, GLenum modeAlpha);
    public static native void glBlendEquationSeparatei(int buf_, int modeRGB_, int modeAlpha_);
    //GLAPI void APIENTRY glBlendFunci (GLuint buf, GLenum src, GLenum dst);
    public static native void glBlendFunci(int buf_, int src_, int dst_);
    //GLAPI void APIENTRY glBlendFuncSeparatei (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
    public static native void glBlendFuncSeparatei(int buf_, int srcRGB_, int dstRGB_, int srcAlpha_, int dstAlpha_);
    //GLAPI void APIENTRY glDrawArraysIndirect (GLenum mode, const void *indirect);
    public static native void glDrawArraysIndirect(int mode_, int indirect_);
    //GLAPI void APIENTRY glDrawElementsIndirect (GLenum mode, GLenum type, const void *indirect);
    public static native void glDrawElementsIndirect(int mode_, int type_, int indirect_);
    //GLAPI void APIENTRY glUniform1d (GLint location, GLdouble x);
    public static native void glUniform1d(int location_, double x_);
    //GLAPI void APIENTRY glUniform2d (GLint location, GLdouble x, GLdouble y);
    public static native void glUniform2d(int location_, double x_, double y_);
    //GLAPI void APIENTRY glUniform3d (GLint location, GLdouble x, GLdouble y, GLdouble z);
    public static native void glUniform3d(int location_, double x_, double y_, double z_);
    //GLAPI void APIENTRY glUniform4d (GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
    public static native void glUniform4d(int location_, double x_, double y_, double z_, double w_);
    //GLAPI void APIENTRY glUniform1dv (GLint location, GLsizei count, const GLdouble *value);
    public static native void glUniform1dv(int location_, int count_, double[] value_);
    //GLAPI void APIENTRY glUniform2dv (GLint location, GLsizei count, const GLdouble *value);
    public static native void glUniform2dv(int location_, int count_, double[] value_);
    //GLAPI void APIENTRY glUniform3dv (GLint location, GLsizei count, const GLdouble *value);
    public static native void glUniform3dv(int location_, int count_, double[] value_);
    //GLAPI void APIENTRY glUniform4dv (GLint location, GLsizei count, const GLdouble *value);
    public static native void glUniform4dv(int location_, int count_, double[] value_);
    //GLAPI void APIENTRY glUniformMatrix2dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    public static native void glUniformMatrix2dv(int location_, int count_, boolean transpose_, double[] value_);
    //GLAPI void APIENTRY glUniformMatrix3dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    public static native void glUniformMatrix3dv(int location_, int count_, boolean transpose_, double[] value_);
    //GLAPI void APIENTRY glUniformMatrix4dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    public static native void glUniformMatrix4dv(int location_, int count_, boolean transpose_, double[] value_);
    //GLAPI void APIENTRY glUniformMatrix2x3dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    public static native void glUniformMatrix2x3dv(int location_, int count_, boolean transpose_, double[] value_);
    //GLAPI void APIENTRY glUniformMatrix2x4dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    public static native void glUniformMatrix2x4dv(int location_, int count_, boolean transpose_, double[] value_);
    //GLAPI void APIENTRY glUniformMatrix3x2dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    public static native void glUniformMatrix3x2dv(int location_, int count_, boolean transpose_, double[] value_);
    //GLAPI void APIENTRY glUniformMatrix3x4dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    public static native void glUniformMatrix3x4dv(int location_, int count_, boolean transpose_, double[] value_);
    //GLAPI void APIENTRY glUniformMatrix4x2dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    public static native void glUniformMatrix4x2dv(int location_, int count_, boolean transpose_, double[] value_);
    //GLAPI void APIENTRY glUniformMatrix4x3dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    public static native void glUniformMatrix4x3dv(int location_, int count_, boolean transpose_, double[] value_);
    //GLAPI void APIENTRY glGetUniformdv (GLuint program, GLint location, GLdouble *params);
    public static native void glGetUniformdv(int program_, int location_, double[] params_);
    //GLAPI GLint APIENTRY glGetSubroutineUniformLocation (GLuint program, GLenum shadertype, const GLchar *name);
    public static native int glGetSubroutineUniformLocation(int program_, int shadertype_, byte[] name_);
    public static int glGetSubroutineUniformLocation(int program_,int shadertype_,String name_){
        int rv;
        rv = glGetSubroutineUniformLocation(program_,shadertype_,(name_+"\0").getBytes());
        return rv;
    }
    //GLAPI GLuint APIENTRY glGetSubroutineIndex (GLuint program, GLenum shadertype, const GLchar *name);
    public static native int glGetSubroutineIndex(int program_, int shadertype_, byte[] name_);
    public static int glGetSubroutineIndex(int program_,int shadertype_,String name_){
        int rv;
        rv = glGetSubroutineIndex(program_,shadertype_,(name_+"\0").getBytes());
        return rv;
    }
    //GLAPI void APIENTRY glGetActiveSubroutineUniformiv (GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values);
    public static native void glGetActiveSubroutineUniformiv(int program_, int shadertype_, int index_, int pname_, int[] values_);
    //GLAPI void APIENTRY glGetActiveSubroutineUniformName (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
    public static native void glGetActiveSubroutineUniformName(int program_, int shadertype_, int index_, int bufsize_, int[] length_, byte[] name_);
    //GLAPI void APIENTRY glGetActiveSubroutineName (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
    public static native void glGetActiveSubroutineName(int program_, int shadertype_, int index_, int bufsize_, int[] length_, byte[] name_);
    //GLAPI void APIENTRY glUniformSubroutinesuiv (GLenum shadertype, GLsizei count, const GLuint *indices);
    public static native void glUniformSubroutinesuiv(int shadertype_, int count_, int[] indices_);
    //GLAPI void APIENTRY glGetUniformSubroutineuiv (GLenum shadertype, GLint location, GLuint *params);
    public static native void glGetUniformSubroutineuiv(int shadertype_, int location_, int[] params_);
    //GLAPI void APIENTRY glGetProgramStageiv (GLuint program, GLenum shadertype, GLenum pname, GLint *values);
    public static native void glGetProgramStageiv(int program_, int shadertype_, int pname_, int[] values_);
    //GLAPI void APIENTRY glPatchParameteri (GLenum pname, GLint value);
    public static native void glPatchParameteri(int pname_, int value_);
    //GLAPI void APIENTRY glPatchParameterfv (GLenum pname, const GLfloat *values);
    public static native void glPatchParameterfv(int pname_, float[] values_);
    //GLAPI void APIENTRY glBindTransformFeedback (GLenum target, GLuint id);
    public static native void glBindTransformFeedback(int target_, int id_);
    //GLAPI void APIENTRY glDeleteTransformFeedbacks (GLsizei n, const GLuint *ids);
    public static native void glDeleteTransformFeedbacks(int n_, int[] ids_);
    //GLAPI void APIENTRY glGenTransformFeedbacks (GLsizei n, GLuint *ids);
    public static native void glGenTransformFeedbacks(int n_, int[] ids_);
    //GLAPI GLboolean APIENTRY glIsTransformFeedback (GLuint id);
    public static native boolean glIsTransformFeedback(int id_);
    //GLAPI void APIENTRY glPauseTransformFeedback (void);
    public static native void glPauseTransformFeedback();
    //GLAPI void APIENTRY glResumeTransformFeedback (void);
    public static native void glResumeTransformFeedback();
    //GLAPI void APIENTRY glDrawTransformFeedback (GLenum mode, GLuint id);
    public static native void glDrawTransformFeedback(int mode_, int id_);
    //GLAPI void APIENTRY glDrawTransformFeedbackStream (GLenum mode, GLuint id, GLuint stream);
    public static native void glDrawTransformFeedbackStream(int mode_, int id_, int stream_);
    //GLAPI void APIENTRY glBeginQueryIndexed (GLenum target, GLuint index, GLuint id);
    public static native void glBeginQueryIndexed(int target_, int index_, int id_);
    //GLAPI void APIENTRY glEndQueryIndexed (GLenum target, GLuint index);
    public static native void glEndQueryIndexed(int target_, int index_);
    //GLAPI void APIENTRY glGetQueryIndexediv (GLenum target, GLuint index, GLenum pname, GLint *params);
    public static native void glGetQueryIndexediv(int target_, int index_, int pname_, int[] params_);
    //GLAPI void APIENTRY glReleaseShaderCompiler (void);
    public static native void glReleaseShaderCompiler();
    //GLAPI void APIENTRY glShaderBinary (GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length);
    public static native void glShaderBinary(int count_, int[] shaders_, int binaryformat_, byte[] binary_, int length_);
    //GLAPI void APIENTRY glGetShaderPrecisionFormat (GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);
    public static native void glGetShaderPrecisionFormat(int shadertype_, int precisiontype_, int[] range_, int[] precision_);
    //GLAPI void APIENTRY glDepthRangef (GLfloat n, GLfloat f);
    public static native void glDepthRangef(float n_, float f_);
    //GLAPI void APIENTRY glClearDepthf (GLfloat d);
    public static native void glClearDepthf(float d_);
    //GLAPI void APIENTRY glGetProgramBinary (GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary);
    public static native void glGetProgramBinary(int program_, int bufSize_, int[] length_, int[] binaryFormat_, byte[] binary_);
    //GLAPI void APIENTRY glProgramBinary (GLuint program, GLenum binaryFormat, const void *binary, GLsizei length);
    public static native void glProgramBinary(int program_, int binaryFormat_, byte[] binary_, int length_);
    //GLAPI void APIENTRY glProgramParameteri (GLuint program, GLenum pname, GLint value);
    public static native void glProgramParameteri(int program_, int pname_, int value_);
    //GLAPI void APIENTRY glUseProgramStages (GLuint pipeline, GLbitfield stages, GLuint program);
    public static native void glUseProgramStages(int pipeline_, int stages_, int program_);
    //GLAPI void APIENTRY glActiveShaderProgram (GLuint pipeline, GLuint program);
    public static native void glActiveShaderProgram(int pipeline_, int program_);
    //GLAPI void APIENTRY glBindProgramPipeline (GLuint pipeline);
    public static native void glBindProgramPipeline(int pipeline_);
    //GLAPI void APIENTRY glDeleteProgramPipelines (GLsizei n, const GLuint *pipelines);
    public static native void glDeleteProgramPipelines(int n_, int[] pipelines_);
    //GLAPI void APIENTRY glGenProgramPipelines (GLsizei n, GLuint *pipelines);
    public static native void glGenProgramPipelines(int n_, int[] pipelines_);
    //GLAPI GLboolean APIENTRY glIsProgramPipeline (GLuint pipeline);
    public static native boolean glIsProgramPipeline(int pipeline_);
    //GLAPI void APIENTRY glGetProgramPipelineiv (GLuint pipeline, GLenum pname, GLint *params);
    public static native void glGetProgramPipelineiv(int pipeline_, int pname_, int[] params_);
    //GLAPI void APIENTRY glProgramUniform1i (GLuint program, GLint location, GLint v0);
    public static native void glProgramUniform1i(int program_, int location_, int v0_);
    //GLAPI void APIENTRY glProgramUniform1iv (GLuint program, GLint location, GLsizei count, const GLint *value);
    public static native void glProgramUniform1iv(int program_, int location_, int count_, int[] value_);
    //GLAPI void APIENTRY glProgramUniform1f (GLuint program, GLint location, GLfloat v0);
    public static native void glProgramUniform1f(int program_, int location_, float v0_);
    //GLAPI void APIENTRY glProgramUniform1fv (GLuint program, GLint location, GLsizei count, const GLfloat *value);
    public static native void glProgramUniform1fv(int program_, int location_, int count_, float[] value_);
    //GLAPI void APIENTRY glProgramUniform1d (GLuint program, GLint location, GLdouble v0);
    public static native void glProgramUniform1d(int program_, int location_, double v0_);
    //GLAPI void APIENTRY glProgramUniform1dv (GLuint program, GLint location, GLsizei count, const GLdouble *value);
    public static native void glProgramUniform1dv(int program_, int location_, int count_, double[] value_);
    //GLAPI void APIENTRY glProgramUniform1ui (GLuint program, GLint location, GLuint v0);
    public static native void glProgramUniform1ui(int program_, int location_, int v0_);
    //GLAPI void APIENTRY glProgramUniform1uiv (GLuint program, GLint location, GLsizei count, const GLuint *value);
    public static native void glProgramUniform1uiv(int program_, int location_, int count_, int[] value_);
    //GLAPI void APIENTRY glProgramUniform2i (GLuint program, GLint location, GLint v0, GLint v1);
    public static native void glProgramUniform2i(int program_, int location_, int v0_, int v1_);
    //GLAPI void APIENTRY glProgramUniform2iv (GLuint program, GLint location, GLsizei count, const GLint *value);
    public static native void glProgramUniform2iv(int program_, int location_, int count_, int[] value_);
    //GLAPI void APIENTRY glProgramUniform2f (GLuint program, GLint location, GLfloat v0, GLfloat v1);
    public static native void glProgramUniform2f(int program_, int location_, float v0_, float v1_);
    //GLAPI void APIENTRY glProgramUniform2fv (GLuint program, GLint location, GLsizei count, const GLfloat *value);
    public static native void glProgramUniform2fv(int program_, int location_, int count_, float[] value_);
    //GLAPI void APIENTRY glProgramUniform2d (GLuint program, GLint location, GLdouble v0, GLdouble v1);
    public static native void glProgramUniform2d(int program_, int location_, double v0_, double v1_);
    //GLAPI void APIENTRY glProgramUniform2dv (GLuint program, GLint location, GLsizei count, const GLdouble *value);
    public static native void glProgramUniform2dv(int program_, int location_, int count_, double[] value_);
    //GLAPI void APIENTRY glProgramUniform2ui (GLuint program, GLint location, GLuint v0, GLuint v1);
    public static native void glProgramUniform2ui(int program_, int location_, int v0_, int v1_);
    //GLAPI void APIENTRY glProgramUniform2uiv (GLuint program, GLint location, GLsizei count, const GLuint *value);
    public static native void glProgramUniform2uiv(int program_, int location_, int count_, int[] value_);
    //GLAPI void APIENTRY glProgramUniform3i (GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
    public static native void glProgramUniform3i(int program_, int location_, int v0_, int v1_, int v2_);
    //GLAPI void APIENTRY glProgramUniform3iv (GLuint program, GLint location, GLsizei count, const GLint *value);
    public static native void glProgramUniform3iv(int program_, int location_, int count_, int[] value_);
    //GLAPI void APIENTRY glProgramUniform3f (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
    public static native void glProgramUniform3f(int program_, int location_, float v0_, float v1_, float v2_);
    //GLAPI void APIENTRY glProgramUniform3fv (GLuint program, GLint location, GLsizei count, const GLfloat *value);
    public static native void glProgramUniform3fv(int program_, int location_, int count_, float[] value_);
    //GLAPI void APIENTRY glProgramUniform3d (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
    public static native void glProgramUniform3d(int program_, int location_, double v0_, double v1_, double v2_);
    //GLAPI void APIENTRY glProgramUniform3dv (GLuint program, GLint location, GLsizei count, const GLdouble *value);
    public static native void glProgramUniform3dv(int program_, int location_, int count_, double[] value_);
    //GLAPI void APIENTRY glProgramUniform3ui (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
    public static native void glProgramUniform3ui(int program_, int location_, int v0_, int v1_, int v2_);
    //GLAPI void APIENTRY glProgramUniform3uiv (GLuint program, GLint location, GLsizei count, const GLuint *value);
    public static native void glProgramUniform3uiv(int program_, int location_, int count_, int[] value_);
    //GLAPI void APIENTRY glProgramUniform4i (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
    public static native void glProgramUniform4i(int program_, int location_, int v0_, int v1_, int v2_, int v3_);
    //GLAPI void APIENTRY glProgramUniform4iv (GLuint program, GLint location, GLsizei count, const GLint *value);
    public static native void glProgramUniform4iv(int program_, int location_, int count_, int[] value_);
    //GLAPI void APIENTRY glProgramUniform4f (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
    public static native void glProgramUniform4f(int program_, int location_, float v0_, float v1_, float v2_, float v3_);
    //GLAPI void APIENTRY glProgramUniform4fv (GLuint program, GLint location, GLsizei count, const GLfloat *value);
    public static native void glProgramUniform4fv(int program_, int location_, int count_, float[] value_);
    //GLAPI void APIENTRY glProgramUniform4d (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
    public static native void glProgramUniform4d(int program_, int location_, double v0_, double v1_, double v2_, double v3_);
    //GLAPI void APIENTRY glProgramUniform4dv (GLuint program, GLint location, GLsizei count, const GLdouble *value);
    public static native void glProgramUniform4dv(int program_, int location_, int count_, double[] value_);
    //GLAPI void APIENTRY glProgramUniform4ui (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
    public static native void glProgramUniform4ui(int program_, int location_, int v0_, int v1_, int v2_, int v3_);
    //GLAPI void APIENTRY glProgramUniform4uiv (GLuint program, GLint location, GLsizei count, const GLuint *value);
    public static native void glProgramUniform4uiv(int program_, int location_, int count_, int[] value_);
    //GLAPI void APIENTRY glProgramUniformMatrix2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    public static native void glProgramUniformMatrix2fv(int program_, int location_, int count_, boolean transpose_, float[] value_);
    //GLAPI void APIENTRY glProgramUniformMatrix3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    public static native void glProgramUniformMatrix3fv(int program_, int location_, int count_, boolean transpose_, float[] value_);
    //GLAPI void APIENTRY glProgramUniformMatrix4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    public static native void glProgramUniformMatrix4fv(int program_, int location_, int count_, boolean transpose_, float[] value_);
    //GLAPI void APIENTRY glProgramUniformMatrix2dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    public static native void glProgramUniformMatrix2dv(int program_, int location_, int count_, boolean transpose_, double[] value_);
    //GLAPI void APIENTRY glProgramUniformMatrix3dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    public static native void glProgramUniformMatrix3dv(int program_, int location_, int count_, boolean transpose_, double[] value_);
    //GLAPI void APIENTRY glProgramUniformMatrix4dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    public static native void glProgramUniformMatrix4dv(int program_, int location_, int count_, boolean transpose_, double[] value_);
    //GLAPI void APIENTRY glProgramUniformMatrix2x3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    public static native void glProgramUniformMatrix2x3fv(int program_, int location_, int count_, boolean transpose_, float[] value_);
    //GLAPI void APIENTRY glProgramUniformMatrix3x2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    public static native void glProgramUniformMatrix3x2fv(int program_, int location_, int count_, boolean transpose_, float[] value_);
    //GLAPI void APIENTRY glProgramUniformMatrix2x4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    public static native void glProgramUniformMatrix2x4fv(int program_, int location_, int count_, boolean transpose_, float[] value_);
    //GLAPI void APIENTRY glProgramUniformMatrix4x2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    public static native void glProgramUniformMatrix4x2fv(int program_, int location_, int count_, boolean transpose_, float[] value_);
    //GLAPI void APIENTRY glProgramUniformMatrix3x4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    public static native void glProgramUniformMatrix3x4fv(int program_, int location_, int count_, boolean transpose_, float[] value_);
    //GLAPI void APIENTRY glProgramUniformMatrix4x3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    public static native void glProgramUniformMatrix4x3fv(int program_, int location_, int count_, boolean transpose_, float[] value_);
    //GLAPI void APIENTRY glProgramUniformMatrix2x3dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    public static native void glProgramUniformMatrix2x3dv(int program_, int location_, int count_, boolean transpose_, double[] value_);
    //GLAPI void APIENTRY glProgramUniformMatrix3x2dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    public static native void glProgramUniformMatrix3x2dv(int program_, int location_, int count_, boolean transpose_, double[] value_);
    //GLAPI void APIENTRY glProgramUniformMatrix2x4dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    public static native void glProgramUniformMatrix2x4dv(int program_, int location_, int count_, boolean transpose_, double[] value_);
    //GLAPI void APIENTRY glProgramUniformMatrix4x2dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    public static native void glProgramUniformMatrix4x2dv(int program_, int location_, int count_, boolean transpose_, double[] value_);
    //GLAPI void APIENTRY glProgramUniformMatrix3x4dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    public static native void glProgramUniformMatrix3x4dv(int program_, int location_, int count_, boolean transpose_, double[] value_);
    //GLAPI void APIENTRY glProgramUniformMatrix4x3dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    public static native void glProgramUniformMatrix4x3dv(int program_, int location_, int count_, boolean transpose_, double[] value_);
    //GLAPI void APIENTRY glValidateProgramPipeline (GLuint pipeline);
    public static native void glValidateProgramPipeline(int pipeline_);
    //GLAPI void APIENTRY glGetProgramPipelineInfoLog (GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
    public static native void glGetProgramPipelineInfoLog(int pipeline_, int bufSize_, int[] length_, byte[] infoLog_);
    //GLAPI void APIENTRY glVertexAttribL1d (GLuint index, GLdouble x);
    public static native void glVertexAttribL1d(int index_, double x_);
    //GLAPI void APIENTRY glVertexAttribL2d (GLuint index, GLdouble x, GLdouble y);
    public static native void glVertexAttribL2d(int index_, double x_, double y_);
    //GLAPI void APIENTRY glVertexAttribL3d (GLuint index, GLdouble x, GLdouble y, GLdouble z);
    public static native void glVertexAttribL3d(int index_, double x_, double y_, double z_);
    //GLAPI void APIENTRY glVertexAttribL4d (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
    public static native void glVertexAttribL4d(int index_, double x_, double y_, double z_, double w_);
    //GLAPI void APIENTRY glVertexAttribL1dv (GLuint index, const GLdouble *v);
    public static native void glVertexAttribL1dv(int index_, double[] v_);
    //GLAPI void APIENTRY glVertexAttribL2dv (GLuint index, const GLdouble *v);
    public static native void glVertexAttribL2dv(int index_, double[] v_);
    //GLAPI void APIENTRY glVertexAttribL3dv (GLuint index, const GLdouble *v);
    public static native void glVertexAttribL3dv(int index_, double[] v_);
    //GLAPI void APIENTRY glVertexAttribL4dv (GLuint index, const GLdouble *v);
    public static native void glVertexAttribL4dv(int index_, double[] v_);
    //GLAPI void APIENTRY glVertexAttribLPointer (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
    public static native void glVertexAttribLPointer(int index_, int size_, int type_, int stride_, int pointer_);
    //GLAPI void APIENTRY glGetVertexAttribLdv (GLuint index, GLenum pname, GLdouble *params);
    public static native void glGetVertexAttribLdv(int index_, int pname_, double[] params_);
    //GLAPI void APIENTRY glViewportArrayv (GLuint first, GLsizei count, const GLfloat *v);
    public static native void glViewportArrayv(int first_, int count_, float[] v_);
    //GLAPI void APIENTRY glViewportIndexedf (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
    public static native void glViewportIndexedf(int index_, float x_, float y_, float w_, float h_);
    //GLAPI void APIENTRY glViewportIndexedfv (GLuint index, const GLfloat *v);
    public static native void glViewportIndexedfv(int index_, float[] v_);
    //GLAPI void APIENTRY glScissorArrayv (GLuint first, GLsizei count, const GLint *v);
    public static native void glScissorArrayv(int first_, int count_, int[] v_);
    //GLAPI void APIENTRY glScissorIndexed (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
    public static native void glScissorIndexed(int index_, int left_, int bottom_, int width_, int height_);
    //GLAPI void APIENTRY glScissorIndexedv (GLuint index, const GLint *v);
    public static native void glScissorIndexedv(int index_, int[] v_);
    //GLAPI void APIENTRY glDepthRangeArrayv (GLuint first, GLsizei count, const GLdouble *v);
    public static native void glDepthRangeArrayv(int first_, int count_, double[] v_);
    //GLAPI void APIENTRY glDepthRangeIndexed (GLuint index, GLdouble n, GLdouble f);
    public static native void glDepthRangeIndexed(int index_, double n_, double f_);
    //GLAPI void APIENTRY glGetFloati_v (GLenum target, GLuint index, GLfloat *data);
    public static native void glGetFloati_v(int target_, int index_, float[] data_);
    //GLAPI void APIENTRY glGetDoublei_v (GLenum target, GLuint index, GLdouble *data);
    public static native void glGetDoublei_v(int target_, int index_, double[] data_);
    //GLAPI void APIENTRY glDrawArraysInstancedBaseInstance (GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);
    public static native void glDrawArraysInstancedBaseInstance(int mode_, int first_, int count_, int instancecount_, int baseinstance_);
    //GLAPI void APIENTRY glDrawElementsInstancedBaseInstance (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance);
    public static native void glDrawElementsInstancedBaseInstance(int mode_, int count_, int type_, int indices_, int instancecount_, int baseinstance_);
    //GLAPI void APIENTRY glDrawElementsInstancedBaseVertexBaseInstance (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);
    public static native void glDrawElementsInstancedBaseVertexBaseInstance(int mode_, int count_, int type_, int indices_, int instancecount_, int basevertex_, int baseinstance_);
    //GLAPI void APIENTRY glGetInternalformativ (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params);
    public static native void glGetInternalformativ(int target_, int internalformat_, int pname_, int bufSize_, int[] params_);
    //GLAPI void APIENTRY glGetActiveAtomicCounterBufferiv (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
    public static native void glGetActiveAtomicCounterBufferiv(int program_, int bufferIndex_, int pname_, int[] params_);
    //GLAPI void APIENTRY glBindImageTexture (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
    public static native void glBindImageTexture(int unit_, int texture_, int level_, boolean layered_, int layer_, int access_, int format_);
    //GLAPI void APIENTRY glMemoryBarrier (GLbitfield barriers);
    public static native void glMemoryBarrier(int barriers_);
    //GLAPI void APIENTRY glTexStorage1D (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
    public static native void glTexStorage1D(int target_, int levels_, int internalformat_, int width_);
    //GLAPI void APIENTRY glTexStorage2D (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
    public static native void glTexStorage2D(int target_, int levels_, int internalformat_, int width_, int height_);
    //GLAPI void APIENTRY glTexStorage3D (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
    public static native void glTexStorage3D(int target_, int levels_, int internalformat_, int width_, int height_, int depth_);
    //GLAPI void APIENTRY glDrawTransformFeedbackInstanced (GLenum mode, GLuint id, GLsizei instancecount);
    public static native void glDrawTransformFeedbackInstanced(int mode_, int id_, int instancecount_);
    //GLAPI void APIENTRY glDrawTransformFeedbackStreamInstanced (GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);
    public static native void glDrawTransformFeedbackStreamInstanced(int mode_, int id_, int stream_, int instancecount_);
    //GLAPI void APIENTRY glClearBufferData (GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data);
    public static native void glClearBufferData(int target_, int internalformat_, int format_, int type_, byte[] data_);
    //GLAPI void APIENTRY glClearBufferSubData (GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
    public static native void glClearBufferSubData(int target_, int internalformat_, int offset_, int size_, int format_, int type_, byte[] data_);
    //GLAPI void APIENTRY glDispatchCompute (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
    public static native void glDispatchCompute(int num_groups_x_, int num_groups_y_, int num_groups_z_);
    //GLAPI void APIENTRY glDispatchComputeIndirect (GLintptr indirect);
    public static native void glDispatchComputeIndirect(int indirect_);
    //GLAPI void APIENTRY glCopyImageSubData (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
    public static native void glCopyImageSubData(int srcName_, int srcTarget_, int srcLevel_, int srcX_, int srcY_, int srcZ_, int dstName_, int dstTarget_, int dstLevel_, int dstX_, int dstY_, int dstZ_, int srcWidth_, int srcHeight_, int srcDepth_);
    //GLAPI void APIENTRY glFramebufferParameteri (GLenum target, GLenum pname, GLint param);
    public static native void glFramebufferParameteri(int target_, int pname_, int param_);
    //GLAPI void APIENTRY glGetFramebufferParameteriv (GLenum target, GLenum pname, GLint *params);
    public static native void glGetFramebufferParameteriv(int target_, int pname_, int[] params_);
    //GLAPI void APIENTRY glGetInternalformati64v (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params);
    public static native void glGetInternalformati64v(int target_, int internalformat_, int pname_, int bufSize_, long[] params_);
    //GLAPI void APIENTRY glInvalidateTexSubImage (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
    public static native void glInvalidateTexSubImage(int texture_, int level_, int xoffset_, int yoffset_, int zoffset_, int width_, int height_, int depth_);
    //GLAPI void APIENTRY glInvalidateTexImage (GLuint texture, GLint level);
    public static native void glInvalidateTexImage(int texture_, int level_);
    //GLAPI void APIENTRY glInvalidateBufferSubData (GLuint buffer, GLintptr offset, GLsizeiptr length);
    public static native void glInvalidateBufferSubData(int buffer_, int offset_, int length_);
    //GLAPI void APIENTRY glInvalidateBufferData (GLuint buffer);
    public static native void glInvalidateBufferData(int buffer_);
    //GLAPI void APIENTRY glInvalidateFramebuffer (GLenum target, GLsizei numAttachments, const GLenum *attachments);
    public static native void glInvalidateFramebuffer(int target_, int numAttachments_, int[] attachments_);
    //GLAPI void APIENTRY glInvalidateSubFramebuffer (GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
    public static native void glInvalidateSubFramebuffer(int target_, int numAttachments_, int[] attachments_, int x_, int y_, int width_, int height_);
    //GLAPI void APIENTRY glGetProgramInterfaceiv (GLuint program, GLenum programInterface, GLenum pname, GLint *params);
    public static native void glGetProgramInterfaceiv(int program_, int programInterface_, int pname_, int[] params_);
    //GLAPI GLuint APIENTRY glGetProgramResourceIndex (GLuint program, GLenum programInterface, const GLchar *name);
    public static native int glGetProgramResourceIndex(int program_, int programInterface_, byte[] name_);
    public static int glGetProgramResourceIndex(int program_,int programInterface_,String name_){
        int rv;
        rv = glGetProgramResourceIndex(program_,programInterface_,(name_+"\0").getBytes());
        return rv;
    }
    //GLAPI void APIENTRY glGetProgramResourceName (GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
    public static native void glGetProgramResourceName(int program_, int programInterface_, int index_, int bufSize_, int[] length_, byte[] name_);
    //GLAPI void APIENTRY glGetProgramResourceiv (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params);
    public static native void glGetProgramResourceiv(int program_, int programInterface_, int index_, int propCount_, int[] props_, int bufSize_, int[] length_, int[] params_);
    //GLAPI GLint APIENTRY glGetProgramResourceLocation (GLuint program, GLenum programInterface, const GLchar *name);
    public static native int glGetProgramResourceLocation(int program_, int programInterface_, byte[] name_);
    public static int glGetProgramResourceLocation(int program_,int programInterface_,String name_){
        int rv;
        rv = glGetProgramResourceLocation(program_,programInterface_,(name_+"\0").getBytes());
        return rv;
    }
    //GLAPI GLint APIENTRY glGetProgramResourceLocationIndex (GLuint program, GLenum programInterface, const GLchar *name);
    public static native int glGetProgramResourceLocationIndex(int program_, int programInterface_, byte[] name_);
    public static int glGetProgramResourceLocationIndex(int program_,int programInterface_,String name_){
        int rv;
        rv = glGetProgramResourceLocationIndex(program_,programInterface_,(name_+"\0").getBytes());
        return rv;
    }
    //GLAPI void APIENTRY glShaderStorageBlockBinding (GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);
    public static native void glShaderStorageBlockBinding(int program_, int storageBlockIndex_, int storageBlockBinding_);
    //GLAPI void APIENTRY glTexBufferRange (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
    public static native void glTexBufferRange(int target_, int internalformat_, int buffer_, int offset_, int size_);
    //GLAPI void APIENTRY glTexStorage2DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
    public static native void glTexStorage2DMultisample(int target_, int samples_, int internalformat_, int width_, int height_, boolean fixedsamplelocations_);
    //GLAPI void APIENTRY glTexStorage3DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
    public static native void glTexStorage3DMultisample(int target_, int samples_, int internalformat_, int width_, int height_, int depth_, boolean fixedsamplelocations_);
    //GLAPI void APIENTRY glTextureView (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
    public static native void glTextureView(int texture_, int target_, int origtexture_, int internalformat_, int minlevel_, int numlevels_, int minlayer_, int numlayers_);
    //GLAPI void APIENTRY glBindVertexBuffer (GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
    public static native void glBindVertexBuffer(int bindingindex_, int buffer_, int offset_, int stride_);
    //GLAPI void APIENTRY glVertexAttribFormat (GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
    public static native void glVertexAttribFormat(int attribindex_, int size_, int type_, boolean normalized_, int relativeoffset_);
    //GLAPI void APIENTRY glVertexAttribIFormat (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
    public static native void glVertexAttribIFormat(int attribindex_, int size_, int type_, int relativeoffset_);
    //GLAPI void APIENTRY glVertexAttribLFormat (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
    public static native void glVertexAttribLFormat(int attribindex_, int size_, int type_, int relativeoffset_);
    //GLAPI void APIENTRY glVertexAttribBinding (GLuint attribindex, GLuint bindingindex);
    public static native void glVertexAttribBinding(int attribindex_, int bindingindex_);
    //GLAPI void APIENTRY glVertexBindingDivisor (GLuint bindingindex, GLuint divisor);
    public static native void glVertexBindingDivisor(int bindingindex_, int divisor_);
    //GLAPI void APIENTRY glDebugMessageControl (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
    public static native void glDebugMessageControl(int source_, int type_, int severity_, int count_, int[] ids_, boolean enabled_);
    //GLAPI void APIENTRY glDebugMessageInsert (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
    public static native void glDebugMessageInsert(int source_, int type_, int id_, int severity_, int length_, byte[] buf_);
    public static void glDebugMessageInsert(int source_,int type_,int id_,int severity_,int length_,String buf_){
        glDebugMessageInsert(source_,type_,id_,severity_,length_,(buf_+"\0").getBytes());
    }
    //GLAPI GLuint APIENTRY glGetDebugMessageLog (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
    public static native int glGetDebugMessageLog(int count_, int bufSize_, int[] sources_, int[] types_, int[] ids_, int[] severities_, int[] lengths_, byte[] messageLog_);
    //GLAPI void APIENTRY glPushDebugGroup (GLenum source, GLuint id, GLsizei length, const GLchar *message);
    public static native void glPushDebugGroup(int source_, int id_, int length_, byte[] message_);
    public static void glPushDebugGroup(int source_,int id_,int length_,String message_){
        glPushDebugGroup(source_,id_,length_,(message_+"\0").getBytes());
    }
    //GLAPI void APIENTRY glPopDebugGroup (void);
    public static native void glPopDebugGroup();
    //GLAPI void APIENTRY glObjectLabel (GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
    public static native void glObjectLabel(int identifier_, int name_, int length_, byte[] label_);
    public static void glObjectLabel(int identifier_,int name_,int length_,String label_){
        glObjectLabel(identifier_,name_,length_,(label_+"\0").getBytes());
    }
    //GLAPI void APIENTRY glGetObjectLabel (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
    public static native void glGetObjectLabel(int identifier_, int name_, int bufSize_, int[] length_, byte[] label_);
    //GLAPI void APIENTRY glObjectPtrLabel (const void *ptr, GLsizei length, const GLchar *label);
    public static native void glObjectPtrLabel(byte[] ptr_, int length_, byte[] label_);
    public static void glObjectPtrLabel(byte[] ptr_,int length_,String label_){
        glObjectPtrLabel(ptr_,length_,(label_+"\0").getBytes());
    }
    //GLAPI void APIENTRY glGetObjectPtrLabel (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
    public static native void glGetObjectPtrLabel(byte[] ptr_, int bufSize_, int[] length_, byte[] label_);
    //GLAPI void APIENTRY glBufferStorage (GLenum target, GLsizeiptr size, const void *data, GLbitfield flags);
    public static native void glBufferStorage(int target_, int size_, byte[] data_, int flags_);
    //GLAPI void APIENTRY glClearTexImage (GLuint texture, GLint level, GLenum format, GLenum type, const void *data);
    public static native void glClearTexImage(int texture_, int level_, int format_, int type_, byte[] data_);
    //GLAPI void APIENTRY glClearTexSubImage (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data);
    public static native void glClearTexSubImage(int texture_, int level_, int xoffset_, int yoffset_, int zoffset_, int width_, int height_, int depth_, int format_, int type_, byte[] data_);
    //GLAPI void APIENTRY glBindBuffersBase (GLenum target, GLuint first, GLsizei count, const GLuint *buffers);
    public static native void glBindBuffersBase(int target_, int first_, int count_, int[] buffers_);
    //GLAPI void APIENTRY glBindTextures (GLuint first, GLsizei count, const GLuint *textures);
    public static native void glBindTextures(int first_, int count_, int[] textures_);
    //GLAPI void APIENTRY glBindSamplers (GLuint first, GLsizei count, const GLuint *samplers);
    public static native void glBindSamplers(int first_, int count_, int[] samplers_);
    //GLAPI void APIENTRY glBindImageTextures (GLuint first, GLsizei count, const GLuint *textures);
    public static native void glBindImageTextures(int first_, int count_, int[] textures_);
    //GLAPI void APIENTRY glClipControl (GLenum origin, GLenum depth);
    public static native void glClipControl(int origin_, int depth_);
    //GLAPI void APIENTRY glCreateTransformFeedbacks (GLsizei n, GLuint *ids);
    public static native void glCreateTransformFeedbacks(int n_, int[] ids_);
    //GLAPI void APIENTRY glTransformFeedbackBufferBase (GLuint xfb, GLuint index, GLuint buffer);
    public static native void glTransformFeedbackBufferBase(int xfb_, int index_, int buffer_);
    //GLAPI void APIENTRY glTransformFeedbackBufferRange (GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizei size);
    public static native void glTransformFeedbackBufferRange(int xfb_, int index_, int buffer_, int offset_, int size_);
    //GLAPI void APIENTRY glGetTransformFeedbackiv (GLuint xfb, GLenum pname, GLint *param);
    public static native void glGetTransformFeedbackiv(int xfb_, int pname_, int[] param_);
    //GLAPI void APIENTRY glGetTransformFeedbacki_v (GLuint xfb, GLenum pname, GLuint index, GLint *param);
    public static native void glGetTransformFeedbacki_v(int xfb_, int pname_, int index_, int[] param_);
    //GLAPI void APIENTRY glGetTransformFeedbacki64_v (GLuint xfb, GLenum pname, GLuint index, GLint64 *param);
    public static native void glGetTransformFeedbacki64_v(int xfb_, int pname_, int index_, long[] param_);
    //GLAPI void APIENTRY glCreateBuffers (GLsizei n, GLuint *buffers);
    public static native void glCreateBuffers(int n_, int[] buffers_);
    //GLAPI void APIENTRY glNamedBufferStorage (GLuint buffer, GLsizei size, const void *data, GLbitfield flags);
    public static native void glNamedBufferStorage(int buffer_, int size_, byte[] data_, int flags_);
    //GLAPI void APIENTRY glNamedBufferData (GLuint buffer, GLsizei size, const void *data, GLenum usage);
    public static native void glNamedBufferData(int buffer_, int size_, byte[] data_, int usage_);
    //GLAPI void APIENTRY glNamedBufferSubData (GLuint buffer, GLintptr offset, GLsizei size, const void *data);
    public static native void glNamedBufferSubData(int buffer_, int offset_, int size_, byte[] data_);
    //GLAPI void APIENTRY glCopyNamedBufferSubData (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizei size);
    public static native void glCopyNamedBufferSubData(int readBuffer_, int writeBuffer_, int readOffset_, int writeOffset_, int size_);
    //GLAPI void APIENTRY glClearNamedBufferData (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data);
    public static native void glClearNamedBufferData(int buffer_, int internalformat_, int format_, int type_, byte[] data_);
    //GLAPI void APIENTRY glClearNamedBufferSubData (GLuint buffer, GLenum internalformat, GLintptr offset, GLsizei size, GLenum format, GLenum type, const void *data);
    public static native void glClearNamedBufferSubData(int buffer_, int internalformat_, int offset_, int size_, int format_, int type_, byte[] data_);
    //GLAPI GLboolean APIENTRY glUnmapNamedBuffer (GLuint buffer);
    public static native boolean glUnmapNamedBuffer(int buffer_);
    //GLAPI void APIENTRY glFlushMappedNamedBufferRange (GLuint buffer, GLintptr offset, GLsizei length);
    public static native void glFlushMappedNamedBufferRange(int buffer_, int offset_, int length_);
    //GLAPI void APIENTRY glGetNamedBufferParameteriv (GLuint buffer, GLenum pname, GLint *params);
    public static native void glGetNamedBufferParameteriv(int buffer_, int pname_, int[] params_);
    //GLAPI void APIENTRY glGetNamedBufferParameteri64v (GLuint buffer, GLenum pname, GLint64 *params);
    public static native void glGetNamedBufferParameteri64v(int buffer_, int pname_, long[] params_);
    //GLAPI void APIENTRY glGetNamedBufferSubData (GLuint buffer, GLintptr offset, GLsizei size, void *data);
    public static native void glGetNamedBufferSubData(int buffer_, int offset_, int size_, byte[] data_);
    //GLAPI void APIENTRY glCreateFramebuffers (GLsizei n, GLuint *framebuffers);
    public static native void glCreateFramebuffers(int n_, int[] framebuffers_);
    //GLAPI void APIENTRY glNamedFramebufferRenderbuffer (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
    public static native void glNamedFramebufferRenderbuffer(int framebuffer_, int attachment_, int renderbuffertarget_, int renderbuffer_);
    //GLAPI void APIENTRY glNamedFramebufferParameteri (GLuint framebuffer, GLenum pname, GLint param);
    public static native void glNamedFramebufferParameteri(int framebuffer_, int pname_, int param_);
    //GLAPI void APIENTRY glNamedFramebufferTexture (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
    public static native void glNamedFramebufferTexture(int framebuffer_, int attachment_, int texture_, int level_);
    //GLAPI void APIENTRY glNamedFramebufferTextureLayer (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
    public static native void glNamedFramebufferTextureLayer(int framebuffer_, int attachment_, int texture_, int level_, int layer_);
    //GLAPI void APIENTRY glNamedFramebufferDrawBuffer (GLuint framebuffer, GLenum buf);
    public static native void glNamedFramebufferDrawBuffer(int framebuffer_, int buf_);
    //GLAPI void APIENTRY glNamedFramebufferDrawBuffers (GLuint framebuffer, GLsizei n, const GLenum *bufs);
    public static native void glNamedFramebufferDrawBuffers(int framebuffer_, int n_, int[] bufs_);
    //GLAPI void APIENTRY glNamedFramebufferReadBuffer (GLuint framebuffer, GLenum src);
    public static native void glNamedFramebufferReadBuffer(int framebuffer_, int src_);
    //GLAPI void APIENTRY glInvalidateNamedFramebufferData (GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments);
    public static native void glInvalidateNamedFramebufferData(int framebuffer_, int numAttachments_, int[] attachments_);
    //GLAPI void APIENTRY glInvalidateNamedFramebufferSubData (GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
    public static native void glInvalidateNamedFramebufferSubData(int framebuffer_, int numAttachments_, int[] attachments_, int x_, int y_, int width_, int height_);
    //GLAPI void APIENTRY glClearNamedFramebufferiv (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value);
    public static native void glClearNamedFramebufferiv(int framebuffer_, int buffer_, int drawbuffer_, int[] value_);
    //GLAPI void APIENTRY glClearNamedFramebufferuiv (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value);
    public static native void glClearNamedFramebufferuiv(int framebuffer_, int buffer_, int drawbuffer_, int[] value_);
    //GLAPI void APIENTRY glClearNamedFramebufferfv (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value);
    public static native void glClearNamedFramebufferfv(int framebuffer_, int buffer_, int drawbuffer_, float[] value_);
    //GLAPI void APIENTRY glClearNamedFramebufferfi (GLuint framebuffer, GLenum buffer, const GLfloat depth, GLint stencil);
    public static native void glClearNamedFramebufferfi(int framebuffer_, int buffer_, float depth_, int stencil_);
    //GLAPI void APIENTRY glBlitNamedFramebuffer (GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
    public static native void glBlitNamedFramebuffer(int readFramebuffer_, int drawFramebuffer_, int srcX0_, int srcY0_, int srcX1_, int srcY1_, int dstX0_, int dstY0_, int dstX1_, int dstY1_, int mask_, int filter_);
    //GLAPI GLenum APIENTRY glCheckNamedFramebufferStatus (GLuint framebuffer, GLenum target);
    public static native int glCheckNamedFramebufferStatus(int framebuffer_, int target_);
    //GLAPI void APIENTRY glGetNamedFramebufferParameteriv (GLuint framebuffer, GLenum pname, GLint *param);
    public static native void glGetNamedFramebufferParameteriv(int framebuffer_, int pname_, int[] param_);
    //GLAPI void APIENTRY glGetNamedFramebufferAttachmentParameteriv (GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params);
    public static native void glGetNamedFramebufferAttachmentParameteriv(int framebuffer_, int attachment_, int pname_, int[] params_);
    //GLAPI void APIENTRY glCreateRenderbuffers (GLsizei n, GLuint *renderbuffers);
    public static native void glCreateRenderbuffers(int n_, int[] renderbuffers_);
    //GLAPI void APIENTRY glNamedRenderbufferStorage (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
    public static native void glNamedRenderbufferStorage(int renderbuffer_, int internalformat_, int width_, int height_);
    //GLAPI void APIENTRY glNamedRenderbufferStorageMultisample (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
    public static native void glNamedRenderbufferStorageMultisample(int renderbuffer_, int samples_, int internalformat_, int width_, int height_);
    //GLAPI void APIENTRY glGetNamedRenderbufferParameteriv (GLuint renderbuffer, GLenum pname, GLint *params);
    public static native void glGetNamedRenderbufferParameteriv(int renderbuffer_, int pname_, int[] params_);
    //GLAPI void APIENTRY glCreateTextures (GLenum target, GLsizei n, GLuint *textures);
    public static native void glCreateTextures(int target_, int n_, int[] textures_);
    //GLAPI void APIENTRY glTextureBuffer (GLuint texture, GLenum internalformat, GLuint buffer);
    public static native void glTextureBuffer(int texture_, int internalformat_, int buffer_);
    //GLAPI void APIENTRY glTextureBufferRange (GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizei size);
    public static native void glTextureBufferRange(int texture_, int internalformat_, int buffer_, int offset_, int size_);
    //GLAPI void APIENTRY glTextureStorage1D (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width);
    public static native void glTextureStorage1D(int texture_, int levels_, int internalformat_, int width_);
    //GLAPI void APIENTRY glTextureStorage2D (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
    public static native void glTextureStorage2D(int texture_, int levels_, int internalformat_, int width_, int height_);
    //GLAPI void APIENTRY glTextureStorage3D (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
    public static native void glTextureStorage3D(int texture_, int levels_, int internalformat_, int width_, int height_, int depth_);
    //GLAPI void APIENTRY glTextureStorage2DMultisample (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
    public static native void glTextureStorage2DMultisample(int texture_, int samples_, int internalformat_, int width_, int height_, boolean fixedsamplelocations_);
    //GLAPI void APIENTRY glTextureStorage3DMultisample (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
    public static native void glTextureStorage3DMultisample(int texture_, int samples_, int internalformat_, int width_, int height_, int depth_, boolean fixedsamplelocations_);
    //GLAPI void APIENTRY glTextureSubImage1D (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
    public static native void glTextureSubImage1D(int texture_, int level_, int xoffset_, int width_, int format_, int type_, byte[] pixels_);
    //GLAPI void APIENTRY glTextureSubImage2D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
    public static native void glTextureSubImage2D(int texture_, int level_, int xoffset_, int yoffset_, int width_, int height_, int format_, int type_, byte[] pixels_);
    //GLAPI void APIENTRY glTextureSubImage3D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
    public static native void glTextureSubImage3D(int texture_, int level_, int xoffset_, int yoffset_, int zoffset_, int width_, int height_, int depth_, int format_, int type_, byte[] pixels_);
    //GLAPI void APIENTRY glCompressedTextureSubImage1D (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
    public static native void glCompressedTextureSubImage1D(int texture_, int level_, int xoffset_, int width_, int format_, int imageSize_, byte[] data_);
    //GLAPI void APIENTRY glCompressedTextureSubImage2D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
    public static native void glCompressedTextureSubImage2D(int texture_, int level_, int xoffset_, int yoffset_, int width_, int height_, int format_, int imageSize_, byte[] data_);
    //GLAPI void APIENTRY glCompressedTextureSubImage3D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
    public static native void glCompressedTextureSubImage3D(int texture_, int level_, int xoffset_, int yoffset_, int zoffset_, int width_, int height_, int depth_, int format_, int imageSize_, byte[] data_);
    //GLAPI void APIENTRY glCopyTextureSubImage1D (GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
    public static native void glCopyTextureSubImage1D(int texture_, int level_, int xoffset_, int x_, int y_, int width_);
    //GLAPI void APIENTRY glCopyTextureSubImage2D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
    public static native void glCopyTextureSubImage2D(int texture_, int level_, int xoffset_, int yoffset_, int x_, int y_, int width_, int height_);
    //GLAPI void APIENTRY glCopyTextureSubImage3D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
    public static native void glCopyTextureSubImage3D(int texture_, int level_, int xoffset_, int yoffset_, int zoffset_, int x_, int y_, int width_, int height_);
    //GLAPI void APIENTRY glTextureParameterf (GLuint texture, GLenum pname, GLfloat param);
    public static native void glTextureParameterf(int texture_, int pname_, float param_);
    //GLAPI void APIENTRY glTextureParameterfv (GLuint texture, GLenum pname, const GLfloat *param);
    public static native void glTextureParameterfv(int texture_, int pname_, float[] param_);
    //GLAPI void APIENTRY glTextureParameteri (GLuint texture, GLenum pname, GLint param);
    public static native void glTextureParameteri(int texture_, int pname_, int param_);
    //GLAPI void APIENTRY glTextureParameterIiv (GLuint texture, GLenum pname, const GLint *params);
    public static native void glTextureParameterIiv(int texture_, int pname_, int[] params_);
    //GLAPI void APIENTRY glTextureParameterIuiv (GLuint texture, GLenum pname, const GLuint *params);
    public static native void glTextureParameterIuiv(int texture_, int pname_, int[] params_);
    //GLAPI void APIENTRY glTextureParameteriv (GLuint texture, GLenum pname, const GLint *param);
    public static native void glTextureParameteriv(int texture_, int pname_, int[] param_);
    //GLAPI void APIENTRY glGenerateTextureMipmap (GLuint texture);
    public static native void glGenerateTextureMipmap(int texture_);
    //GLAPI void APIENTRY glBindTextureUnit (GLuint unit, GLuint texture);
    public static native void glBindTextureUnit(int unit_, int texture_);
    //GLAPI void APIENTRY glGetTextureImage (GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
    public static native void glGetTextureImage(int texture_, int level_, int format_, int type_, int bufSize_, byte[] pixels_);
    //GLAPI void APIENTRY glGetCompressedTextureImage (GLuint texture, GLint level, GLsizei bufSize, void *pixels);
    public static native void glGetCompressedTextureImage(int texture_, int level_, int bufSize_, byte[] pixels_);
    //GLAPI void APIENTRY glGetTextureLevelParameterfv (GLuint texture, GLint level, GLenum pname, GLfloat *params);
    public static native void glGetTextureLevelParameterfv(int texture_, int level_, int pname_, float[] params_);
    //GLAPI void APIENTRY glGetTextureLevelParameteriv (GLuint texture, GLint level, GLenum pname, GLint *params);
    public static native void glGetTextureLevelParameteriv(int texture_, int level_, int pname_, int[] params_);
    //GLAPI void APIENTRY glGetTextureParameterfv (GLuint texture, GLenum pname, GLfloat *params);
    public static native void glGetTextureParameterfv(int texture_, int pname_, float[] params_);
    //GLAPI void APIENTRY glGetTextureParameterIiv (GLuint texture, GLenum pname, GLint *params);
    public static native void glGetTextureParameterIiv(int texture_, int pname_, int[] params_);
    //GLAPI void APIENTRY glGetTextureParameterIuiv (GLuint texture, GLenum pname, GLuint *params);
    public static native void glGetTextureParameterIuiv(int texture_, int pname_, int[] params_);
    //GLAPI void APIENTRY glGetTextureParameteriv (GLuint texture, GLenum pname, GLint *params);
    public static native void glGetTextureParameteriv(int texture_, int pname_, int[] params_);
    //GLAPI void APIENTRY glCreateVertexArrays (GLsizei n, GLuint *arrays);
    public static native void glCreateVertexArrays(int n_, int[] arrays_);
    //GLAPI void APIENTRY glDisableVertexArrayAttrib (GLuint vaobj, GLuint index);
    public static native void glDisableVertexArrayAttrib(int vaobj_, int index_);
    //GLAPI void APIENTRY glEnableVertexArrayAttrib (GLuint vaobj, GLuint index);
    public static native void glEnableVertexArrayAttrib(int vaobj_, int index_);
    //GLAPI void APIENTRY glVertexArrayElementBuffer (GLuint vaobj, GLuint buffer);
    public static native void glVertexArrayElementBuffer(int vaobj_, int buffer_);
    //GLAPI void APIENTRY glVertexArrayVertexBuffer (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
    public static native void glVertexArrayVertexBuffer(int vaobj_, int bindingindex_, int buffer_, int offset_, int stride_);
    //GLAPI void APIENTRY glVertexArrayAttribBinding (GLuint vaobj, GLuint attribindex, GLuint bindingindex);
    public static native void glVertexArrayAttribBinding(int vaobj_, int attribindex_, int bindingindex_);
    //GLAPI void APIENTRY glVertexArrayAttribFormat (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
    public static native void glVertexArrayAttribFormat(int vaobj_, int attribindex_, int size_, int type_, boolean normalized_, int relativeoffset_);
    //GLAPI void APIENTRY glVertexArrayAttribIFormat (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
    public static native void glVertexArrayAttribIFormat(int vaobj_, int attribindex_, int size_, int type_, int relativeoffset_);
    //GLAPI void APIENTRY glVertexArrayAttribLFormat (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
    public static native void glVertexArrayAttribLFormat(int vaobj_, int attribindex_, int size_, int type_, int relativeoffset_);
    //GLAPI void APIENTRY glVertexArrayBindingDivisor (GLuint vaobj, GLuint bindingindex, GLuint divisor);
    public static native void glVertexArrayBindingDivisor(int vaobj_, int bindingindex_, int divisor_);
    //GLAPI void APIENTRY glGetVertexArrayiv (GLuint vaobj, GLenum pname, GLint *param);
    public static native void glGetVertexArrayiv(int vaobj_, int pname_, int[] param_);
    //GLAPI void APIENTRY glGetVertexArrayIndexediv (GLuint vaobj, GLuint index, GLenum pname, GLint *param);
    public static native void glGetVertexArrayIndexediv(int vaobj_, int index_, int pname_, int[] param_);
    //GLAPI void APIENTRY glGetVertexArrayIndexed64iv (GLuint vaobj, GLuint index, GLenum pname, GLint64 *param);
    public static native void glGetVertexArrayIndexed64iv(int vaobj_, int index_, int pname_, long[] param_);
    //GLAPI void APIENTRY glCreateSamplers (GLsizei n, GLuint *samplers);
    public static native void glCreateSamplers(int n_, int[] samplers_);
    //GLAPI void APIENTRY glCreateProgramPipelines (GLsizei n, GLuint *pipelines);
    public static native void glCreateProgramPipelines(int n_, int[] pipelines_);
    //GLAPI void APIENTRY glCreateQueries (GLenum target, GLsizei n, GLuint *ids);
    public static native void glCreateQueries(int target_, int n_, int[] ids_);
    //GLAPI void APIENTRY glMemoryBarrierByRegion (GLbitfield barriers);
    public static native void glMemoryBarrierByRegion(int barriers_);
    //GLAPI void APIENTRY glGetTextureSubImage (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
    public static native void glGetTextureSubImage(int texture_, int level_, int xoffset_, int yoffset_, int zoffset_, int width_, int height_, int depth_, int format_, int type_, int bufSize_, byte[] pixels_);
    //GLAPI void APIENTRY glGetCompressedTextureSubImage (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels);
    public static native void glGetCompressedTextureSubImage(int texture_, int level_, int xoffset_, int yoffset_, int zoffset_, int width_, int height_, int depth_, int bufSize_, byte[] pixels_);
    //GLAPI GLenum APIENTRY glGetGraphicsResetStatus (void);
    public static native int glGetGraphicsResetStatus();
    //GLAPI void APIENTRY glGetnCompressedTexImage (GLenum target, GLint lod, GLsizei bufSize, void *pixels);
    public static native void glGetnCompressedTexImage(int target_, int lod_, int bufSize_, byte[] pixels_);
    //GLAPI void APIENTRY glGetnTexImage (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
    public static native void glGetnTexImage(int target_, int level_, int format_, int type_, int bufSize_, byte[] pixels_);
    //GLAPI void APIENTRY glGetnUniformdv (GLuint program, GLint location, GLsizei bufSize, GLdouble *params);
    public static native void glGetnUniformdv(int program_, int location_, int bufSize_, double[] params_);
    //GLAPI void APIENTRY glGetnUniformfv (GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
    public static native void glGetnUniformfv(int program_, int location_, int bufSize_, float[] params_);
    //GLAPI void APIENTRY glGetnUniformiv (GLuint program, GLint location, GLsizei bufSize, GLint *params);
    public static native void glGetnUniformiv(int program_, int location_, int bufSize_, int[] params_);
    //GLAPI void APIENTRY glGetnUniformuiv (GLuint program, GLint location, GLsizei bufSize, GLuint *params);
    public static native void glGetnUniformuiv(int program_, int location_, int bufSize_, int[] params_);
    //GLAPI void APIENTRY glReadnPixels (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);
    public static native void glReadnPixels(int x_, int y_, int width_, int height_, int format_, int type_, int bufSize_, byte[] data_);
    //GLAPI void APIENTRY glTextureBarrier (void);
    public static native void glTextureBarrier();
    //GLAPI GLuint64 APIENTRY glGetTextureHandleARB (GLuint texture);
    public static native long glGetTextureHandleARB(int texture_);
    //GLAPI GLuint64 APIENTRY glGetTextureSamplerHandleARB (GLuint texture, GLuint sampler);
    public static native long glGetTextureSamplerHandleARB(int texture_, int sampler_);
    //GLAPI void APIENTRY glMakeTextureHandleResidentARB (GLuint64 handle);
    public static native void glMakeTextureHandleResidentARB(long handle_);
    //GLAPI void APIENTRY glMakeTextureHandleNonResidentARB (GLuint64 handle);
    public static native void glMakeTextureHandleNonResidentARB(long handle_);
    //GLAPI GLuint64 APIENTRY glGetImageHandleARB (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format);
    public static native long glGetImageHandleARB(int texture_, int level_, boolean layered_, int layer_, int format_);
    //GLAPI void APIENTRY glMakeImageHandleResidentARB (GLuint64 handle, GLenum access);
    public static native void glMakeImageHandleResidentARB(long handle_, int access_);
    //GLAPI void APIENTRY glMakeImageHandleNonResidentARB (GLuint64 handle);
    public static native void glMakeImageHandleNonResidentARB(long handle_);
    //GLAPI void APIENTRY glUniformHandleui64ARB (GLint location, GLuint64 value);
    public static native void glUniformHandleui64ARB(int location_, long value_);
    //GLAPI void APIENTRY glUniformHandleui64vARB (GLint location, GLsizei count, const GLuint64 *value);
    public static native void glUniformHandleui64vARB(int location_, int count_, long[] value_);
    //GLAPI void APIENTRY glProgramUniformHandleui64ARB (GLuint program, GLint location, GLuint64 value);
    public static native void glProgramUniformHandleui64ARB(int program_, int location_, long value_);
    //GLAPI void APIENTRY glProgramUniformHandleui64vARB (GLuint program, GLint location, GLsizei count, const GLuint64 *values);
    public static native void glProgramUniformHandleui64vARB(int program_, int location_, int count_, long[] values_);
    //GLAPI GLboolean APIENTRY glIsTextureHandleResidentARB (GLuint64 handle);
    public static native boolean glIsTextureHandleResidentARB(long handle_);
    //GLAPI GLboolean APIENTRY glIsImageHandleResidentARB (GLuint64 handle);
    public static native boolean glIsImageHandleResidentARB(long handle_);
    //GLAPI void APIENTRY glVertexAttribL1ui64ARB (GLuint index, GLuint64EXT x);
    public static native void glVertexAttribL1ui64ARB(int index_, long x_);
    //GLAPI void APIENTRY glVertexAttribL1ui64vARB (GLuint index, const GLuint64EXT *v);
    public static native void glVertexAttribL1ui64vARB(int index_, long[] v_);
    //GLAPI void APIENTRY glGetVertexAttribLui64vARB (GLuint index, GLenum pname, GLuint64EXT *params);
    public static native void glGetVertexAttribLui64vARB(int index_, int pname_, long[] params_);
    //GLAPI void APIENTRY glDispatchComputeGroupSizeARB (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z);
    public static native void glDispatchComputeGroupSizeARB(int num_groups_x_, int num_groups_y_, int num_groups_z_, int group_size_x_, int group_size_y_, int group_size_z_);
    //GLAPI void APIENTRY glDebugMessageControlARB (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
    public static native void glDebugMessageControlARB(int source_, int type_, int severity_, int count_, int[] ids_, boolean enabled_);
    //GLAPI void APIENTRY glDebugMessageInsertARB (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
    public static native void glDebugMessageInsertARB(int source_, int type_, int id_, int severity_, int length_, byte[] buf_);
    public static void glDebugMessageInsertARB(int source_,int type_,int id_,int severity_,int length_,String buf_){
        glDebugMessageInsertARB(source_,type_,id_,severity_,length_,(buf_+"\0").getBytes());
    }
    //GLAPI GLuint APIENTRY glGetDebugMessageLogARB (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
    public static native int glGetDebugMessageLogARB(int count_, int bufSize_, int[] sources_, int[] types_, int[] ids_, int[] severities_, int[] lengths_, byte[] messageLog_);
    //GLAPI void APIENTRY glBlendEquationiARB (GLuint buf, GLenum mode);
    public static native void glBlendEquationiARB(int buf_, int mode_);
    //GLAPI void APIENTRY glBlendEquationSeparateiARB (GLuint buf, GLenum modeRGB, GLenum modeAlpha);
    public static native void glBlendEquationSeparateiARB(int buf_, int modeRGB_, int modeAlpha_);
    //GLAPI void APIENTRY glBlendFunciARB (GLuint buf, GLenum src, GLenum dst);
    public static native void glBlendFunciARB(int buf_, int src_, int dst_);
    //GLAPI void APIENTRY glBlendFuncSeparateiARB (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
    public static native void glBlendFuncSeparateiARB(int buf_, int srcRGB_, int dstRGB_, int srcAlpha_, int dstAlpha_);
    //GLAPI void APIENTRY glMultiDrawArraysIndirectCountARB (GLenum mode, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
    public static native void glMultiDrawArraysIndirectCountARB(int mode_, int indirect_, int drawcount_, int maxdrawcount_, int stride_);
    //GLAPI void APIENTRY glMultiDrawElementsIndirectCountARB (GLenum mode, GLenum type, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
    public static native void glMultiDrawElementsIndirectCountARB(int mode_, int type_, int indirect_, int drawcount_, int maxdrawcount_, int stride_);
    //GLAPI GLenum APIENTRY glGetGraphicsResetStatusARB (void);
    public static native int glGetGraphicsResetStatusARB();
    //GLAPI void APIENTRY glGetnTexImageARB (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *img);
    public static native void glGetnTexImageARB(int target_, int level_, int format_, int type_, int bufSize_, byte[] img_);
    //GLAPI void APIENTRY glReadnPixelsARB (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);
    public static native void glReadnPixelsARB(int x_, int y_, int width_, int height_, int format_, int type_, int bufSize_, byte[] data_);
    //GLAPI void APIENTRY glGetnCompressedTexImageARB (GLenum target, GLint lod, GLsizei bufSize, void *img);
    public static native void glGetnCompressedTexImageARB(int target_, int lod_, int bufSize_, byte[] img_);
    //GLAPI void APIENTRY glGetnUniformfvARB (GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
    public static native void glGetnUniformfvARB(int program_, int location_, int bufSize_, float[] params_);
    //GLAPI void APIENTRY glGetnUniformivARB (GLuint program, GLint location, GLsizei bufSize, GLint *params);
    public static native void glGetnUniformivARB(int program_, int location_, int bufSize_, int[] params_);
    //GLAPI void APIENTRY glGetnUniformuivARB (GLuint program, GLint location, GLsizei bufSize, GLuint *params);
    public static native void glGetnUniformuivARB(int program_, int location_, int bufSize_, int[] params_);
    //GLAPI void APIENTRY glGetnUniformdvARB (GLuint program, GLint location, GLsizei bufSize, GLdouble *params);
    public static native void glGetnUniformdvARB(int program_, int location_, int bufSize_, double[] params_);
    //GLAPI void APIENTRY glMinSampleShadingARB (GLfloat value);
    public static native void glMinSampleShadingARB(float value_);
    //GLAPI void APIENTRY glNamedStringARB (GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string);
    public static native void glNamedStringARB(int type_, int namelen_, byte[] name_, int stringlen_, byte[] string_);
    public static void glNamedStringARB(int type_,int namelen_,String name_,int stringlen_,String string_){
        glNamedStringARB(type_,namelen_,(name_+"\0").getBytes(),stringlen_,(string_+"\0").getBytes());
    }
    //GLAPI void APIENTRY glDeleteNamedStringARB (GLint namelen, const GLchar *name);
    public static native void glDeleteNamedStringARB(int namelen_, byte[] name_);
    public static void glDeleteNamedStringARB(int namelen_,String name_){
        glDeleteNamedStringARB(namelen_,(name_+"\0").getBytes());
    }
    //GLAPI GLboolean APIENTRY glIsNamedStringARB (GLint namelen, const GLchar *name);
    public static native boolean glIsNamedStringARB(int namelen_, byte[] name_);
    public static boolean glIsNamedStringARB(int namelen_,String name_){
        boolean rv;
        rv = glIsNamedStringARB(namelen_,(name_+"\0").getBytes());
        return rv;
    }
    //GLAPI void APIENTRY glGetNamedStringARB (GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string);
    public static native void glGetNamedStringARB(int namelen_, byte[] name_, int bufSize_, int[] stringlen_, byte[] string_);
    public static void glGetNamedStringARB(int namelen_,String name_,int bufSize_,int[] stringlen_,byte[] string_){
        glGetNamedStringARB(namelen_,(name_+"\0").getBytes(),bufSize_,stringlen_,string_);
    }
    //GLAPI void APIENTRY glGetNamedStringivARB (GLint namelen, const GLchar *name, GLenum pname, GLint *params);
    public static native void glGetNamedStringivARB(int namelen_, byte[] name_, int pname_, int[] params_);
    public static void glGetNamedStringivARB(int namelen_,String name_,int pname_,int[] params_){
        glGetNamedStringivARB(namelen_,(name_+"\0").getBytes(),pname_,params_);
    }
    //GLAPI void APIENTRY glBufferPageCommitmentARB (GLenum target, GLintptr offset, GLsizei size, GLboolean commit);
    public static native void glBufferPageCommitmentARB(int target_, int offset_, int size_, boolean commit_);
    //GLAPI void APIENTRY glNamedBufferPageCommitmentEXT (GLuint buffer, GLintptr offset, GLsizei size, GLboolean commit);
    public static native void glNamedBufferPageCommitmentEXT(int buffer_, int offset_, int size_, boolean commit_);
    //GLAPI void APIENTRY glNamedBufferPageCommitmentARB (GLuint buffer, GLintptr offset, GLsizei size, GLboolean commit);
    public static native void glNamedBufferPageCommitmentARB(int buffer_, int offset_, int size_, boolean commit_);
    //GLAPI void APIENTRY glTexPageCommitmentARB (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean resident);
    public static native void glTexPageCommitmentARB(int target_, int level_, int xoffset_, int yoffset_, int zoffset_, int width_, int height_, int depth_, boolean resident_);
}
