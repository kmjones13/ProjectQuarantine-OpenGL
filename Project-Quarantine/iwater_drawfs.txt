#version 430

uniform vec3 lightPos;
uniform vec4 lightColor;
uniform vec3 eyePos;

in vec4 v_pw;
in vec4 v_normal;
in vec4 v_pp;

out vec4 color;

#define WATER_COLOR vec3(0.04,0.07,0.3)
#define SKY_COLOR vec3(1,1,1)

void main(){
//color = vec4(1,1,1,1);
//return;

    vec3 L = lightPos.xyz - v_pw.xyz;
    L=normalize(L);
    vec3 N = v_normal.xyz;
    N=normalize(N);
    vec3 V = eyePos.xyz - v_pw.xyz;
    V=normalize(V);
    
    #if 0
        float dp = dot(N,L);
        dp=clamp(dp,0.0,1.0);
        float sp=0.0;
        if( dp > 0.0 ){
            vec3 R = reflect(-L,N);
            sp = clamp(dot(V,R),0.0,1.0);
            sp=pow(sp,32.0);
        }
    #else
    
        float cos_theta_i = dot(V,N);
        float cos_theta_r = sqrt(1.0 - ( (1.0-cos_theta_i*cos_theta_i) / 1.7689 ) );
    
        float term1 = (1.33*cos_theta_r - cos_theta_i ) / (1.33*cos_theta_r + cos_theta_i);
        float term2 = (cos_theta_r - 1.33*cos_theta_i)/(cos_theta_r+1.33*cos_theta_i);
        float pct_reflected = (term1*term1 + term2*term2)/2.0;
        
        float sp = 0.0;
        if( dot(N,L) > 0.0 ){
            vec3 R = reflect(-L,N);
            sp=clamp(dot(V,R),0.0,1.0);
            sp=pow(sp,32.0);
        }

        vec3 specillum = pct_reflected * lightColor.rgb +
            sp*lightColor.rgb;
        
        color.rgb = WATER_COLOR + specillum;
        color.a = 1.0;
        
    #endif
}