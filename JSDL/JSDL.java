
    package JSDL;
    import java.io.*;
    
    //This file contains data from SDL 2.0.3. The copyright on SDL is:
    /*
Simple DirectMedia Layer
Copyright (C) 1997-2014 Sam Lantinga <slouken@libsdl.org>
  
This software is provided 'as-is', without any express or implied
warranty.  In no event will the authors be held liable for any damages
arising from the use of this software.

Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute it
freely, subject to the following restrictions:
  
1. The origin of this software must not be misrepresented; you must not
   claim that you wrote the original software. If you use this software
   in a product, an acknowledgment in the product documentation would be
   appreciated but is not required. 
2. Altered source versions must be plainly marked as such, and must not be
   misrepresented as being the original software.
3. This notice may not be removed or altered from any source distribution.

 */
    public class JSDL {
        public static class SDL_CommonEvent {
            public int type;
            public int timestamp;
            public SDL_CommonEvent(byte[] b){
                int b1,b2,b3,b4;
                b1 = b[0];
                b2 = b[1];
                b3 = b[2];
                b4 = b[3];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.type = b1 | (b2<<8) | (b3<<16) | (b4<<24);
                b1 = b[4];
                b2 = b[5];
                b3 = b[6];
                b4 = b[7];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.timestamp = b1 | (b2<<8) | (b3<<16) | (b4<<24);
            }
        }
        public static class SDL_WindowEvent {
            public int type;
            public int timestamp;
            public int windowID;
            public int event;
            public int padding1;
            public int padding2;
            public int padding3;
            public int data1;
            public int data2;
            public SDL_WindowEvent(byte[] b){
                int b1,b2,b3,b4;
                b1 = b[0];
                b2 = b[1];
                b3 = b[2];
                b4 = b[3];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.type = b1 | (b2<<8) | (b3<<16) | (b4<<24);
                b1 = b[4];
                b2 = b[5];
                b3 = b[6];
                b4 = b[7];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.timestamp = b1 | (b2<<8) | (b3<<16) | (b4<<24);
                b1 = b[8];
                b2 = b[9];
                b3 = b[10];
                b4 = b[11];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.windowID = b1 | (b2<<8) | (b3<<16) | (b4<<24);
                this.event = b[12]; this.event &= 0xff;
                this.padding1 = b[13]; this.padding1 &= 0xff;
                this.padding2 = b[14]; this.padding2 &= 0xff;
                this.padding3 = b[15]; this.padding3 &= 0xff;
                b1 = b[16];
                b2 = b[17];
                b3 = b[18];
                b4 = b[19];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.data1 = b1 | (b2<<8) | (b3<<16) | (b4<<24);
                b1 = b[20];
                b2 = b[21];
                b3 = b[22];
                b4 = b[23];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.data2 = b1 | (b2<<8) | (b3<<16) | (b4<<24);
            }
        }
        public static class SDL_KeyboardEvent {
            public int type;
            public int timestamp;
            public int windowID;
            public int state;
            public int repeat;
            public int padding2;
            public int padding3;
            public static class SDL_Keysym {
                public int scancode;
                public int sym;
                public int mod;
            }
            public SDL_Keysym keysym = new SDL_Keysym();
            public SDL_KeyboardEvent(byte[] b){
                int b1,b2,b3,b4;
                b1 = b[0];
                b2 = b[1];
                b3 = b[2];
                b4 = b[3];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.type = b1 | (b2<<8) | (b3<<16) | (b4<<24);
                b1 = b[4];
                b2 = b[5];
                b3 = b[6];
                b4 = b[7];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.timestamp = b1 | (b2<<8) | (b3<<16) | (b4<<24);
                b1 = b[8];
                b2 = b[9];
                b3 = b[10];
                b4 = b[11];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.windowID = b1 | (b2<<8) | (b3<<16) | (b4<<24);
                this.state = b[12]; this.state &= 0xff;
                this.repeat = b[13]; this.repeat &= 0xff;
                this.padding2 = b[14]; this.padding2 &= 0xff;
                this.padding3 = b[15]; this.padding3 &= 0xff;
                b1 = b[16];
                b2 = b[17];
                b3 = b[18];
                b4 = b[19];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.keysym.scancode = b1 | (b2<<8) | (b3<<16) | (b4<<24);
                b1 = b[20];
                b2 = b[21];
                b3 = b[22];
                b4 = b[23];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.keysym.sym = b1 | (b2<<8) | (b3<<16) | (b4<<24);
                b1 = b[24];
                b2 = b[25];
                b1 &= 0xff; b2 &= 0xff;
                this.keysym.mod = b1 | (b2<<8);
            }
        }
        public static class SDL_MouseMotionEvent {
            public int type;
            public int timestamp;
            public int windowID;
            public int which;
            public int state;
            public int x;
            public int y;
            public int xrel;
            public int yrel;
            public SDL_MouseMotionEvent(byte[] b){
                int b1,b2,b3,b4;
                b1 = b[0];
                b2 = b[1];
                b3 = b[2];
                b4 = b[3];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.type = b1 | (b2<<8) | (b3<<16) | (b4<<24);
                b1 = b[4];
                b2 = b[5];
                b3 = b[6];
                b4 = b[7];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.timestamp = b1 | (b2<<8) | (b3<<16) | (b4<<24);
                b1 = b[8];
                b2 = b[9];
                b3 = b[10];
                b4 = b[11];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.windowID = b1 | (b2<<8) | (b3<<16) | (b4<<24);
                b1 = b[12];
                b2 = b[13];
                b3 = b[14];
                b4 = b[15];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.which = b1 | (b2<<8) | (b3<<16) | (b4<<24);
                b1 = b[16];
                b2 = b[17];
                b3 = b[18];
                b4 = b[19];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.state = b1 | (b2<<8) | (b3<<16) | (b4<<24);
                b1 = b[20];
                b2 = b[21];
                b3 = b[22];
                b4 = b[23];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.x = b1 | (b2<<8) | (b3<<16) | (b4<<24);
                b1 = b[24];
                b2 = b[25];
                b3 = b[26];
                b4 = b[27];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.y = b1 | (b2<<8) | (b3<<16) | (b4<<24);
                b1 = b[28];
                b2 = b[29];
                b3 = b[30];
                b4 = b[31];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.xrel = b1 | (b2<<8) | (b3<<16) | (b4<<24);
                b1 = b[32];
                b2 = b[33];
                b3 = b[34];
                b4 = b[35];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.yrel = b1 | (b2<<8) | (b3<<16) | (b4<<24);
            }
        }
        public static class SDL_MouseButtonEvent {
            public int type;
            public int timestamp;
            public int windowID;
            public int which;
            public int button;
            public int state;
            public int clicks;
            public int padding1;
            public int x;
            public int y;
            public SDL_MouseButtonEvent(byte[] b){
                int b1,b2,b3,b4;
                b1 = b[0];
                b2 = b[1];
                b3 = b[2];
                b4 = b[3];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.type = b1 | (b2<<8) | (b3<<16) | (b4<<24);
                b1 = b[4];
                b2 = b[5];
                b3 = b[6];
                b4 = b[7];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.timestamp = b1 | (b2<<8) | (b3<<16) | (b4<<24);
                b1 = b[8];
                b2 = b[9];
                b3 = b[10];
                b4 = b[11];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.windowID = b1 | (b2<<8) | (b3<<16) | (b4<<24);
                b1 = b[12];
                b2 = b[13];
                b3 = b[14];
                b4 = b[15];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.which = b1 | (b2<<8) | (b3<<16) | (b4<<24);
                this.button = b[16]; this.button &= 0xff;
                this.state = b[17]; this.state &= 0xff;
                this.clicks = b[18]; this.clicks &= 0xff;
                this.padding1 = b[19]; this.padding1 &= 0xff;
                b1 = b[20];
                b2 = b[21];
                b3 = b[22];
                b4 = b[23];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.x = b1 | (b2<<8) | (b3<<16) | (b4<<24);
                b1 = b[24];
                b2 = b[25];
                b3 = b[26];
                b4 = b[27];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.y = b1 | (b2<<8) | (b3<<16) | (b4<<24);
            }
        }
        public static class SDL_MouseWheelEvent {
            public int type;
            public int timestamp;
            public int windowID;
            public int which;
            public int x;
            public int y;
            public SDL_MouseWheelEvent(byte[] b){
                int b1,b2,b3,b4;
                b1 = b[0];
                b2 = b[1];
                b3 = b[2];
                b4 = b[3];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.type = b1 | (b2<<8) | (b3<<16) | (b4<<24);
                b1 = b[4];
                b2 = b[5];
                b3 = b[6];
                b4 = b[7];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.timestamp = b1 | (b2<<8) | (b3<<16) | (b4<<24);
                b1 = b[8];
                b2 = b[9];
                b3 = b[10];
                b4 = b[11];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.windowID = b1 | (b2<<8) | (b3<<16) | (b4<<24);
                b1 = b[12];
                b2 = b[13];
                b3 = b[14];
                b4 = b[15];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.which = b1 | (b2<<8) | (b3<<16) | (b4<<24);
                b1 = b[16];
                b2 = b[17];
                b3 = b[18];
                b4 = b[19];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.x = b1 | (b2<<8) | (b3<<16) | (b4<<24);
                b1 = b[20];
                b2 = b[21];
                b3 = b[22];
                b4 = b[23];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.y = b1 | (b2<<8) | (b3<<16) | (b4<<24);
            }
        }
        public static class SDL_JoyAxisEvent {
            public int type;
            public int timestamp;
            public int which;
            public int axis;
            public int padding1;
            public int padding2;
            public int padding3;
            public int value;
            public int padding4;
            public SDL_JoyAxisEvent(byte[] b){
                int b1,b2,b3,b4;
                b1 = b[0];
                b2 = b[1];
                b3 = b[2];
                b4 = b[3];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.type = b1 | (b2<<8) | (b3<<16) | (b4<<24);
                b1 = b[4];
                b2 = b[5];
                b3 = b[6];
                b4 = b[7];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.timestamp = b1 | (b2<<8) | (b3<<16) | (b4<<24);
                b1 = b[8];
                b2 = b[9];
                b3 = b[10];
                b4 = b[11];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.which = b1 | (b2<<8) | (b3<<16) | (b4<<24);
                this.axis = b[12]; this.axis &= 0xff;
                this.padding1 = b[13]; this.padding1 &= 0xff;
                this.padding2 = b[14]; this.padding2 &= 0xff;
                this.padding3 = b[15]; this.padding3 &= 0xff;
                b1 = b[16];
                b2 = b[17];
                b1 &= 0xff; b2 &= 0xff;
                this.value = b1 | (b2<<8);
                if( 0 != (b2 & 0x80) ) this.value |= 0xffff0000;
                b1 = b[18];
                b2 = b[19];
                b1 &= 0xff; b2 &= 0xff;
                this.padding4 = b1 | (b2<<8);
            }
        }
        public static class SDL_JoyBallEvent {
            public int type;
            public int timestamp;
            public int which;
            public int ball;
            public int padding1;
            public int padding2;
            public int padding3;
            public int xrel;
            public int yrel;
            public SDL_JoyBallEvent(byte[] b){
                int b1,b2,b3,b4;
                b1 = b[0];
                b2 = b[1];
                b3 = b[2];
                b4 = b[3];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.type = b1 | (b2<<8) | (b3<<16) | (b4<<24);
                b1 = b[4];
                b2 = b[5];
                b3 = b[6];
                b4 = b[7];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.timestamp = b1 | (b2<<8) | (b3<<16) | (b4<<24);
                b1 = b[8];
                b2 = b[9];
                b3 = b[10];
                b4 = b[11];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.which = b1 | (b2<<8) | (b3<<16) | (b4<<24);
                this.ball = b[12]; this.ball &= 0xff;
                this.padding1 = b[13]; this.padding1 &= 0xff;
                this.padding2 = b[14]; this.padding2 &= 0xff;
                this.padding3 = b[15]; this.padding3 &= 0xff;
                b1 = b[16];
                b2 = b[17];
                b1 &= 0xff; b2 &= 0xff;
                this.xrel = b1 | (b2<<8);
                if( 0 != (b2 & 0x80) ) this.xrel |= 0xffff0000;
                b1 = b[18];
                b2 = b[19];
                b1 &= 0xff; b2 &= 0xff;
                this.yrel = b1 | (b2<<8);
                if( 0 != (b2 & 0x80) ) this.yrel |= 0xffff0000;
            }
        }
        public static class SDL_JoyHatEvent {
            public int type;
            public int timestamp;
            public int which;
            public int hat;
            public int value;
            public int padding1;
            public int padding2;
            public SDL_JoyHatEvent(byte[] b){
                int b1,b2,b3,b4;
                b1 = b[0];
                b2 = b[1];
                b3 = b[2];
                b4 = b[3];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.type = b1 | (b2<<8) | (b3<<16) | (b4<<24);
                b1 = b[4];
                b2 = b[5];
                b3 = b[6];
                b4 = b[7];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.timestamp = b1 | (b2<<8) | (b3<<16) | (b4<<24);
                b1 = b[8];
                b2 = b[9];
                b3 = b[10];
                b4 = b[11];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.which = b1 | (b2<<8) | (b3<<16) | (b4<<24);
                this.hat = b[12]; this.hat &= 0xff;
                this.value = b[13]; this.value &= 0xff;
                this.padding1 = b[14]; this.padding1 &= 0xff;
                this.padding2 = b[15]; this.padding2 &= 0xff;
            }
        }
        public static class SDL_JoyButtonEvent {
            public int type;
            public int timestamp;
            public int which;
            public int button;
            public int state;
            public int padding1;
            public int padding2;
            public SDL_JoyButtonEvent(byte[] b){
                int b1,b2,b3,b4;
                b1 = b[0];
                b2 = b[1];
                b3 = b[2];
                b4 = b[3];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.type = b1 | (b2<<8) | (b3<<16) | (b4<<24);
                b1 = b[4];
                b2 = b[5];
                b3 = b[6];
                b4 = b[7];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.timestamp = b1 | (b2<<8) | (b3<<16) | (b4<<24);
                b1 = b[8];
                b2 = b[9];
                b3 = b[10];
                b4 = b[11];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.which = b1 | (b2<<8) | (b3<<16) | (b4<<24);
                this.button = b[12]; this.button &= 0xff;
                this.state = b[13]; this.state &= 0xff;
                this.padding1 = b[14]; this.padding1 &= 0xff;
                this.padding2 = b[15]; this.padding2 &= 0xff;
            }
        }
        public static class SDL_JoyDeviceEvent {
            public int type;
            public int timestamp;
            public int which;
            public SDL_JoyDeviceEvent(byte[] b){
                int b1,b2,b3,b4;
                b1 = b[0];
                b2 = b[1];
                b3 = b[2];
                b4 = b[3];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.type = b1 | (b2<<8) | (b3<<16) | (b4<<24);
                b1 = b[4];
                b2 = b[5];
                b3 = b[6];
                b4 = b[7];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.timestamp = b1 | (b2<<8) | (b3<<16) | (b4<<24);
                b1 = b[8];
                b2 = b[9];
                b3 = b[10];
                b4 = b[11];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.which = b1 | (b2<<8) | (b3<<16) | (b4<<24);
            }
        }
        public static class SDL_ControllerAxisEvent {
            public int type;
            public int timestamp;
            public int which;
            public int axis;
            public int padding1;
            public int padding2;
            public int padding3;
            public int value;
            public int padding4;
            public SDL_ControllerAxisEvent(byte[] b){
                int b1,b2,b3,b4;
                b1 = b[0];
                b2 = b[1];
                b3 = b[2];
                b4 = b[3];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.type = b1 | (b2<<8) | (b3<<16) | (b4<<24);
                b1 = b[4];
                b2 = b[5];
                b3 = b[6];
                b4 = b[7];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.timestamp = b1 | (b2<<8) | (b3<<16) | (b4<<24);
                b1 = b[8];
                b2 = b[9];
                b3 = b[10];
                b4 = b[11];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.which = b1 | (b2<<8) | (b3<<16) | (b4<<24);
                this.axis = b[12]; this.axis &= 0xff;
                this.padding1 = b[13]; this.padding1 &= 0xff;
                this.padding2 = b[14]; this.padding2 &= 0xff;
                this.padding3 = b[15]; this.padding3 &= 0xff;
                b1 = b[16];
                b2 = b[17];
                b1 &= 0xff; b2 &= 0xff;
                this.value = b1 | (b2<<8);
                if( 0 != (b2 & 0x80) ) this.value |= 0xffff0000;
                b1 = b[18];
                b2 = b[19];
                b1 &= 0xff; b2 &= 0xff;
                this.padding4 = b1 | (b2<<8);
            }
        }
        public static class SDL_ControllerButtonEvent {
            public int type;
            public int timestamp;
            public int which;
            public int button;
            public int state;
            public int padding1;
            public int padding2;
            public SDL_ControllerButtonEvent(byte[] b){
                int b1,b2,b3,b4;
                b1 = b[0];
                b2 = b[1];
                b3 = b[2];
                b4 = b[3];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.type = b1 | (b2<<8) | (b3<<16) | (b4<<24);
                b1 = b[4];
                b2 = b[5];
                b3 = b[6];
                b4 = b[7];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.timestamp = b1 | (b2<<8) | (b3<<16) | (b4<<24);
                b1 = b[8];
                b2 = b[9];
                b3 = b[10];
                b4 = b[11];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.which = b1 | (b2<<8) | (b3<<16) | (b4<<24);
                this.button = b[12]; this.button &= 0xff;
                this.state = b[13]; this.state &= 0xff;
                this.padding1 = b[14]; this.padding1 &= 0xff;
                this.padding2 = b[15]; this.padding2 &= 0xff;
            }
        }
        public static class SDL_ControllerDeviceEvent {
            public int type;
            public int timestamp;
            public int which;
            public SDL_ControllerDeviceEvent(byte[] b){
                int b1,b2,b3,b4;
                b1 = b[0];
                b2 = b[1];
                b3 = b[2];
                b4 = b[3];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.type = b1 | (b2<<8) | (b3<<16) | (b4<<24);
                b1 = b[4];
                b2 = b[5];
                b3 = b[6];
                b4 = b[7];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.timestamp = b1 | (b2<<8) | (b3<<16) | (b4<<24);
                b1 = b[8];
                b2 = b[9];
                b3 = b[10];
                b4 = b[11];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.which = b1 | (b2<<8) | (b3<<16) | (b4<<24);
            }
        }
        public static class SDL_QuitEvent {
            public int type;
            public int timestamp;
            public SDL_QuitEvent(byte[] b){
                int b1,b2,b3,b4;
                b1 = b[0];
                b2 = b[1];
                b3 = b[2];
                b4 = b[3];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.type = b1 | (b2<<8) | (b3<<16) | (b4<<24);
                b1 = b[4];
                b2 = b[5];
                b3 = b[6];
                b4 = b[7];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.timestamp = b1 | (b2<<8) | (b3<<16) | (b4<<24);
            }
        }
        public static class SDL_OSEvent {
            public int type;
            public int timestamp;
            public SDL_OSEvent(byte[] b){
                int b1,b2,b3,b4;
                b1 = b[0];
                b2 = b[1];
                b3 = b[2];
                b4 = b[3];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.type = b1 | (b2<<8) | (b3<<16) | (b4<<24);
                b1 = b[4];
                b2 = b[5];
                b3 = b[6];
                b4 = b[7];
                b1 &= 0xff; b2 &= 0xff; b3 &= 0xff; b4 &= 0xff;
                this.timestamp = b1 | (b2<<8) | (b3<<16) | (b4<<24);
            }
        }

        public static class SDL_Event {            public int type;                       /**< Event type, shared with all events */
            public SDL_CommonEvent common;         /**< Common event data */
            public SDL_WindowEvent window;         /**< Window event data */
            public SDL_KeyboardEvent key;          /**< Keyboard event data */
            //public SDL_TextEditingEvent edit;      /**< Text editing event data */
            //public SDL_TextInputEvent text;        /**< Text input event data */
            public SDL_MouseMotionEvent motion;    /**< Mouse motion event data */
            public SDL_MouseButtonEvent button;    /**< Mouse button event data */
            public SDL_MouseWheelEvent wheel;      /**< Mouse wheel event data */
            public SDL_JoyAxisEvent jaxis;         /**< Joystick axis event data */
            public SDL_JoyBallEvent jball;         /**< Joystick ball event data */
            public SDL_JoyHatEvent jhat;           /**< Joystick hat event data */
            public SDL_JoyButtonEvent jbutton;     /**< Joystick button event data */
            public SDL_JoyDeviceEvent jdevice;     /**< Joystick device change event data */
            public SDL_ControllerAxisEvent caxis;      /**< Game Controller axis event data */
            public SDL_ControllerButtonEvent cbutton;  /**< Game Controller button event data */
            public SDL_ControllerDeviceEvent cdevice;  /**< Game Controller device event data */
            public SDL_QuitEvent quit;             /**< Quit request event data */
            //SDL_UserEvent user;             /**< Custom event data */
            //SDL_SysWMEvent syswm;           /**< System dependent window event data */
            //SDL_TouchFingerEvent tfinger;   /**< Touch finger event data */
            //SDL_MultiGestureEvent mgesture; /**< Gesture event data */
            //SDL_DollarGestureEvent dgesture; /**< Gesture event data */
            //public SDL_DropEvent drop;             /**< Drag and drop event data */
            
            public void fromBytes(byte[] b){
                type = b[0] | (b[1]<<8) | (b[2]<<16) | (b[3]<<24);
                switch(type){
                    case SDL_WINDOWEVENT:
                        window = new SDL_WindowEvent(b);
                        break;
                    case SDL_KEYDOWN:
                    case SDL_KEYUP:
                    //case SDL_TEXTEDITING:
                    //case SDL_TEXTINPUT:
                        key = new SDL_KeyboardEvent(b);
                        break;
                    case SDL_MOUSEMOTION:
                        motion = new SDL_MouseMotionEvent(b);
                        break;
                    case SDL_MOUSEBUTTONDOWN:
                    case SDL_MOUSEBUTTONUP:
                        button = new SDL_MouseButtonEvent(b);
                        break;
                    case SDL_MOUSEWHEEL:
                        wheel = new SDL_MouseWheelEvent(b);
                        break;
                    case SDL_JOYAXISMOTION:
                        jaxis = new SDL_JoyAxisEvent(b);
                        break;
                    case SDL_JOYBALLMOTION:
                        jball = new SDL_JoyBallEvent(b);
                        break;
                    case SDL_JOYHATMOTION:
                        jhat = new SDL_JoyHatEvent(b);
                        break;
                    case SDL_JOYBUTTONDOWN:
                    case SDL_JOYBUTTONUP:
                        jbutton = new SDL_JoyButtonEvent(b);
                        break;
                    case SDL_JOYDEVICEADDED:
                    case SDL_JOYDEVICEREMOVED:
                        jdevice = new SDL_JoyDeviceEvent(b);
                    case SDL_CONTROLLERAXISMOTION:
                        caxis = new SDL_ControllerAxisEvent(b);
                        break;
                    case SDL_CONTROLLERBUTTONDOWN:
                    case SDL_CONTROLLERBUTTONUP:
                        cbutton = new SDL_ControllerButtonEvent(b);
                        break;
                    case SDL_CONTROLLERDEVICEADDED:
                    case SDL_CONTROLLERDEVICEREMOVED:
                    case SDL_CONTROLLERDEVICEREMAPPED:
                        cdevice = new SDL_ControllerDeviceEvent(b);
                        break;
                    case SDL_QUIT:
                        quit = new SDL_QuitEvent(b);
                        break;
                }
            }
        }
    
   
		static{
            JGLSDLUtils.JGLSDLUtils.extractAndLoad(JSDL.class,"SDL2");
            JGLSDLUtils.JGLSDLUtils.extractAndLoad(JSDL.class,"JSDL");
        }
     
        //public static native void SDL_Init(int what);
        public static long SDL_CreateWindow(String title, int x, int y, int w, int h, int flags){
            byte[] b1 = title.getBytes();
            byte[] b2 = new byte[b1.length+1];
            for(int i=0;i<b1.length;++i)
                b2[i]=b1[i];
            return my_SDL_CreateWindow(b2,x,y,w,h,flags);
        }
            
        private static native long my_SDL_CreateWindow(byte[] title, int x, int y, int w, int h, int flags);
        
        public static int SDL_PollEvent(SDL_Event ev){
            byte[] tmp = new byte[512];
            int rv = my_SDLPollEvent(tmp);
            if( rv != 0 )
                ev.fromBytes(tmp);
            return rv;
            
        }
        private static native int my_SDLPollEvent(byte[] b);
        
        public static int SDL_WaitEvent(SDL_Event ev){
            byte[] tmp = new byte[56];
            int rv = my_SDLWaitEvent(tmp);
            if( rv != 0 )
                ev.fromBytes(tmp);
            return rv;
        }
        private static native int my_SDLWaitEvent(byte[] b);

        public static int SDL_WaitEventTimeout(SDL_Event ev,int timeout){
            byte[] tmp = new byte[56];
            int rv = my_SDLWaitEventTimeout(tmp,timeout);
            if( rv != 0 )
                ev.fromBytes(tmp);
            return rv;
        }
        private static native int my_SDLWaitEventTimeout(byte[] b,int timeout);

        
        //public static native int SDL_GL_SetAttribute(int attr, int value);
        //public static native long SDL_GL_CreateContext(long win);
        //public static native void SDL_GL_SwapWindow(long win);
        //public static native int SDL_GL_MakeCurrent(long win, long ctx);
        //public static native int SDL_GL_GetAttribute(int attr, int[] value);
        
        
        
        
        
        public static int SDL_BUTTON(int y){ 
            return (1<<((y)-1));
        }
        public static int SDL_SCANCODE_TO_KEYCODE(int y){
            return y | SDLK_SCANCODE_MASK;
        }
        public static int SDL_WINDOWPOS_UNDEFINED_DISPLAY(int y){
            return y | SDL_WINDOWPOS_UNDEFINED_MASK;
        }
        public static int SDL_WINDOWPOS_CENTERED_DISPLAY(int y){
            return y | SDL_WINDOWPOS_CENTERED_MASK;
        }
        
        //dummy
        public static final int SDL_Color = 0;
        public static final int SDL_UpperBlit = 0;
        public static final int SDL_UpperBlitScaled = 0;
        
        public static native int SDL_HasClipboardText();
    public static native void SDL_ClearError();
    public static final int SDL_ENOMEM = (0) + 0;
    public static final int SDL_EFREAD = (0) + 1;
    public static final int SDL_EFWRITE = (0) + 2;
    public static final int SDL_EFSEEK = (0) + 3;
    public static final int SDL_UNSUPPORTED = (0) + 4;
    public static final int SDL_LASTERROR = (0) + 5;
    public static native int SDL_Error(int code);
    public static final int SDL_ALPHA_OPAQUE = 255;
    public static final int SDL_ALPHA_TRANSPARENT = 0;
    public static final int SDL_PIXELTYPE_UNKNOWN = (0) + 0;
    public static final int SDL_PIXELTYPE_INDEX1 = (0) + 1;
    public static final int SDL_PIXELTYPE_INDEX4 = (0) + 2;
    public static final int SDL_PIXELTYPE_INDEX8 = (0) + 3;
    public static final int SDL_PIXELTYPE_PACKED8 = (0) + 4;
    public static final int SDL_PIXELTYPE_PACKED16 = (0) + 5;
    public static final int SDL_PIXELTYPE_PACKED32 = (0) + 6;
    public static final int SDL_PIXELTYPE_ARRAYU8 = (0) + 7;
    public static final int SDL_PIXELTYPE_ARRAYU16 = (0) + 8;
    public static final int SDL_PIXELTYPE_ARRAYU32 = (0) + 9;
    public static final int SDL_PIXELTYPE_ARRAYF16 = (0) + 10;
    public static final int SDL_PIXELTYPE_ARRAYF32 = (0) + 11;
    public static final int SDL_BITMAPORDER_NONE = (0) + 0;
    public static final int SDL_BITMAPORDER_4321 = (0) + 1;
    public static final int SDL_BITMAPORDER_1234 = (0) + 2;
    public static final int SDL_PACKEDORDER_NONE = (0) + 0;
    public static final int SDL_PACKEDORDER_XRGB = (0) + 1;
    public static final int SDL_PACKEDORDER_RGBX = (0) + 2;
    public static final int SDL_PACKEDORDER_ARGB = (0) + 3;
    public static final int SDL_PACKEDORDER_RGBA = (0) + 4;
    public static final int SDL_PACKEDORDER_XBGR = (0) + 5;
    public static final int SDL_PACKEDORDER_BGRX = (0) + 6;
    public static final int SDL_PACKEDORDER_ABGR = (0) + 7;
    public static final int SDL_PACKEDORDER_BGRA = (0) + 8;
    public static final int SDL_ARRAYORDER_NONE = (0) + 0;
    public static final int SDL_ARRAYORDER_RGB = (0) + 1;
    public static final int SDL_ARRAYORDER_RGBA = (0) + 2;
    public static final int SDL_ARRAYORDER_ARGB = (0) + 3;
    public static final int SDL_ARRAYORDER_BGR = (0) + 4;
    public static final int SDL_ARRAYORDER_BGRA = (0) + 5;
    public static final int SDL_ARRAYORDER_ABGR = (0) + 6;
    public static final int SDL_PACKEDLAYOUT_NONE = (0) + 0;
    public static final int SDL_PACKEDLAYOUT_332 = (0) + 1;
    public static final int SDL_PACKEDLAYOUT_4444 = (0) + 2;
    public static final int SDL_PACKEDLAYOUT_1555 = (0) + 3;
    public static final int SDL_PACKEDLAYOUT_5551 = (0) + 4;
    public static final int SDL_PACKEDLAYOUT_565 = (0) + 5;
    public static final int SDL_PACKEDLAYOUT_8888 = (0) + 6;
    public static final int SDL_PACKEDLAYOUT_2101010 = (0) + 7;
    public static final int SDL_PACKEDLAYOUT_1010102 = (0) + 8;
    public static final int SDL_Colour = SDL_Color;
    public static native byte[] SDL_GetPixelFormatName(int format);
    public static native int SDL_PixelFormatEnumToMasks(int format,int[] bpp,int[] Rmask,int[] Gmask,int[] Bmask,int[] Amask);
    public static native int SDL_MasksToPixelFormatEnum(int bpp,int Rmask,int Gmask,int Bmask,int Amask);
    public static native long SDL_AllocFormat(int pixel_format);
    public static native void SDL_FreeFormat(long format);
    public static native long SDL_AllocPalette(int ncolors);
    public static native int SDL_SetPixelFormatPalette(long format,long palette);
    public static native int SDL_SetPaletteColors(long palette,long colors,int firstcolor,int ncolors);
    public static native void SDL_FreePalette(long palette);
    public static native int SDL_MapRGB(long format,byte r,byte g,byte b);
    public static native int SDL_MapRGBA(long format,byte r,byte g,byte b,byte a);
    public static native void SDL_GetRGB(int pixel,long format,byte[] r,byte[] g,byte[] b);
    public static native void SDL_GetRGBA(int pixel,long format,byte[] r,byte[] g,byte[] b,byte[] a);
    public static native void SDL_CalculateGammaRamp(float gamma,short[] ramp);
    public static final int SDL_BLENDMODE_NONE = (0x00000000);
    public static final int SDL_BLENDMODE_BLEND = (0x00000001);
    public static final int SDL_BLENDMODE_ADD = (0x00000002);
    public static final int SDL_BLENDMODE_MOD = (0x00000004);
    public static final int SDL_SWSURFACE = 0;
    public static final int SDL_PREALLOC = 0x00000001;
    public static final int SDL_RLEACCEL = 0x00000002;
    public static final int SDL_DONTFREE = 0x00000004;
    public static native long SDL_CreateRGBSurface(int flags,int width,int height,int depth,int Rmask,int Gmask,int Bmask,int Amask);
    public static native long SDL_CreateRGBSurfaceFrom(long pixels,int width,int height,int depth,int pitch,int Rmask,int Gmask,int Bmask,int Amask);
    public static native void SDL_FreeSurface(long surface);
    public static native int SDL_SetSurfacePalette(long surface,long palette);
    public static native int SDL_LockSurface(long surface);
    public static native void SDL_UnlockSurface(long surface);
    public static native long SDL_LoadBMP_RW(long src,int freesrc);
    public static native int SDL_SaveBMP_RW(long surface,long dst,int freedst);
    public static native int SDL_SetSurfaceRLE(long surface,int flag);
    public static native int SDL_SetColorKey(long surface,int flag,int key);
    public static native int SDL_GetColorKey(long surface,int[] key);
    public static native int SDL_SetSurfaceColorMod(long surface,byte r,byte g,byte b);
    public static native int SDL_GetSurfaceColorMod(long surface,byte[] r,byte[] g,byte[] b);
    public static native int SDL_SetSurfaceAlphaMod(long surface,byte alpha);
    public static native int SDL_GetSurfaceAlphaMod(long surface,byte[] alpha);
    public static native int SDL_SetSurfaceBlendMode(long surface,int blendMode);
    public static native int SDL_GetSurfaceBlendMode(long surface,long blendMode);
    public static native int SDL_SetClipRect(long surface,long rect);
    public static native void SDL_GetClipRect(long surface,long rect);
    public static native long SDL_ConvertSurface(long src,long fmt,int flags);
    public static native long SDL_ConvertSurfaceFormat(long src,int pixel_format,int flags);
    public static native int SDL_ConvertPixels(int width,int height,int src_format,long src,int src_pitch,int dst_format,long dst,int dst_pitch);
    public static native int SDL_FillRect(long dst,long rect,int color);
    public static native int SDL_FillRects(long dst,long rects,int count,int color);
    public static final int SDL_BlitSurface = SDL_UpperBlit;
    public static native int SDL_UpperBlit(long src,long srcrect,long dst,long dstrect);
    public static native int SDL_LowerBlit(long src,long srcrect,long dst,long dstrect);
    public static native int SDL_SoftStretch(long src,long srcrect,long dst,long dstrect);
    public static final int SDL_BlitScaled = SDL_UpperBlitScaled;
    public static native int SDL_UpperBlitScaled(long src,long srcrect,long dst,long dstrect);
    public static native int SDL_LowerBlitScaled(long src,long srcrect,long dst,long dstrect);
    public static final int SDL_WINDOW_FULLSCREEN = (0x00000001);
    public static final int SDL_WINDOW_OPENGL = (0x00000002);
    public static final int SDL_WINDOW_SHOWN = (0x00000004);
    public static final int SDL_WINDOW_HIDDEN = (0x00000008);
    public static final int SDL_WINDOW_BORDERLESS = (0x00000010);
    public static final int SDL_WINDOW_RESIZABLE = (0x00000020);
    public static final int SDL_WINDOW_MINIMIZED = (0x00000040);
    public static final int SDL_WINDOW_MAXIMIZED = (0x00000080);
    public static final int SDL_WINDOW_INPUT_GRABBED = (0x00000100);
    public static final int SDL_WINDOW_INPUT_FOCUS = (0x00000200);
    public static final int SDL_WINDOW_MOUSE_FOCUS = (0x00000400);
    public static final int SDL_WINDOW_FULLSCREEN_DESKTOP = (( SDL_WINDOW_FULLSCREEN | 0x00001000 ));
    public static final int SDL_WINDOW_FOREIGN = (0x00000800);
    public static final int SDL_WINDOW_ALLOW_HIGHDPI = (0x00002000);
    public static final int SDL_WINDOWPOS_UNDEFINED_MASK = 0x1FFF0000;
    public static final int SDL_WINDOWPOS_UNDEFINED = SDL_WINDOWPOS_UNDEFINED_DISPLAY(0);
    public static final int SDL_WINDOWPOS_CENTERED_MASK = 0x2FFF0000;
    public static final int SDL_WINDOWPOS_CENTERED = SDL_WINDOWPOS_CENTERED_DISPLAY(0);
    public static final int SDL_WINDOWEVENT_NONE = (0) + 0;
    public static final int SDL_WINDOWEVENT_SHOWN = (0) + 1;
    public static final int SDL_WINDOWEVENT_HIDDEN = (0) + 2;
    public static final int SDL_WINDOWEVENT_EXPOSED = (0) + 3;
    public static final int SDL_WINDOWEVENT_MOVED = (0) + 4;
    public static final int SDL_WINDOWEVENT_RESIZED = (0) + 5;
    public static final int SDL_WINDOWEVENT_SIZE_CHANGED = (0) + 6;
    public static final int SDL_WINDOWEVENT_MINIMIZED = (0) + 7;
    public static final int SDL_WINDOWEVENT_MAXIMIZED = (0) + 8;
    public static final int SDL_WINDOWEVENT_RESTORED = (0) + 9;
    public static final int SDL_WINDOWEVENT_ENTER = (0) + 10;
    public static final int SDL_WINDOWEVENT_LEAVE = (0) + 11;
    public static final int SDL_WINDOWEVENT_FOCUS_GAINED = (0) + 12;
    public static final int SDL_WINDOWEVENT_FOCUS_LOST = (0) + 13;
    public static final int SDL_WINDOWEVENT_CLOSE = (0) + 14;
    public static final int SDL_GL_RED_SIZE = (0) + 0;
    public static final int SDL_GL_GREEN_SIZE = (0) + 1;
    public static final int SDL_GL_BLUE_SIZE = (0) + 2;
    public static final int SDL_GL_ALPHA_SIZE = (0) + 3;
    public static final int SDL_GL_BUFFER_SIZE = (0) + 4;
    public static final int SDL_GL_DOUBLEBUFFER = (0) + 5;
    public static final int SDL_GL_DEPTH_SIZE = (0) + 6;
    public static final int SDL_GL_STENCIL_SIZE = (0) + 7;
    public static final int SDL_GL_ACCUM_RED_SIZE = (0) + 8;
    public static final int SDL_GL_ACCUM_GREEN_SIZE = (0) + 9;
    public static final int SDL_GL_ACCUM_BLUE_SIZE = (0) + 10;
    public static final int SDL_GL_ACCUM_ALPHA_SIZE = (0) + 11;
    public static final int SDL_GL_STEREO = (0) + 12;
    public static final int SDL_GL_MULTISAMPLEBUFFERS = (0) + 13;
    public static final int SDL_GL_MULTISAMPLESAMPLES = (0) + 14;
    public static final int SDL_GL_ACCELERATED_VISUAL = (0) + 15;
    public static final int SDL_GL_RETAINED_BACKING = (0) + 16;
    public static final int SDL_GL_CONTEXT_MAJOR_VERSION = (0) + 17;
    public static final int SDL_GL_CONTEXT_MINOR_VERSION = (0) + 18;
    public static final int SDL_GL_CONTEXT_EGL = (0) + 19;
    public static final int SDL_GL_CONTEXT_FLAGS = (0) + 20;
    public static final int SDL_GL_CONTEXT_PROFILE_MASK = (0) + 21;
    public static final int SDL_GL_SHARE_WITH_CURRENT_CONTEXT = (0) + 22;
    public static final int SDL_GL_FRAMEBUFFER_SRGB_CAPABLE = (0) + 23;
    public static final int SDL_GL_CONTEXT_PROFILE_CORE = (0x0001);
    public static final int SDL_GL_CONTEXT_PROFILE_COMPATIBILITY = (0x0002);
    public static final int SDL_GL_CONTEXT_PROFILE_ES = (0x0004);
    public static final int SDL_GL_CONTEXT_DEBUG_FLAG = (0x0001);
    public static final int SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG = (0x0002);
    public static final int SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG = (0x0004);
    public static final int SDL_GL_CONTEXT_RESET_ISOLATION_FLAG = (0x0008);
    public static native int SDL_GetNumVideoDrivers();
    public static native byte[] SDL_GetVideoDriver(int index);
    public static native int SDL_VideoInit(byte[] driver_name);
    public static native void SDL_VideoQuit();
    public static native byte[] SDL_GetCurrentVideoDriver();
    public static native int SDL_GetNumVideoDisplays();
    public static native byte[] SDL_GetDisplayName(int displayIndex);
    public static native int SDL_GetDisplayBounds(int displayIndex,long rect);
    public static native int SDL_GetNumDisplayModes(int displayIndex);
    public static native int SDL_GetDisplayMode(int displayIndex,int modeIndex,long mode);
    public static native int SDL_GetDesktopDisplayMode(int displayIndex,long mode);
    public static native int SDL_GetCurrentDisplayMode(int displayIndex,long mode);
    public static native long SDL_GetClosestDisplayMode(int displayIndex,long mode,long closest);
    public static native int SDL_GetWindowDisplayIndex(long window);
    public static native int SDL_SetWindowDisplayMode(long window,long mode);
    public static native int SDL_GetWindowDisplayMode(long window,long mode);
    public static native int SDL_GetWindowPixelFormat(long window);
    public static native long SDL_CreateWindow(byte[] title,int x,int y,int w,int h,int flags);
    public static native long SDL_CreateWindowFrom(long data);
    public static native int SDL_GetWindowID(long window);
    public static native long SDL_GetWindowFromID(int id);
    public static native int SDL_GetWindowFlags(long window);
    public static native void SDL_SetWindowTitle(long window,byte[] title);
    public static native byte[] SDL_GetWindowTitle(long window);
    public static native void SDL_SetWindowIcon(long window,long icon);
    public static native long SDL_SetWindowData(long window,byte[] name,long userdata);
    public static native long SDL_GetWindowData(long window,byte[] name);
    public static native void SDL_SetWindowPosition(long window,int x,int y);
    public static native void SDL_GetWindowPosition(long window,int[] x,int[] y);
    public static native void SDL_SetWindowSize(long window,int w,int h);
    public static native void SDL_GetWindowSize(long window,int[] w,int[] h);
    public static native void SDL_SetWindowMinimumSize(long window,int min_w,int min_h);
    public static native void SDL_GetWindowMinimumSize(long window,int[] w,int[] h);
    public static native void SDL_SetWindowMaximumSize(long window,int max_w,int max_h);
    public static native void SDL_GetWindowMaximumSize(long window,int[] w,int[] h);
    public static native void SDL_SetWindowBordered(long window,int bordered);
    public static native void SDL_ShowWindow(long window);
    public static native void SDL_HideWindow(long window);
    public static native void SDL_RaiseWindow(long window);
    public static native void SDL_MaximizeWindow(long window);
    public static native void SDL_MinimizeWindow(long window);
    public static native void SDL_RestoreWindow(long window);
    public static native int SDL_SetWindowFullscreen(long window,int flags);
    public static native long SDL_GetWindowSurface(long window);
    public static native int SDL_UpdateWindowSurface(long window);
    public static native int SDL_UpdateWindowSurfaceRects(long window,long rects,int numrects);
    public static native void SDL_SetWindowGrab(long window,int grabbed);
    public static native int SDL_GetWindowGrab(long window);
    public static native int SDL_SetWindowBrightness(long window,float brightness);
    public static native float SDL_GetWindowBrightness(long window);
    public static native int SDL_SetWindowGammaRamp(long window,short[] red,short[] green,short[] blue);
    public static native int SDL_GetWindowGammaRamp(long window,short[] red,short[] green,short[] blue);
    public static native void SDL_DestroyWindow(long window);
    public static native int SDL_IsScreenSaverEnabled();
    public static native void SDL_EnableScreenSaver();
    public static native void SDL_DisableScreenSaver();
    public static native int SDL_GL_LoadLibrary(byte[] path);
    public static native long SDL_GL_GetProcAddress(byte[] proc);
    public static native void SDL_GL_UnloadLibrary();
    public static native int SDL_GL_ExtensionSupported(byte[] extension);
    public static native void SDL_GL_ResetAttributes();
    public static native int SDL_GL_SetAttribute(int attr,int value);
    public static native int SDL_GL_GetAttribute(int attr,int[] value);
    public static native long SDL_GL_CreateContext(long window);
    public static native int SDL_GL_MakeCurrent(long window,long context);
    public static native long SDL_GL_GetCurrentWindow();
    public static native long SDL_GL_GetCurrentContext();
    public static native void SDL_GL_GetDrawableSize(long window,int[] w,int[] h);
    public static native int SDL_GL_SetSwapInterval(int interval);
    public static native int SDL_GL_GetSwapInterval();
    public static native void SDL_GL_SwapWindow(long window);
    public static native void SDL_GL_DeleteContext(long context);
    public static final int SDL_SCANCODE_UNKNOWN = (0);
    public static final int SDL_SCANCODE_A = (4);
    public static final int SDL_SCANCODE_B = (5);
    public static final int SDL_SCANCODE_C = (6);
    public static final int SDL_SCANCODE_D = (7);
    public static final int SDL_SCANCODE_E = (8);
    public static final int SDL_SCANCODE_F = (9);
    public static final int SDL_SCANCODE_G = (10);
    public static final int SDL_SCANCODE_H = (11);
    public static final int SDL_SCANCODE_I = (12);
    public static final int SDL_SCANCODE_J = (13);
    public static final int SDL_SCANCODE_K = (14);
    public static final int SDL_SCANCODE_L = (15);
    public static final int SDL_SCANCODE_M = (16);
    public static final int SDL_SCANCODE_N = (17);
    public static final int SDL_SCANCODE_O = (18);
    public static final int SDL_SCANCODE_P = (19);
    public static final int SDL_SCANCODE_Q = (20);
    public static final int SDL_SCANCODE_R = (21);
    public static final int SDL_SCANCODE_S = (22);
    public static final int SDL_SCANCODE_T = (23);
    public static final int SDL_SCANCODE_U = (24);
    public static final int SDL_SCANCODE_V = (25);
    public static final int SDL_SCANCODE_W = (26);
    public static final int SDL_SCANCODE_X = (27);
    public static final int SDL_SCANCODE_Y = (28);
    public static final int SDL_SCANCODE_Z = (29);
    public static final int SDL_SCANCODE_1 = (30);
    public static final int SDL_SCANCODE_2 = (31);
    public static final int SDL_SCANCODE_3 = (32);
    public static final int SDL_SCANCODE_4 = (33);
    public static final int SDL_SCANCODE_5 = (34);
    public static final int SDL_SCANCODE_6 = (35);
    public static final int SDL_SCANCODE_7 = (36);
    public static final int SDL_SCANCODE_8 = (37);
    public static final int SDL_SCANCODE_9 = (38);
    public static final int SDL_SCANCODE_0 = (39);
    public static final int SDL_SCANCODE_RETURN = (40);
    public static final int SDL_SCANCODE_ESCAPE = (41);
    public static final int SDL_SCANCODE_BACKSPACE = (42);
    public static final int SDL_SCANCODE_TAB = (43);
    public static final int SDL_SCANCODE_SPACE = (44);
    public static final int SDL_SCANCODE_MINUS = (45);
    public static final int SDL_SCANCODE_EQUALS = (46);
    public static final int SDL_SCANCODE_LEFTBRACKET = (47);
    public static final int SDL_SCANCODE_RIGHTBRACKET = (48);
    public static final int SDL_SCANCODE_BACKSLASH = (49);
    public static final int SDL_SCANCODE_NONUSHASH = (50);
    public static final int SDL_SCANCODE_SEMICOLON = (51);
    public static final int SDL_SCANCODE_APOSTROPHE = (52);
    public static final int SDL_SCANCODE_GRAVE = (53);
    public static final int SDL_SCANCODE_COMMA = (54);
    public static final int SDL_SCANCODE_PERIOD = (55);
    public static final int SDL_SCANCODE_SLASH = (56);
    public static final int SDL_SCANCODE_CAPSLOCK = (57);
    public static final int SDL_SCANCODE_F1 = (58);
    public static final int SDL_SCANCODE_F2 = (59);
    public static final int SDL_SCANCODE_F3 = (60);
    public static final int SDL_SCANCODE_F4 = (61);
    public static final int SDL_SCANCODE_F5 = (62);
    public static final int SDL_SCANCODE_F6 = (63);
    public static final int SDL_SCANCODE_F7 = (64);
    public static final int SDL_SCANCODE_F8 = (65);
    public static final int SDL_SCANCODE_F9 = (66);
    public static final int SDL_SCANCODE_F10 = (67);
    public static final int SDL_SCANCODE_F11 = (68);
    public static final int SDL_SCANCODE_F12 = (69);
    public static final int SDL_SCANCODE_PRINTSCREEN = (70);
    public static final int SDL_SCANCODE_SCROLLLOCK = (71);
    public static final int SDL_SCANCODE_PAUSE = (72);
    public static final int SDL_SCANCODE_INSERT = (73);
    public static final int SDL_SCANCODE_HOME = (74);
    public static final int SDL_SCANCODE_PAGEUP = (75);
    public static final int SDL_SCANCODE_DELETE = (76);
    public static final int SDL_SCANCODE_END = (77);
    public static final int SDL_SCANCODE_PAGEDOWN = (78);
    public static final int SDL_SCANCODE_RIGHT = (79);
    public static final int SDL_SCANCODE_LEFT = (80);
    public static final int SDL_SCANCODE_DOWN = (81);
    public static final int SDL_SCANCODE_UP = (82);
    public static final int SDL_SCANCODE_NUMLOCKCLEAR = (83);
    public static final int SDL_SCANCODE_KP_DIVIDE = (84);
    public static final int SDL_SCANCODE_KP_MULTIPLY = (85);
    public static final int SDL_SCANCODE_KP_MINUS = (86);
    public static final int SDL_SCANCODE_KP_PLUS = (87);
    public static final int SDL_SCANCODE_KP_ENTER = (88);
    public static final int SDL_SCANCODE_KP_1 = (89);
    public static final int SDL_SCANCODE_KP_2 = (90);
    public static final int SDL_SCANCODE_KP_3 = (91);
    public static final int SDL_SCANCODE_KP_4 = (92);
    public static final int SDL_SCANCODE_KP_5 = (93);
    public static final int SDL_SCANCODE_KP_6 = (94);
    public static final int SDL_SCANCODE_KP_7 = (95);
    public static final int SDL_SCANCODE_KP_8 = (96);
    public static final int SDL_SCANCODE_KP_9 = (97);
    public static final int SDL_SCANCODE_KP_0 = (98);
    public static final int SDL_SCANCODE_KP_PERIOD = (99);
    public static final int SDL_SCANCODE_NONUSBACKSLASH = (100);
    public static final int SDL_SCANCODE_APPLICATION = (101);
    public static final int SDL_SCANCODE_POWER = (102);
    public static final int SDL_SCANCODE_KP_EQUALS = (103);
    public static final int SDL_SCANCODE_F13 = (104);
    public static final int SDL_SCANCODE_F14 = (105);
    public static final int SDL_SCANCODE_F15 = (106);
    public static final int SDL_SCANCODE_F16 = (107);
    public static final int SDL_SCANCODE_F17 = (108);
    public static final int SDL_SCANCODE_F18 = (109);
    public static final int SDL_SCANCODE_F19 = (110);
    public static final int SDL_SCANCODE_F20 = (111);
    public static final int SDL_SCANCODE_F21 = (112);
    public static final int SDL_SCANCODE_F22 = (113);
    public static final int SDL_SCANCODE_F23 = (114);
    public static final int SDL_SCANCODE_F24 = (115);
    public static final int SDL_SCANCODE_EXECUTE = (116);
    public static final int SDL_SCANCODE_HELP = (117);
    public static final int SDL_SCANCODE_MENU = (118);
    public static final int SDL_SCANCODE_SELECT = (119);
    public static final int SDL_SCANCODE_STOP = (120);
    public static final int SDL_SCANCODE_AGAIN = (121);
    public static final int SDL_SCANCODE_UNDO = (122);
    public static final int SDL_SCANCODE_CUT = (123);
    public static final int SDL_SCANCODE_COPY = (124);
    public static final int SDL_SCANCODE_PASTE = (125);
    public static final int SDL_SCANCODE_FIND = (126);
    public static final int SDL_SCANCODE_MUTE = (127);
    public static final int SDL_SCANCODE_VOLUMEUP = (128);
    public static final int SDL_SCANCODE_VOLUMEDOWN = (129);
    public static final int SDL_SCANCODE_KP_COMMA = (133);
    public static final int SDL_SCANCODE_KP_EQUALSAS400 = (134);
    public static final int SDL_SCANCODE_INTERNATIONAL1 = (135);
    public static final int SDL_SCANCODE_INTERNATIONAL2 = (136);
    public static final int SDL_SCANCODE_INTERNATIONAL3 = (137);
    public static final int SDL_SCANCODE_INTERNATIONAL4 = (138);
    public static final int SDL_SCANCODE_INTERNATIONAL5 = (139);
    public static final int SDL_SCANCODE_INTERNATIONAL6 = (140);
    public static final int SDL_SCANCODE_INTERNATIONAL7 = (141);
    public static final int SDL_SCANCODE_INTERNATIONAL8 = (142);
    public static final int SDL_SCANCODE_INTERNATIONAL9 = (143);
    public static final int SDL_SCANCODE_LANG1 = (144);
    public static final int SDL_SCANCODE_LANG2 = (145);
    public static final int SDL_SCANCODE_LANG3 = (146);
    public static final int SDL_SCANCODE_LANG4 = (147);
    public static final int SDL_SCANCODE_LANG5 = (148);
    public static final int SDL_SCANCODE_LANG6 = (149);
    public static final int SDL_SCANCODE_LANG7 = (150);
    public static final int SDL_SCANCODE_LANG8 = (151);
    public static final int SDL_SCANCODE_LANG9 = (152);
    public static final int SDL_SCANCODE_ALTERASE = (153);
    public static final int SDL_SCANCODE_SYSREQ = (154);
    public static final int SDL_SCANCODE_CANCEL = (155);
    public static final int SDL_SCANCODE_CLEAR = (156);
    public static final int SDL_SCANCODE_PRIOR = (157);
    public static final int SDL_SCANCODE_RETURN2 = (158);
    public static final int SDL_SCANCODE_SEPARATOR = (159);
    public static final int SDL_SCANCODE_OUT = (160);
    public static final int SDL_SCANCODE_OPER = (161);
    public static final int SDL_SCANCODE_CLEARAGAIN = (162);
    public static final int SDL_SCANCODE_CRSEL = (163);
    public static final int SDL_SCANCODE_EXSEL = (164);
    public static final int SDL_SCANCODE_KP_00 = (176);
    public static final int SDL_SCANCODE_KP_000 = (177);
    public static final int SDL_SCANCODE_THOUSANDSSEPARATOR = (178);
    public static final int SDL_SCANCODE_DECIMALSEPARATOR = (179);
    public static final int SDL_SCANCODE_CURRENCYUNIT = (180);
    public static final int SDL_SCANCODE_CURRENCYSUBUNIT = (181);
    public static final int SDL_SCANCODE_KP_LEFTPAREN = (182);
    public static final int SDL_SCANCODE_KP_RIGHTPAREN = (183);
    public static final int SDL_SCANCODE_KP_LEFTBRACE = (184);
    public static final int SDL_SCANCODE_KP_RIGHTBRACE = (185);
    public static final int SDL_SCANCODE_KP_TAB = (186);
    public static final int SDL_SCANCODE_KP_BACKSPACE = (187);
    public static final int SDL_SCANCODE_KP_A = (188);
    public static final int SDL_SCANCODE_KP_B = (189);
    public static final int SDL_SCANCODE_KP_C = (190);
    public static final int SDL_SCANCODE_KP_D = (191);
    public static final int SDL_SCANCODE_KP_E = (192);
    public static final int SDL_SCANCODE_KP_F = (193);
    public static final int SDL_SCANCODE_KP_XOR = (194);
    public static final int SDL_SCANCODE_KP_POWER = (195);
    public static final int SDL_SCANCODE_KP_PERCENT = (196);
    public static final int SDL_SCANCODE_KP_LESS = (197);
    public static final int SDL_SCANCODE_KP_GREATER = (198);
    public static final int SDL_SCANCODE_KP_AMPERSAND = (199);
    public static final int SDL_SCANCODE_KP_DBLAMPERSAND = (200);
    public static final int SDL_SCANCODE_KP_VERTICALBAR = (201);
    public static final int SDL_SCANCODE_KP_DBLVERTICALBAR = (202);
    public static final int SDL_SCANCODE_KP_COLON = (203);
    public static final int SDL_SCANCODE_KP_HASH = (204);
    public static final int SDL_SCANCODE_KP_SPACE = (205);
    public static final int SDL_SCANCODE_KP_AT = (206);
    public static final int SDL_SCANCODE_KP_EXCLAM = (207);
    public static final int SDL_SCANCODE_KP_MEMSTORE = (208);
    public static final int SDL_SCANCODE_KP_MEMRECALL = (209);
    public static final int SDL_SCANCODE_KP_MEMCLEAR = (210);
    public static final int SDL_SCANCODE_KP_MEMADD = (211);
    public static final int SDL_SCANCODE_KP_MEMSUBTRACT = (212);
    public static final int SDL_SCANCODE_KP_MEMMULTIPLY = (213);
    public static final int SDL_SCANCODE_KP_MEMDIVIDE = (214);
    public static final int SDL_SCANCODE_KP_PLUSMINUS = (215);
    public static final int SDL_SCANCODE_KP_CLEAR = (216);
    public static final int SDL_SCANCODE_KP_CLEARENTRY = (217);
    public static final int SDL_SCANCODE_KP_BINARY = (218);
    public static final int SDL_SCANCODE_KP_OCTAL = (219);
    public static final int SDL_SCANCODE_KP_DECIMAL = (220);
    public static final int SDL_SCANCODE_KP_HEXADECIMAL = (221);
    public static final int SDL_SCANCODE_LCTRL = (224);
    public static final int SDL_SCANCODE_LSHIFT = (225);
    public static final int SDL_SCANCODE_LALT = (226);
    public static final int SDL_SCANCODE_LGUI = (227);
    public static final int SDL_SCANCODE_RCTRL = (228);
    public static final int SDL_SCANCODE_RSHIFT = (229);
    public static final int SDL_SCANCODE_RALT = (230);
    public static final int SDL_SCANCODE_RGUI = (231);
    public static final int SDL_SCANCODE_MODE = (257);
    public static final int SDL_SCANCODE_AUDIONEXT = (258);
    public static final int SDL_SCANCODE_AUDIOPREV = (259);
    public static final int SDL_SCANCODE_AUDIOSTOP = (260);
    public static final int SDL_SCANCODE_AUDIOPLAY = (261);
    public static final int SDL_SCANCODE_AUDIOMUTE = (262);
    public static final int SDL_SCANCODE_MEDIASELECT = (263);
    public static final int SDL_SCANCODE_WWW = (264);
    public static final int SDL_SCANCODE_MAIL = (265);
    public static final int SDL_SCANCODE_CALCULATOR = (266);
    public static final int SDL_SCANCODE_COMPUTER = (267);
    public static final int SDL_SCANCODE_AC_SEARCH = (268);
    public static final int SDL_SCANCODE_AC_HOME = (269);
    public static final int SDL_SCANCODE_AC_BACK = (270);
    public static final int SDL_SCANCODE_AC_FORWARD = (271);
    public static final int SDL_SCANCODE_AC_STOP = (272);
    public static final int SDL_SCANCODE_AC_REFRESH = (273);
    public static final int SDL_SCANCODE_AC_BOOKMARKS = (274);
    public static final int SDL_SCANCODE_BRIGHTNESSDOWN = (275);
    public static final int SDL_SCANCODE_BRIGHTNESSUP = (276);
    public static final int SDL_SCANCODE_DISPLAYSWITCH = (277);
    public static final int SDL_SCANCODE_KBDILLUMTOGGLE = (278);
    public static final int SDL_SCANCODE_KBDILLUMDOWN = (279);
    public static final int SDL_SCANCODE_KBDILLUMUP = (280);
    public static final int SDL_SCANCODE_EJECT = (281);
    public static final int SDL_SCANCODE_SLEEP = (282);
    public static final int SDL_SCANCODE_APP1 = (283);
    public static final int SDL_SCANCODE_APP2 = (284);
    public static final int SDL_NUM_SCANCODES = (512);
    public static final int SDLK_SCANCODE_MASK = (1<<30);
    public static final int SDLK_UNKNOWN = (0);
    public static final int SDLK_RETURN = (13);
    public static final int SDLK_ESCAPE = ('\033');
    public static final int SDLK_BACKSPACE = (8);
    public static final int SDLK_TAB = (9);
    public static final int SDLK_SPACE = (32);
    public static final int SDLK_EXCLAIM = (33);
    public static final int SDLK_QUOTEDBL = (34);
    public static final int SDLK_HASH = (35);
    public static final int SDLK_PERCENT = (37);
    public static final int SDLK_DOLLAR = (36);
    public static final int SDLK_AMPERSAND = (38);
    public static final int SDLK_QUOTE = (39);
    public static final int SDLK_LEFTPAREN = (40);
    public static final int SDLK_RIGHTPAREN = (41);
    public static final int SDLK_ASTERISK = (42);
    public static final int SDLK_PLUS = (43);
    public static final int SDLK_COMMA = (44);
    public static final int SDLK_MINUS = (45);
    public static final int SDLK_PERIOD = (46);
    public static final int SDLK_SLASH = (47);
    public static final int SDLK_0 = (48);
    public static final int SDLK_1 = (49);
    public static final int SDLK_2 = (50);
    public static final int SDLK_3 = (51);
    public static final int SDLK_4 = (52);
    public static final int SDLK_5 = (53);
    public static final int SDLK_6 = (54);
    public static final int SDLK_7 = (55);
    public static final int SDLK_8 = (56);
    public static final int SDLK_9 = (57);
    public static final int SDLK_COLON = (58);
    public static final int SDLK_SEMICOLON = (59);
    public static final int SDLK_LESS = (60);
    public static final int SDLK_EQUALS = (61);
    public static final int SDLK_GREATER = (62);
    public static final int SDLK_QUESTION = (63);
    public static final int SDLK_AT = (64);
    public static final int SDLK_LEFTBRACKET = (91);
    public static final int SDLK_BACKSLASH = (92);
    public static final int SDLK_RIGHTBRACKET = (93);
    public static final int SDLK_CARET = (94);
    public static final int SDLK_UNDERSCORE = (95);
    public static final int SDLK_BACKQUOTE = (96);
    public static final int SDLK_a = (97);
    public static final int SDLK_b = (98);
    public static final int SDLK_c = (99);
    public static final int SDLK_d = (100);
    public static final int SDLK_e = (101);
    public static final int SDLK_f = (102);
    public static final int SDLK_g = (103);
    public static final int SDLK_h = (104);
    public static final int SDLK_i = (105);
    public static final int SDLK_j = (106);
    public static final int SDLK_k = (107);
    public static final int SDLK_l = (108);
    public static final int SDLK_m = (109);
    public static final int SDLK_n = (110);
    public static final int SDLK_o = (111);
    public static final int SDLK_p = (112);
    public static final int SDLK_q = (113);
    public static final int SDLK_r = (114);
    public static final int SDLK_s = (115);
    public static final int SDLK_t = (116);
    public static final int SDLK_u = (117);
    public static final int SDLK_v = (118);
    public static final int SDLK_w = (119);
    public static final int SDLK_x = (120);
    public static final int SDLK_y = (121);
    public static final int SDLK_z = (122);
    public static final int SDLK_CAPSLOCK = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CAPSLOCK));
    public static final int SDLK_F1 = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F1));
    public static final int SDLK_F2 = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F2));
    public static final int SDLK_F3 = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F3));
    public static final int SDLK_F4 = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F4));
    public static final int SDLK_F5 = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F5));
    public static final int SDLK_F6 = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F6));
    public static final int SDLK_F7 = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F7));
    public static final int SDLK_F8 = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F8));
    public static final int SDLK_F9 = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F9));
    public static final int SDLK_F10 = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F10));
    public static final int SDLK_F11 = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F11));
    public static final int SDLK_F12 = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F12));
    public static final int SDLK_PRINTSCREEN = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PRINTSCREEN));
    public static final int SDLK_SCROLLLOCK = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SCROLLLOCK));
    public static final int SDLK_PAUSE = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PAUSE));
    public static final int SDLK_INSERT = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_INSERT));
    public static final int SDLK_HOME = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_HOME));
    public static final int SDLK_PAGEUP = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PAGEUP));
    public static final int SDLK_DELETE = ('\177');
    public static final int SDLK_END = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_END));
    public static final int SDLK_PAGEDOWN = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PAGEDOWN));
    public static final int SDLK_RIGHT = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RIGHT));
    public static final int SDLK_LEFT = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LEFT));
    public static final int SDLK_DOWN = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_DOWN));
    public static final int SDLK_UP = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_UP));
    public static final int SDLK_NUMLOCKCLEAR = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_NUMLOCKCLEAR));
    public static final int SDLK_KP_DIVIDE = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_DIVIDE));
    public static final int SDLK_KP_MULTIPLY = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MULTIPLY));
    public static final int SDLK_KP_MINUS = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MINUS));
    public static final int SDLK_KP_PLUS = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_PLUS));
    public static final int SDLK_KP_ENTER = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_ENTER));
    public static final int SDLK_KP_1 = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_1));
    public static final int SDLK_KP_2 = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_2));
    public static final int SDLK_KP_3 = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_3));
    public static final int SDLK_KP_4 = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_4));
    public static final int SDLK_KP_5 = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_5));
    public static final int SDLK_KP_6 = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_6));
    public static final int SDLK_KP_7 = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_7));
    public static final int SDLK_KP_8 = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_8));
    public static final int SDLK_KP_9 = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_9));
    public static final int SDLK_KP_0 = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_0));
    public static final int SDLK_KP_PERIOD = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_PERIOD));
    public static final int SDLK_APPLICATION = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_APPLICATION));
    public static final int SDLK_POWER = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_POWER));
    public static final int SDLK_KP_EQUALS = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_EQUALS));
    public static final int SDLK_F13 = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F13));
    public static final int SDLK_F14 = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F14));
    public static final int SDLK_F15 = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F15));
    public static final int SDLK_F16 = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F16));
    public static final int SDLK_F17 = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F17));
    public static final int SDLK_F18 = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F18));
    public static final int SDLK_F19 = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F19));
    public static final int SDLK_F20 = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F20));
    public static final int SDLK_F21 = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F21));
    public static final int SDLK_F22 = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F22));
    public static final int SDLK_F23 = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F23));
    public static final int SDLK_F24 = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F24));
    public static final int SDLK_EXECUTE = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_EXECUTE));
    public static final int SDLK_HELP = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_HELP));
    public static final int SDLK_MENU = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MENU));
    public static final int SDLK_SELECT = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SELECT));
    public static final int SDLK_STOP = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_STOP));
    public static final int SDLK_AGAIN = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AGAIN));
    public static final int SDLK_UNDO = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_UNDO));
    public static final int SDLK_CUT = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CUT));
    public static final int SDLK_COPY = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_COPY));
    public static final int SDLK_PASTE = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PASTE));
    public static final int SDLK_FIND = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_FIND));
    public static final int SDLK_MUTE = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MUTE));
    public static final int SDLK_VOLUMEUP = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_VOLUMEUP));
    public static final int SDLK_VOLUMEDOWN = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_VOLUMEDOWN));
    public static final int SDLK_KP_COMMA = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_COMMA));
    public static final int SDLK_KP_EQUALSAS400 = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_EQUALSAS400));
    public static final int SDLK_ALTERASE = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_ALTERASE));
    public static final int SDLK_SYSREQ = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SYSREQ));
    public static final int SDLK_CANCEL = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CANCEL));
    public static final int SDLK_CLEAR = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CLEAR));
    public static final int SDLK_PRIOR = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PRIOR));
    public static final int SDLK_RETURN2 = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RETURN2));
    public static final int SDLK_SEPARATOR = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SEPARATOR));
    public static final int SDLK_OUT = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_OUT));
    public static final int SDLK_OPER = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_OPER));
    public static final int SDLK_CLEARAGAIN = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CLEARAGAIN));
    public static final int SDLK_CRSEL = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CRSEL));
    public static final int SDLK_EXSEL = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_EXSEL));
    public static final int SDLK_KP_00 = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_00));
    public static final int SDLK_KP_000 = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_000));
    public static final int SDLK_THOUSANDSSEPARATOR = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_THOUSANDSSEPARATOR));
    public static final int SDLK_DECIMALSEPARATOR = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_DECIMALSEPARATOR));
    public static final int SDLK_CURRENCYUNIT = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CURRENCYUNIT));
    public static final int SDLK_CURRENCYSUBUNIT = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CURRENCYSUBUNIT));
    public static final int SDLK_KP_LEFTPAREN = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_LEFTPAREN));
    public static final int SDLK_KP_RIGHTPAREN = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_RIGHTPAREN));
    public static final int SDLK_KP_LEFTBRACE = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_LEFTBRACE));
    public static final int SDLK_KP_RIGHTBRACE = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_RIGHTBRACE));
    public static final int SDLK_KP_TAB = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_TAB));
    public static final int SDLK_KP_BACKSPACE = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_BACKSPACE));
    public static final int SDLK_KP_A = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_A));
    public static final int SDLK_KP_B = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_B));
    public static final int SDLK_KP_C = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_C));
    public static final int SDLK_KP_D = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_D));
    public static final int SDLK_KP_E = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_E));
    public static final int SDLK_KP_F = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_F));
    public static final int SDLK_KP_XOR = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_XOR));
    public static final int SDLK_KP_POWER = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_POWER));
    public static final int SDLK_KP_PERCENT = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_PERCENT));
    public static final int SDLK_KP_LESS = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_LESS));
    public static final int SDLK_KP_GREATER = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_GREATER));
    public static final int SDLK_KP_AMPERSAND = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_AMPERSAND));
    public static final int SDLK_KP_DBLAMPERSAND = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_DBLAMPERSAND));
    public static final int SDLK_KP_VERTICALBAR = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_VERTICALBAR));
    public static final int SDLK_KP_DBLVERTICALBAR = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_DBLVERTICALBAR));
    public static final int SDLK_KP_COLON = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_COLON));
    public static final int SDLK_KP_HASH = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_HASH));
    public static final int SDLK_KP_SPACE = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_SPACE));
    public static final int SDLK_KP_AT = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_AT));
    public static final int SDLK_KP_EXCLAM = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_EXCLAM));
    public static final int SDLK_KP_MEMSTORE = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMSTORE));
    public static final int SDLK_KP_MEMRECALL = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMRECALL));
    public static final int SDLK_KP_MEMCLEAR = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMCLEAR));
    public static final int SDLK_KP_MEMADD = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMADD));
    public static final int SDLK_KP_MEMSUBTRACT = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMSUBTRACT));
    public static final int SDLK_KP_MEMMULTIPLY = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMMULTIPLY));
    public static final int SDLK_KP_MEMDIVIDE = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMDIVIDE));
    public static final int SDLK_KP_PLUSMINUS = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_PLUSMINUS));
    public static final int SDLK_KP_CLEAR = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_CLEAR));
    public static final int SDLK_KP_CLEARENTRY = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_CLEARENTRY));
    public static final int SDLK_KP_BINARY = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_BINARY));
    public static final int SDLK_KP_OCTAL = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_OCTAL));
    public static final int SDLK_KP_DECIMAL = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_DECIMAL));
    public static final int SDLK_KP_HEXADECIMAL = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_HEXADECIMAL));
    public static final int SDLK_LCTRL = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LCTRL));
    public static final int SDLK_LSHIFT = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LSHIFT));
    public static final int SDLK_LALT = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LALT));
    public static final int SDLK_LGUI = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LGUI));
    public static final int SDLK_RCTRL = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RCTRL));
    public static final int SDLK_RSHIFT = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RSHIFT));
    public static final int SDLK_RALT = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RALT));
    public static final int SDLK_RGUI = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RGUI));
    public static final int SDLK_MODE = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MODE));
    public static final int SDLK_AUDIONEXT = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AUDIONEXT));
    public static final int SDLK_AUDIOPREV = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AUDIOPREV));
    public static final int SDLK_AUDIOSTOP = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AUDIOSTOP));
    public static final int SDLK_AUDIOPLAY = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AUDIOPLAY));
    public static final int SDLK_AUDIOMUTE = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AUDIOMUTE));
    public static final int SDLK_MEDIASELECT = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MEDIASELECT));
    public static final int SDLK_WWW = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_WWW));
    public static final int SDLK_MAIL = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MAIL));
    public static final int SDLK_CALCULATOR = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CALCULATOR));
    public static final int SDLK_COMPUTER = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_COMPUTER));
    public static final int SDLK_AC_SEARCH = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_SEARCH));
    public static final int SDLK_AC_HOME = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_HOME));
    public static final int SDLK_AC_BACK = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_BACK));
    public static final int SDLK_AC_FORWARD = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_FORWARD));
    public static final int SDLK_AC_STOP = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_STOP));
    public static final int SDLK_AC_REFRESH = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_REFRESH));
    public static final int SDLK_AC_BOOKMARKS = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_BOOKMARKS));
    public static final int SDLK_BRIGHTNESSDOWN = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_BRIGHTNESSDOWN));
    public static final int SDLK_BRIGHTNESSUP = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_BRIGHTNESSUP));
    public static final int SDLK_DISPLAYSWITCH = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_DISPLAYSWITCH));
    public static final int SDLK_KBDILLUMTOGGLE = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KBDILLUMTOGGLE));
    public static final int SDLK_KBDILLUMDOWN = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KBDILLUMDOWN));
    public static final int SDLK_KBDILLUMUP = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KBDILLUMUP));
    public static final int SDLK_EJECT = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_EJECT));
    public static final int SDLK_SLEEP = (SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SLEEP));
    public static final int KMOD_NONE = (0x0000);
    public static final int KMOD_LSHIFT = (0x0001);
    public static final int KMOD_RSHIFT = (0x0002);
    public static final int KMOD_LCTRL = (0x0040);
    public static final int KMOD_RCTRL = (0x0080);
    public static final int KMOD_LALT = (0x0100);
    public static final int KMOD_RALT = (0x0200);
    public static final int KMOD_LGUI = (0x0400);
    public static final int KMOD_RGUI = (0x0800);
    public static final int KMOD_NUM = (0x1000);
    public static final int KMOD_CAPS = (0x2000);
    public static final int KMOD_MODE = (0x4000);
    public static final int KMOD_RESERVED = (0x8000);
    public static final int KMOD_CTRL = (KMOD_LCTRL|KMOD_RCTRL);
    public static final int KMOD_SHIFT = (KMOD_LSHIFT|KMOD_RSHIFT);
    public static final int KMOD_ALT = (KMOD_LALT|KMOD_RALT);
    public static final int KMOD_GUI = (KMOD_LGUI|KMOD_RGUI);
    public static native long SDL_GetKeyboardFocus();
    public static native int SDL_GetModState();
    public static native void SDL_SetModState(int modstate);
    public static native int SDL_GetKeyFromScancode(int scancode);
    public static native int SDL_GetScancodeFromKey(int key);
    public static native byte[] SDL_GetScancodeName(int scancode);
    public static native int SDL_GetScancodeFromName(byte[] name);
    public static native byte[] SDL_GetKeyName(int key);
    public static native int SDL_GetKeyFromName(byte[] name);
    public static native void SDL_StartTextInput();
    public static native int SDL_IsTextInputActive();
    public static native void SDL_StopTextInput();
    public static native void SDL_SetTextInputRect(long rect);
    public static native int SDL_HasScreenKeyboardSupport();
    public static native int SDL_IsScreenKeyboardShown(long window);
    public static final int SDL_SYSTEM_CURSOR_ARROW = (0) + 0;
    public static final int SDL_SYSTEM_CURSOR_IBEAM = (0) + 1;
    public static final int SDL_SYSTEM_CURSOR_WAIT = (0) + 2;
    public static final int SDL_SYSTEM_CURSOR_CROSSHAIR = (0) + 3;
    public static final int SDL_SYSTEM_CURSOR_WAITARROW = (0) + 4;
    public static final int SDL_SYSTEM_CURSOR_SIZENWSE = (0) + 5;
    public static final int SDL_SYSTEM_CURSOR_SIZENESW = (0) + 6;
    public static final int SDL_SYSTEM_CURSOR_SIZEWE = (0) + 7;
    public static final int SDL_SYSTEM_CURSOR_SIZENS = (0) + 8;
    public static final int SDL_SYSTEM_CURSOR_SIZEALL = (0) + 9;
    public static final int SDL_SYSTEM_CURSOR_NO = (0) + 10;
    public static final int SDL_SYSTEM_CURSOR_HAND = (0) + 11;
    public static final int SDL_NUM_SYSTEM_CURSORS = (0) + 12;
    public static native long SDL_GetMouseFocus();
    public static native int SDL_GetMouseState(int[] x,int[] y);
    public static native int SDL_GetRelativeMouseState(int[] x,int[] y);
    public static native void SDL_WarpMouseInWindow(long window,int x,int y);
    public static native int SDL_SetRelativeMouseMode(int enabled);
    public static native int SDL_GetRelativeMouseMode();
    public static native long SDL_CreateCursor(byte[] data,byte[] mask,int w,int h,int hot_x,int hot_y);
    public static native long SDL_CreateColorCursor(long surface,int hot_x,int hot_y);
    public static native long SDL_CreateSystemCursor(int id);
    public static native void SDL_SetCursor(long cursor);
    public static native long SDL_GetCursor();
    public static native long SDL_GetDefaultCursor();
    public static native void SDL_FreeCursor(long cursor);
    public static native int SDL_ShowCursor(int toggle);
    public static final int SDL_BUTTON_LEFT = 1;
    public static final int SDL_BUTTON_MIDDLE = 2;
    public static final int SDL_BUTTON_RIGHT = 3;
    public static final int SDL_BUTTON_X1 = 4;
    public static final int SDL_BUTTON_X2 = 5;
    public static final int SDL_BUTTON_LMASK = SDL_BUTTON(SDL_BUTTON_LEFT);
    public static final int SDL_BUTTON_MMASK = SDL_BUTTON(SDL_BUTTON_MIDDLE);
    public static final int SDL_BUTTON_RMASK = SDL_BUTTON(SDL_BUTTON_RIGHT);
    public static final int SDL_BUTTON_X1MASK = SDL_BUTTON(SDL_BUTTON_X1);
    public static final int SDL_BUTTON_X2MASK = SDL_BUTTON(SDL_BUTTON_X2);
    public static native int SDL_NumJoysticks();
    public static native byte[] SDL_JoystickNameForIndex(int device_index);
    public static native long SDL_JoystickOpen(int device_index);
    public static native byte[] SDL_JoystickName(long joystick);
    public static native int SDL_JoystickGetAttached(long joystick);
    public static native int SDL_JoystickInstanceID(long joystick);
    public static native int SDL_JoystickNumAxes(long joystick);
    public static native int SDL_JoystickNumBalls(long joystick);
    public static native int SDL_JoystickNumHats(long joystick);
    public static native int SDL_JoystickNumButtons(long joystick);
    public static native void SDL_JoystickUpdate();
    public static native int SDL_JoystickEventState(int state);
    public static native short SDL_JoystickGetAxis(long joystick,int axis);
    public static final int SDL_HAT_CENTERED = 0x00;
    public static final int SDL_HAT_UP = 0x01;
    public static final int SDL_HAT_RIGHT = 0x02;
    public static final int SDL_HAT_DOWN = 0x04;
    public static final int SDL_HAT_LEFT = 0x08;
    public static final int SDL_HAT_RIGHTUP = (SDL_HAT_RIGHT|SDL_HAT_UP);
    public static final int SDL_HAT_RIGHTDOWN = (SDL_HAT_RIGHT|SDL_HAT_DOWN);
    public static final int SDL_HAT_LEFTUP = (SDL_HAT_LEFT|SDL_HAT_UP);
    public static final int SDL_HAT_LEFTDOWN = (SDL_HAT_LEFT|SDL_HAT_DOWN);
    public static native byte SDL_JoystickGetHat(long joystick,int hat);
    public static native int SDL_JoystickGetBall(long joystick,int ball,int[] dx,int[] dy);
    public static native byte SDL_JoystickGetButton(long joystick,int button);
    public static native void SDL_JoystickClose(long joystick);
    public static final int SDL_CONTROLLER_BINDTYPE_NONE = (0);
    public static final int SDL_CONTROLLER_BINDTYPE_BUTTON = (0) + 1;
    public static final int SDL_CONTROLLER_BINDTYPE_AXIS = (0) + 2;
    public static final int SDL_CONTROLLER_BINDTYPE_HAT = (0) + 3;
    public static native int SDL_GameControllerAddMappingsFromRW(long rw,int freerw);
    public static native int SDL_GameControllerAddMapping(byte[] mappingString);
    public static native byte[] SDL_GameControllerMapping(long gamecontroller);
    public static native int SDL_IsGameController(int joystick_index);
    public static native byte[] SDL_GameControllerNameForIndex(int joystick_index);
    public static native long SDL_GameControllerOpen(int joystick_index);
    public static native byte[] SDL_GameControllerName(long gamecontroller);
    public static native int SDL_GameControllerGetAttached(long gamecontroller);
    public static native long SDL_GameControllerGetJoystick(long gamecontroller);
    public static native int SDL_GameControllerEventState(int state);
    public static native void SDL_GameControllerUpdate();
    public static final int SDL_CONTROLLER_AXIS_INVALID = (-1);
    public static final int SDL_CONTROLLER_AXIS_LEFTX = (-1) + 1;
    public static final int SDL_CONTROLLER_AXIS_LEFTY = (-1) + 2;
    public static final int SDL_CONTROLLER_AXIS_RIGHTX = (-1) + 3;
    public static final int SDL_CONTROLLER_AXIS_RIGHTY = (-1) + 4;
    public static final int SDL_CONTROLLER_AXIS_TRIGGERLEFT = (-1) + 5;
    public static final int SDL_CONTROLLER_AXIS_TRIGGERRIGHT = (-1) + 6;
    public static final int SDL_CONTROLLER_AXIS_MAX = (-1) + 7;
    public static native int SDL_GameControllerGetAxisFromString(byte[] pchString);
    public static native byte[] SDL_GameControllerGetStringForAxis(int axis);
    public static native short SDL_GameControllerGetAxis(long gamecontroller,int axis);
    public static final int SDL_CONTROLLER_BUTTON_INVALID = (-1);
    public static final int SDL_CONTROLLER_BUTTON_A = (-1) + 1;
    public static final int SDL_CONTROLLER_BUTTON_B = (-1) + 2;
    public static final int SDL_CONTROLLER_BUTTON_X = (-1) + 3;
    public static final int SDL_CONTROLLER_BUTTON_Y = (-1) + 4;
    public static final int SDL_CONTROLLER_BUTTON_BACK = (-1) + 5;
    public static final int SDL_CONTROLLER_BUTTON_GUIDE = (-1) + 6;
    public static final int SDL_CONTROLLER_BUTTON_START = (-1) + 7;
    public static final int SDL_CONTROLLER_BUTTON_LEFTSTICK = (-1) + 8;
    public static final int SDL_CONTROLLER_BUTTON_RIGHTSTICK = (-1) + 9;
    public static final int SDL_CONTROLLER_BUTTON_LEFTSHOULDER = (-1) + 10;
    public static final int SDL_CONTROLLER_BUTTON_RIGHTSHOULDER = (-1) + 11;
    public static final int SDL_CONTROLLER_BUTTON_DPAD_UP = (-1) + 12;
    public static final int SDL_CONTROLLER_BUTTON_DPAD_DOWN = (-1) + 13;
    public static final int SDL_CONTROLLER_BUTTON_DPAD_LEFT = (-1) + 14;
    public static final int SDL_CONTROLLER_BUTTON_DPAD_RIGHT = (-1) + 15;
    public static final int SDL_CONTROLLER_BUTTON_MAX = (-1) + 16;
    public static native int SDL_GameControllerGetButtonFromString(byte[] pchString);
    public static native byte[] SDL_GameControllerGetStringForButton(int button);
    public static native byte SDL_GameControllerGetButton(long gamecontroller,int button);
    public static native void SDL_GameControllerClose(long gamecontroller);
    public static final int SDL_TOUCH_MOUSEID = -1;
    public static native int SDL_GetNumTouchDevices();
    public static native long SDL_GetTouchDevice(int index);
    public static native int SDL_GetNumTouchFingers(long touchID);
    public static native long SDL_GetTouchFinger(long touchID,int index);
    public static native int SDL_RecordGesture(long touchId);
    public static native int SDL_SaveAllDollarTemplates(long dst);
    public static native int SDL_SaveDollarTemplate(long gestureId,long dst);
    public static native int SDL_LoadDollarTemplates(long touchId,long src);
    public static final int SDL_RELEASED = 0;
    public static final int SDL_PRESSED = 1;
    public static final int SDL_FIRSTEVENT = (0);
    public static final int SDL_QUIT = (0x100);
    public static final int SDL_APP_TERMINATING = (0x100) + 1;
    public static final int SDL_APP_LOWMEMORY = (0x100) + 2;
    public static final int SDL_APP_WILLENTERBACKGROUND = (0x100) + 3;
    public static final int SDL_APP_DIDENTERBACKGROUND = (0x100) + 4;
    public static final int SDL_APP_WILLENTERFOREGROUND = (0x100) + 5;
    public static final int SDL_APP_DIDENTERFOREGROUND = (0x100) + 6;
    public static final int SDL_WINDOWEVENT = (0x200);
    public static final int SDL_SYSWMEVENT = (0x200) + 1;
    public static final int SDL_KEYDOWN = (0x300);
    public static final int SDL_KEYUP = (0x300) + 1;
    public static final int SDL_TEXTEDITING = (0x300) + 2;
    public static final int SDL_TEXTINPUT = (0x300) + 3;
    public static final int SDL_MOUSEMOTION = (0x400);
    public static final int SDL_MOUSEBUTTONDOWN = (0x400) + 1;
    public static final int SDL_MOUSEBUTTONUP = (0x400) + 2;
    public static final int SDL_MOUSEWHEEL = (0x400) + 3;
    public static final int SDL_JOYAXISMOTION = (0x600);
    public static final int SDL_JOYBALLMOTION = (0x600) + 1;
    public static final int SDL_JOYHATMOTION = (0x600) + 2;
    public static final int SDL_JOYBUTTONDOWN = (0x600) + 3;
    public static final int SDL_JOYBUTTONUP = (0x600) + 4;
    public static final int SDL_JOYDEVICEADDED = (0x600) + 5;
    public static final int SDL_JOYDEVICEREMOVED = (0x600) + 6;
    public static final int SDL_CONTROLLERAXISMOTION = (0x650);
    public static final int SDL_CONTROLLERBUTTONDOWN = (0x650) + 1;
    public static final int SDL_CONTROLLERBUTTONUP = (0x650) + 2;
    public static final int SDL_CONTROLLERDEVICEADDED = (0x650) + 3;
    public static final int SDL_CONTROLLERDEVICEREMOVED = (0x650) + 4;
    public static final int SDL_CONTROLLERDEVICEREMAPPED = (0x650) + 5;
    public static final int SDL_FINGERDOWN = (0x700);
    public static final int SDL_FINGERUP = (0x700) + 1;
    public static final int SDL_FINGERMOTION = (0x700) + 2;
    public static final int SDL_DOLLARGESTURE = (0x800);
    public static final int SDL_DOLLARRECORD = (0x800) + 1;
    public static final int SDL_MULTIGESTURE = (0x800) + 2;
    public static final int SDL_CLIPBOARDUPDATE = (0x900);
    public static final int SDL_DROPFILE = (0x1000);
    public static final int SDL_RENDER_TARGETS_RESET = (0x2000);
    public static final int SDL_USEREVENT = (0x8000);
    public static final int SDL_LASTEVENT = (0xFFFF);
    public static final int SDL_TEXTEDITINGEVENT_TEXT_SIZE = (32);
    public static final int SDL_TEXTINPUTEVENT_TEXT_SIZE = (32);
    public static native void SDL_PumpEvents();
    public static final int SDL_ADDEVENT = (0) + 0;
    public static final int SDL_PEEKEVENT = (0) + 1;
    public static final int SDL_GETEVENT = (0) + 2;
    public static native int SDL_PeepEvents(long events,int numevents,int action,int minType,int maxType);
    public static native int SDL_HasEvent(int type);
    public static native int SDL_HasEvents(int minType,int maxType);
    public static native void SDL_FlushEvent(int type);
    public static native void SDL_FlushEvents(int minType,int maxType);
    public static native int SDL_WaitEventTimeout(long event,int timeout);
    public static native int SDL_PushEvent(long event);
    public static final int SDL_QUERY = -1;
    public static final int SDL_IGNORE = 0;
    public static final int SDL_DISABLE = 0;
    public static final int SDL_ENABLE = 1;
    public static native byte SDL_EventState(int type,int state);
    public static native int SDL_RegisterEvents(int numevents);
    public static native byte[] SDL_GetBasePath();
    public static native byte[] SDL_GetPrefPath(byte[] org,byte[] app);
    public static final int SDL_HAPTIC_CONSTANT = (1<<0);
    public static final int SDL_HAPTIC_SINE = (1<<1);
    public static final int SDL_HAPTIC_LEFTRIGHT = (1<<2);
    public static final int SDL_HAPTIC_TRIANGLE = (1<<3);
    public static final int SDL_HAPTIC_SAWTOOTHUP = (1<<4);
    public static final int SDL_HAPTIC_SAWTOOTHDOWN = (1<<5);
    public static final int SDL_HAPTIC_RAMP = (1<<6);
    public static final int SDL_HAPTIC_SPRING = (1<<7);
    public static final int SDL_HAPTIC_DAMPER = (1<<8);
    public static final int SDL_HAPTIC_INERTIA = (1<<9);
    public static final int SDL_HAPTIC_FRICTION = (1<<10);
    public static final int SDL_HAPTIC_CUSTOM = (1<<11);
    public static final int SDL_HAPTIC_GAIN = (1<<12);
    public static final int SDL_HAPTIC_AUTOCENTER = (1<<13);
    public static final int SDL_HAPTIC_STATUS = (1<<14);
    public static final int SDL_HAPTIC_PAUSE = (1<<15);
    public static final int SDL_HAPTIC_POLAR = 0;
    public static final int SDL_HAPTIC_CARTESIAN = 1;
    public static final int SDL_HAPTIC_SPHERICAL = 2;
    public static final int SDL_HAPTIC_INFINITY = -1;
    public static native int SDL_NumHaptics();
    public static native byte[] SDL_HapticName(int device_index);
    public static native long SDL_HapticOpen(int device_index);
    public static native int SDL_HapticOpened(int device_index);
    public static native int SDL_HapticIndex(long haptic);
    public static native int SDL_MouseIsHaptic();
    public static native long SDL_HapticOpenFromMouse();
    public static native int SDL_JoystickIsHaptic(long joystick);
    public static native long SDL_HapticOpenFromJoystick(long joystick);
    public static native void SDL_HapticClose(long haptic);
    public static native int SDL_HapticNumEffects(long haptic);
    public static native int SDL_HapticNumEffectsPlaying(long haptic);
    public static native int SDL_HapticQuery(long haptic);
    public static native int SDL_HapticNumAxes(long haptic);
    public static native int SDL_HapticEffectSupported(long haptic,long effect);
    public static native int SDL_HapticNewEffect(long haptic,long effect);
    public static native int SDL_HapticUpdateEffect(long haptic,int effect,long data);
    public static native int SDL_HapticRunEffect(long haptic,int effect,int iterations);
    public static native int SDL_HapticStopEffect(long haptic,int effect);
    public static native void SDL_HapticDestroyEffect(long haptic,int effect);
    public static native int SDL_HapticGetEffectStatus(long haptic,int effect);
    public static native int SDL_HapticSetGain(long haptic,int gain);
    public static native int SDL_HapticSetAutocenter(long haptic,int autocenter);
    public static native int SDL_HapticPause(long haptic);
    public static native int SDL_HapticUnpause(long haptic);
    public static native int SDL_HapticStopAll(long haptic);
    public static native int SDL_HapticRumbleSupported(long haptic);
    public static native int SDL_HapticRumbleInit(long haptic);
    public static native int SDL_HapticRumblePlay(long haptic,float strength,int length);
    public static native int SDL_HapticRumbleStop(long haptic);
    public static final String SDL_HINT_FRAMEBUFFER_ACCELERATION = "SDL_FRAMEBUFFER_ACCELERATION";
    public static final String SDL_HINT_RENDER_DRIVER = "SDL_RENDER_DRIVER";
    public static final String SDL_HINT_RENDER_OPENGL_SHADERS = "SDL_RENDER_OPENGL_SHADERS";
    public static final String SDL_HINT_RENDER_DIRECT3D_THREADSAFE = "SDL_RENDER_DIRECT3D_THREADSAFE";
    public static final String SDL_HINT_RENDER_DIRECT3D11_DEBUG = "SDL_HINT_RENDER_DIRECT3D11_DEBUG";
    public static final String SDL_HINT_RENDER_SCALE_QUALITY = "SDL_RENDER_SCALE_QUALITY";
    public static final String SDL_HINT_RENDER_VSYNC = "SDL_RENDER_VSYNC";
    public static final String SDL_HINT_VIDEO_ALLOW_SCREENSAVER = "SDL_VIDEO_ALLOW_SCREENSAVER";
    public static final String SDL_HINT_VIDEO_X11_XVIDMODE = "SDL_VIDEO_X11_XVIDMODE";
    public static final String SDL_HINT_VIDEO_X11_XINERAMA = "SDL_VIDEO_X11_XINERAMA";
    public static final String SDL_HINT_VIDEO_X11_XRANDR = "SDL_VIDEO_X11_XRANDR";
    public static final String SDL_HINT_GRAB_KEYBOARD = "SDL_GRAB_KEYBOARD";
    public static final String SDL_HINT_MOUSE_RELATIVE_MODE_WARP = "SDL_MOUSE_RELATIVE_MODE_WARP";
    public static final String SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS = "SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS";
    public static final String SDL_HINT_IDLE_TIMER_DISABLED = "SDL_IOS_IDLE_TIMER_DISABLED";
    public static final String SDL_HINT_ORIENTATIONS = "SDL_IOS_ORIENTATIONS";
    public static final String SDL_HINT_ACCELEROMETER_AS_JOYSTICK = "SDL_ACCELEROMETER_AS_JOYSTICK";
    public static final String SDL_HINT_XINPUT_ENABLED = "SDL_XINPUT_ENABLED";
    public static final String SDL_HINT_GAMECONTROLLERCONFIG = "SDL_GAMECONTROLLERCONFIG";
    public static final String SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS = "SDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS";
    public static final String SDL_HINT_ALLOW_TOPMOST = "SDL_ALLOW_TOPMOST";
    public static final String SDL_HINT_TIMER_RESOLUTION = "SDL_TIMER_RESOLUTION";
    public static final String SDL_HINT_VIDEO_HIGHDPI_DISABLED = "SDL_VIDEO_HIGHDPI_DISABLED";
    public static final String SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK = "SDL_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK";
    public static final String SDL_HINT_VIDEO_WIN_D3DCOMPILER = "SDL_VIDEO_WIN_D3DCOMPILER";
    public static final String SDL_HINT_VIDEO_WINDOW_SHARE_PIXEL_FORMAT = "SDL_VIDEO_WINDOW_SHARE_PIXEL_FORMAT";
    public static final String SDL_HINT_WINRT_PRIVACY_POLICY_URL = "SDL_HINT_WINRT_PRIVACY_POLICY_URL";
    public static final String SDL_HINT_WINRT_PRIVACY_POLICY_LABEL = "SDL_HINT_WINRT_PRIVACY_POLICY_LABEL";
    public static final String SDL_HINT_WINRT_HANDLE_BACK_BUTTON = "SDL_HINT_WINRT_HANDLE_BACK_BUTTON";
    public static final String SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES = "SDL_VIDEO_MAC_FULLSCREEN_SPACES";
    public static final int SDL_HINT_DEFAULT = (0) + 0;
    public static final int SDL_HINT_NORMAL = (0) + 1;
    public static final int SDL_HINT_OVERRIDE = (0) + 2;
    public static native int SDL_SetHintWithPriority(byte[] name,byte[] value,int priority);
    public static native int SDL_SetHint(byte[] name,byte[] value);
    public static native byte[] SDL_GetHint(byte[] name);
    public static native void SDL_ClearHints();
    public static native long SDL_LoadObject(byte[] sofile);
    public static native long SDL_LoadFunction(long handle,byte[] name);
    public static native void SDL_UnloadObject(long handle);
    public static final int SDL_MAX_LOG_MESSAGE = 4096;
    public static final int SDL_LOG_CATEGORY_APPLICATION = (0) + 0;
    public static final int SDL_LOG_CATEGORY_ERROR = (0) + 1;
    public static final int SDL_LOG_CATEGORY_ASSERT = (0) + 2;
    public static final int SDL_LOG_CATEGORY_SYSTEM = (0) + 3;
    public static final int SDL_LOG_CATEGORY_AUDIO = (0) + 4;
    public static final int SDL_LOG_CATEGORY_VIDEO = (0) + 5;
    public static final int SDL_LOG_CATEGORY_RENDER = (0) + 6;
    public static final int SDL_LOG_CATEGORY_INPUT = (0) + 7;
    public static final int SDL_LOG_CATEGORY_TEST = (0) + 8;
    public static final int SDL_LOG_CATEGORY_RESERVED1 = (0) + 9;
    public static final int SDL_LOG_CATEGORY_RESERVED2 = (0) + 10;
    public static final int SDL_LOG_CATEGORY_RESERVED3 = (0) + 11;
    public static final int SDL_LOG_CATEGORY_RESERVED4 = (0) + 12;
    public static final int SDL_LOG_CATEGORY_RESERVED5 = (0) + 13;
    public static final int SDL_LOG_CATEGORY_RESERVED6 = (0) + 14;
    public static final int SDL_LOG_CATEGORY_RESERVED7 = (0) + 15;
    public static final int SDL_LOG_CATEGORY_RESERVED8 = (0) + 16;
    public static final int SDL_LOG_CATEGORY_RESERVED9 = (0) + 17;
    public static final int SDL_LOG_CATEGORY_RESERVED10 = (0) + 18;
    public static final int SDL_LOG_CATEGORY_CUSTOM = (0) + 19;
    public static final int SDL_LOG_PRIORITY_VERBOSE = (1);
    public static final int SDL_LOG_PRIORITY_DEBUG = (1) + 1;
    public static final int SDL_LOG_PRIORITY_INFO = (1) + 2;
    public static final int SDL_LOG_PRIORITY_WARN = (1) + 3;
    public static final int SDL_LOG_PRIORITY_ERROR = (1) + 4;
    public static final int SDL_LOG_PRIORITY_CRITICAL = (1) + 5;
    public static final int SDL_NUM_LOG_PRIORITIES = (1) + 6;
    public static native void SDL_LogSetAllPriority(int priority);
    public static native void SDL_LogSetPriority(int category,int priority);
    public static native int SDL_LogGetPriority(int category);
    public static native void SDL_LogResetPriorities();
    public static final int SDL_MESSAGEBOX_ERROR = (0x00000010);
    public static final int SDL_MESSAGEBOX_WARNING = (0x00000020);
    public static final int SDL_MESSAGEBOX_INFORMATION = (0x00000040);
    public static final int SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT = (0x00000001);
    public static final int SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT = (0x00000002);
    public static final int SDL_MESSAGEBOX_COLOR_BACKGROUND = (0) + 0;
    public static final int SDL_MESSAGEBOX_COLOR_TEXT = (0) + 1;
    public static final int SDL_MESSAGEBOX_COLOR_BUTTON_BORDER = (0) + 2;
    public static final int SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND = (0) + 3;
    public static final int SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED = (0) + 4;
    public static final int SDL_MESSAGEBOX_COLOR_MAX = (0) + 5;
    public static native int SDL_ShowMessageBox(long messageboxdata,int[] buttonid);
    public static native int SDL_ShowSimpleMessageBox(int flags,byte[] title,byte[] message,long window);
    public static final int SDL_POWERSTATE_UNKNOWN = (0) + 0;
    public static final int SDL_POWERSTATE_ON_BATTERY = (0) + 1;
    public static final int SDL_POWERSTATE_NO_BATTERY = (0) + 2;
    public static final int SDL_POWERSTATE_CHARGING = (0) + 3;
    public static final int SDL_POWERSTATE_CHARGED = (0) + 4;
    public static native int SDL_GetPowerInfo(int[] secs,int[] pct);
    public static final int SDL_RENDERER_SOFTWARE = (0x00000001);
    public static final int SDL_RENDERER_ACCELERATED = (0x00000002);
    public static final int SDL_RENDERER_PRESENTVSYNC = (0x00000004);
    public static final int SDL_RENDERER_TARGETTEXTURE = (0x00000008);
    public static final int SDL_TEXTUREACCESS_STATIC = (0) + 0;
    public static final int SDL_TEXTUREACCESS_STREAMING = (0) + 1;
    public static final int SDL_TEXTUREACCESS_TARGET = (0) + 2;
    public static final int SDL_TEXTUREMODULATE_NONE = (0x00000000);
    public static final int SDL_TEXTUREMODULATE_COLOR = (0x00000001);
    public static final int SDL_TEXTUREMODULATE_ALPHA = (0x00000002);
    public static final int SDL_FLIP_NONE = (0x00000000);
    public static final int SDL_FLIP_HORIZONTAL = (0x00000001);
    public static final int SDL_FLIP_VERTICAL = (0x00000002);
    public static native int SDL_GetNumRenderDrivers();
    public static native int SDL_GetRenderDriverInfo(int index,long info);
    public static native long SDL_CreateRenderer(long window,int index,int flags);
    public static native long SDL_CreateSoftwareRenderer(long surface);
    public static native long SDL_GetRenderer(long window);
    public static native int SDL_GetRendererInfo(long renderer,long info);
    public static native int SDL_GetRendererOutputSize(long renderer,int[] w,int[] h);
    public static native long SDL_CreateTexture(long renderer,int format,int access,int w,int h);
    public static native long SDL_CreateTextureFromSurface(long renderer,long surface);
    public static native int SDL_QueryTexture(long texture,int[] format,int[] access,int[] w,int[] h);
    public static native int SDL_SetTextureColorMod(long texture,byte r,byte g,byte b);
    public static native int SDL_GetTextureColorMod(long texture,byte[] r,byte[] g,byte[] b);
    public static native int SDL_SetTextureAlphaMod(long texture,byte alpha);
    public static native int SDL_GetTextureAlphaMod(long texture,byte[] alpha);
    public static native int SDL_SetTextureBlendMode(long texture,int blendMode);
    public static native int SDL_GetTextureBlendMode(long texture,long blendMode);
    public static native int SDL_UpdateTexture(long texture,long rect,long pixels,int pitch);
    public static native int SDL_UpdateYUVTexture(long texture,long rect,byte[] Yplane,int Ypitch,byte[] Uplane,int Upitch,byte[] Vplane,int Vpitch);
    public static native void SDL_UnlockTexture(long texture);
    public static native int SDL_RenderTargetSupported(long renderer);
    public static native int SDL_SetRenderTarget(long renderer,long texture);
    public static native long SDL_GetRenderTarget(long renderer);
    public static native int SDL_RenderSetLogicalSize(long renderer,int w,int h);
    public static native void SDL_RenderGetLogicalSize(long renderer,int[] w,int[] h);
    public static native int SDL_RenderSetViewport(long renderer,long rect);
    public static native void SDL_RenderGetViewport(long renderer,long rect);
    public static native int SDL_RenderSetClipRect(long renderer,long rect);
    public static native void SDL_RenderGetClipRect(long renderer,long rect);
    public static native int SDL_RenderSetScale(long renderer,float scaleX,float scaleY);
    public static native void SDL_RenderGetScale(long renderer,float[] scaleX,float[] scaleY);
    public static native int SDL_SetRenderDrawColor(long renderer,byte r,byte g,byte b,byte a);
    public static native int SDL_GetRenderDrawColor(long renderer,byte[] r,byte[] g,byte[] b,byte[] a);
    public static native int SDL_SetRenderDrawBlendMode(long renderer,int blendMode);
    public static native int SDL_GetRenderDrawBlendMode(long renderer,long blendMode);
    public static native int SDL_RenderClear(long renderer);
    public static native int SDL_RenderDrawPoint(long renderer,int x,int y);
    public static native int SDL_RenderDrawPoints(long renderer,long points,int count);
    public static native int SDL_RenderDrawLine(long renderer,int x1,int y1,int x2,int y2);
    public static native int SDL_RenderDrawLines(long renderer,long points,int count);
    public static native int SDL_RenderDrawRect(long renderer,long rect);
    public static native int SDL_RenderDrawRects(long renderer,long rects,int count);
    public static native int SDL_RenderFillRect(long renderer,long rect);
    public static native int SDL_RenderFillRects(long renderer,long rects,int count);
    public static native int SDL_RenderCopy(long renderer,long texture,long srcrect,long dstrect);
    public static native int SDL_RenderCopyEx(long renderer,long texture,long srcrect,long dstrect,double angle,long center,int flip);
    public static native int SDL_RenderReadPixels(long renderer,long rect,int format,long pixels,int pitch);
    public static native void SDL_RenderPresent(long renderer);
    public static native void SDL_DestroyTexture(long texture);
    public static native void SDL_DestroyRenderer(long renderer);
    public static native int SDL_GL_BindTexture(long texture,float[] texw,float[] texh);
    public static native int SDL_GL_UnbindTexture(long texture);
    public static final int SDL_INIT_TIMER = 0x00000001;
    public static final int SDL_INIT_AUDIO = 0x00000010;
    public static final int SDL_INIT_VIDEO = 0x00000020;
    public static final int SDL_INIT_JOYSTICK = 0x00000200;
    public static final int SDL_INIT_HAPTIC = 0x00001000;
    public static final int SDL_INIT_GAMECONTROLLER = 0x00002000;
    public static final int SDL_INIT_EVENTS = 0x00004000;
    public static final int SDL_INIT_NOPARACHUTE = 0x00100000;
    public static final int SDL_INIT_EVERYTHING = (                  SDL_INIT_TIMER | SDL_INIT_AUDIO | SDL_INIT_VIDEO | SDL_INIT_EVENTS |                  SDL_INIT_JOYSTICK | SDL_INIT_HAPTIC | SDL_INIT_GAMECONTROLLER              );
    public static native int SDL_Init(int flags);
    public static native int SDL_InitSubSystem(int flags);
    public static native void SDL_QuitSubSystem(int flags);
    public static native int SDL_WasInit(int flags);
    public static native void SDL_Quit();
}
